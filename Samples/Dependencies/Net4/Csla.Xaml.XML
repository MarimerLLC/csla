<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Csla.Xaml</name>
    </assembly>
    <members>
        <member name="T:Csla.Xaml.ApplicationContextManager">
            <summary>
            ApplicationContextManager for WPF applications
            </summary>
        </member>
        <member name="M:Csla.Xaml.ApplicationContextManager.GetUser">
            <summary>
            Gets the current principal.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.Xaml.ApplicationContextManager.SetUser(System.Security.Principal.IPrincipal)">
            <summary>
            Sets the current principal.
            </summary>
            <param name="principal">Principal object.</param>
        </member>
        <member name="M:Csla.Xaml.ApplicationContextManager.GetLocalContext">
            <summary>
            Gets the local context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.Xaml.ApplicationContextManager.SetLocalContext(Csla.Core.ContextDictionary)">
            <summary>
            Sets the local context.
            </summary>
            <param name="localContext">Local context.</param>
        </member>
        <member name="M:Csla.Xaml.ApplicationContextManager.GetClientContext">
            <summary>
            Gets the client context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.Xaml.ApplicationContextManager.SetClientContext(Csla.Core.ContextDictionary)">
            <summary>
            Sets the client context.
            </summary>
            <param name="clientContext">Client context.</param>
        </member>
        <member name="M:Csla.Xaml.ApplicationContextManager.GetGlobalContext">
            <summary>
            Gets the global context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.Xaml.ApplicationContextManager.SetGlobalContext(Csla.Core.ContextDictionary)">
            <summary>
            Sets the global context.
            </summary>
            <param name="globalContext">Global context.</param>
        </member>
        <member name="P:Csla.Xaml.ApplicationContextManager.IsValid">
            <summary>
            Gets a value indicating whether this
            context manager is valid for use in
            the current environment.
            </summary>
        </member>
        <member name="T:Csla.Xaml.BrokenRuleSeverityConverter">
            <summary>
            Converts validation severity values into corresponding
            images.
            </summary>
        </member>
        <member name="M:Csla.Xaml.BrokenRuleSeverityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts validation severity values into corresponding
            images.
            </summary>
            <param name="value">Original value.</param>
            <param name="targetType">Desired output type (ignored).</param>
            <param name="parameter">Extra parameter (ignored).</param>
            <param name="culture">Desired culture (ignored).</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Xaml.BrokenRuleSeverityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns the original value.
            </summary>
            <param name="value">Original value.</param>
            <param name="targetType">Desired output type (ignored).</param>
            <param name="parameter">Extra parameter (ignored).</param>
            <param name="culture">Desired culture (ignored).</param>
        </member>
        <member name="T:Csla.Xaml.BusyAnimation">
            <summary>
            Displays a busy animation.
            </summary>
        </member>
        <member name="F:Csla.Xaml.BusyAnimation.StepIntervalProperty">
            <summary>
            StepInterval property to control speed of animation.
            </summary>
        </member>
        <member name="F:Csla.Xaml.BusyAnimation.IsRunningProperty">
            <summary>
            IsRunning property to control whether the 
            animation is running.
            </summary>
        </member>
        <member name="M:Csla.Xaml.BusyAnimation.#ctor">
            <summary>
            Creates an instance of the control.
            </summary>
        </member>
        <member name="P:Csla.Xaml.BusyAnimation.StepInterval">
            <summary>
            Gets or sets a property controlling
            the speed of the animation.
            </summary>
        </member>
        <member name="P:Csla.Xaml.BusyAnimation.IsRunning">
            <summary>
            Gets or sets a property controlling
            whether the animation is running.
            </summary>
        </member>
        <member name="T:Csla.Xaml.CancellableViewModel`1">
            <summary>
            ViewModel without multithreading (concurrency) bugs.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Csla.Xaml.ViewModel`1">
            <summary>
            Base class used to create ViewModel objects,
            with pre-existing verbs for use by
            InvokeMethod or Invoke.
            </summary>
            <typeparam name="T">Type of the Model object.</typeparam>
        </member>
        <member name="T:Csla.Xaml.ViewModelBase`1">
            <summary>
            Base class used to create ViewModel objects that
            implement their own commands/verbs/actions.
            </summary>
            <typeparam name="T">Type of the Model object.</typeparam>
        </member>
        <member name="T:Csla.Xaml.IViewModel">
            <summary>
            Defines a CSLA .NET viewmodel
            object.
            </summary>
        </member>
        <member name="P:Csla.Xaml.IViewModel.Model">
            <summary>
            Gets or sets the Model property
            of the viewmodel object.
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.#ctor">
            <summary>
            Create new instance of base class used to create ViewModel objects that
            implement their own commands/verbs/actions.
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.InitAsync">
            <summary>
            Method used to perform async initialization of the
            viewmodel. This method is usually invoked immediately
            following construction of the object instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.DoInitAsync">
            <summary>
            Override this method to implement async initialization of
            the model object. The result of this method is used
            to set the Model property of the viewmodel.
            </summary>
            <returns>A Task that creates the model object.</returns>
        </member>
        <member name="F:Csla.Xaml.ViewModelBase`1.ModelProperty">
            <summary>
            Gets or sets the Model object.
            </summary>
        </member>
        <member name="F:Csla.Xaml.ViewModelBase`1.ManageObjectLifetimeProperty">
            <summary>
            Gets or sets a value indicating whether the
            ViewModel should automatically managed the
            lifetime of the Model.
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.OnError(System.Exception)">
            <summary>
            Raises ErrorOccurred event when an error occurs
            during processing.
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.SetPropertiesAtObjectLevel">
            <summary>
            This method is only called from constuctor to set default values immediately.
            Sets the properties at object level.
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.DoRefresh(System.Func{`0})">
            <summary>
            Creates or retrieves a new instance of the 
            Model by invoking a static factory method.
            </summary>
            <param name="factoryMethod">Static factory method function.</param>
            <example>DoRefresh(BusinessList.GetList)</example>
            <example>DoRefresh(() => BusinessList.GetList())</example>
            <example>DoRefresh(() => BusinessList.GetList(id))</example>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.DoRefresh(System.String,System.Object[])">
            <summary>
            Creates or retrieves a new instance of the 
            Model by invoking a static factory method.
            </summary>
            <param name="factoryMethod">Name of the static factory method.</param>
            <param name="factoryParameters">Factory method parameters.</param>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.DoRefresh(System.String)">
            <summary>
            Creates or retrieves a new instance of the 
            Model by invoking a static factory method.
            </summary>
            <param name="factoryMethod">Name of the static factory method.</param>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.BeginRefresh(System.Action{System.EventHandler{Csla.DataPortalResult{`0}}})">
            <summary>
            Creates or retrieves a new instance of the 
            Model by invoking a static factory method.
            </summary>
            <param name="factoryMethod">Static factory method action.</param>
            <example>BeginRefresh(BusinessList.BeginGetList)</example>
            <example>BeginRefresh(handler => BusinessList.BeginGetList(handler))</example>
            <example>BeginRefresh(handler => BusinessList.BeginGetList(id, handler))</example>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.BeginRefresh(System.String,System.Object[])">
            <summary>
            Creates or retrieves a new instance of the 
            Model by invoking a static factory method.
            </summary>
            <param name="factoryMethod">Name of the static factory method.</param>
            <param name="factoryParameters">Factory method parameters.</param>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.BeginRefresh(System.String)">
            <summary>
            Creates or retrieves a new instance of the 
            Model by invoking a static factory method.
            </summary>
            <param name="factoryMethod">Name of the static factory method.</param>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.OnRefreshing(`0)">
            <summary>
            Method called after a refresh operation 
            has completed and before the model is updated 
            (when successful).
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.OnRefreshed">
            <summary>
            Method called after a refresh operation 
            has completed (whether successful or
            not).
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.DoSave">
            <summary>
            Saves the Model, first committing changes
            if ManagedObjectLifetime is true.
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.SaveAsync">
            <summary>
            Saves the Model, first committing changes
            if ManagedObjectLifetime is true.
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.BeginSave">
            <summary>
            Saves the Model, first committing changes
            if ManagedObjectLifetime is true.
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.OnSaving(`0)">
            <summary>
            Method called after a save operation 
            has completed and before Model is updated 
            (when successful).
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.OnSaved">
            <summary>
            Method called after a save operation 
            has completed (whether successful or
            not).
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.DoCancel">
            <summary>
            Cancels changes made to the model 
            if ManagedObjectLifetime is true.
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.DoAddNew">
            <summary>
            Adds a new item to the Model (if it
            is a collection).
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.DoRemove(System.Object)">
            <summary>
            Removes an item from the Model (if it
            is a collection).
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.DoDelete">
            <summary>
            Marks the Model for deletion (if it is an
            editable root object).
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.OnPropertyChanged(System.String)">
            <summary>
            Raise the PropertyChanged event.
            </summary>
            <param name="propertyName">Name of the changed property.</param>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.OnModelChanged(`0,`0)">
            <summary>
            Invoked when the Model changes, allowing
            event handlers to be unhooked from the old
            object and hooked on the new object.
            </summary>
            <param name="oldValue">Previous Model reference.</param>
            <param name="newValue">New Model reference.</param>
        </member>
        <member name="M:Csla.Xaml.ViewModelBase`1.OnSetProperties">
            <summary>
            Override this method to hook into to logic of setting properties when model is changed or edited. 
            </summary>
        </member>
        <member name="P:Csla.Xaml.ViewModelBase`1.Model">
            <summary>
            Gets or sets the Model object.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ViewModelBase`1.ManageObjectLifetime">
            <summary>
            Gets or sets a value indicating whether the
            ViewManageObjectLifetime should automatically managed the
            lifetime of the ManageObjectLifetime.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ViewModelBase`1.Error">
            <summary>
            Gets the Error object corresponding to the
            last asyncronous operation.
            </summary>
        </member>
        <member name="E:Csla.Xaml.ViewModelBase`1.ErrorOccurred">
            <summary>
            Event raised when an error occurs during processing.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ViewModelBase`1.IsBusy">
            <summary>
            Gets a value indicating whether this object is
            executing an asynchronous process.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ViewModelBase`1.IsDirty">
            <summary>
            Gets a value indicating whether the Model
            has been changed.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ViewModelBase`1.IsValid">
            <summary>
            Gets a value indicating whether the Model
            is currently valid (has no broken rules).
            </summary>
        </member>
        <member name="P:Csla.Xaml.ViewModelBase`1.CanSave">
            <summary>
            Gets a value indicating whether the Model
            can currently be saved.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ViewModelBase`1.CanCancel">
            <summary>
            Gets a value indicating whether the Model
            can currently be canceled.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ViewModelBase`1.CanCreate">
            <summary>
            Gets a value indicating whether an instance
            of the Model
            can currently be created.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ViewModelBase`1.CanDelete">
            <summary>
            Gets a value indicating whether the Model
            can currently be deleted.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ViewModelBase`1.CanFetch">
            <summary>
            Gets a value indicating whether an instance
            of the Model
            can currently be retrieved.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ViewModelBase`1.CanRemove">
            <summary>
            Gets a value indicating whether the Model
            can currently be removed.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ViewModelBase`1.CanAddNew">
            <summary>
            Gets a value indicating whether the Model
            can currently be added.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ViewModelBase`1.CanCreateObject">
            <summary>
            Gets a value indicating whether the current
            user is authorized to create a Model.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ViewModelBase`1.CanGetObject">
            <summary>
            Gets a value indicating whether the current
            user is authorized to retrieve a Model.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ViewModelBase`1.CanEditObject">
            <summary>
            Gets a value indicating whether the current
            user is authorized to save (insert or update
            a Model.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ViewModelBase`1.CanDeleteObject">
            <summary>
            Gets a value indicating whether the current
            user is authorized to delete
            a Model.
            </summary>
        </member>
        <member name="E:Csla.Xaml.ViewModelBase`1.PropertyChanged">
            <summary>
            Event raised when a property changes.
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModel`1.Save(System.Object,Csla.Xaml.ExecuteEventArgs)">
            <summary>
            Saves the Model, first committing changes
            if ManagedObjectLifetime is true.
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModel`1.Cancel(System.Object,Csla.Xaml.ExecuteEventArgs)">
            <summary>
            Cancels changes made to the model 
            if ManagedObjectLifetime is true.
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModel`1.AddNew(System.Object,Csla.Xaml.ExecuteEventArgs)">
            <summary>
            Adds a new item to the Model (if it
            is a collection).
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModel`1.Remove(System.Object,Csla.Xaml.ExecuteEventArgs)">
            <summary>
            Removes an item from the Model (if it
            is a collection).
            </summary>
        </member>
        <member name="M:Csla.Xaml.ViewModel`1.Delete(System.Object,Csla.Xaml.ExecuteEventArgs)">
            <summary>
            Marks the Model for deletion (if it is an
            editable root object).
            </summary>
        </member>
        <member name="M:Csla.Xaml.CancellableViewModel`1.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Csla.Xaml.CancellableViewModel`1.BeginRefresh(System.Action{System.EventHandler{Csla.DataPortalResult{`0}}})">
            <summary>
            Creates or retrieves a new instance of the 
            Model by invoking a static factory method.
            </summary>
            <param name="factoryMethod">Static factory method action.</param>
            <example>BeginRefresh(BusinessList.BeginGetList)</example>
            <example>BeginRefresh(handler => BusinessList.BeginGetList(handler))</example>
            <example>BeginRefresh(handler => BusinessList.BeginGetList(id, handler))</example>
        </member>
        <member name="M:Csla.Xaml.CancellableViewModel`1.BeginRefresh(System.String,System.Object[])">
            <summary>
            Creates or retrieves a new instance of the 
            Model by invoking a static factory method.
            </summary>
            <param name="factoryMethod">Name of the static factory method.</param>
            <param name="factoryParameters">Factory method parameters.</param>
        </member>
        <member name="M:Csla.Xaml.CancellableViewModel`1.CancelRefresh">
            <summary>
            Cancel refresh operation.
            </summary>
        </member>
        <member name="P:Csla.Xaml.CancellableViewModel`1.IsConcurentRefreshesAllowed">
            <summary>
            Allows more than one refresh operations in one time.
            Anyway, only the last refresh request will set the Model.
            </summary>
        </member>
        <member name="T:Csla.Xaml.CslaDataProvider">
            <summary>
            Wraps and creates a CSLA .NET-style object 
            that you can use as a binding source.
            </summary>
        </member>
        <member name="M:Csla.Xaml.CslaDataProvider.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Xaml.CslaDataProvider.OnSaved(System.Object,System.Exception,System.Object)">
            <summary>
            Raise the Saved event when the object has been saved.
            </summary>
            <param name="newObject">New object reference as a result
            of the save operation.</param>
            <param name="error">Reference to an exception object if
            an error occurred.</param>
            <param name="userState">Reference to a userstate object.</param>
        </member>
        <member name="M:Csla.Xaml.CslaDataProvider.Rebind">
            <summary>
            Triggers WPF data binding to rebind to the
            data object.
            </summary>
        </member>
        <member name="M:Csla.Xaml.CslaDataProvider.BeginInit">
            <summary>
            Indicates that the control is about to initialize.
            </summary>
        </member>
        <member name="M:Csla.Xaml.CslaDataProvider.EndInit">
            <summary>
            Indicates that the control has initialized.
            </summary>
        </member>
        <member name="M:Csla.Xaml.CslaDataProvider.BeginQuery">
            <summary>
            Overridden. Starts to create the requested object, 
            either immediately or on a background thread, 
            based on the value of the IsAsynchronous property.
            </summary>
        </member>
        <member name="M:Csla.Xaml.CslaDataProvider.Cancel">
            <summary>
            Cancels changes to the business object, returning
            it to its previous state.
            </summary>
            <remarks>
            This metod does nothing unless ManageLifetime is
            set to true and the object supports n-level undo.
            </remarks>
        </member>
        <member name="M:Csla.Xaml.CslaDataProvider.Save">
            <summary>
            Accepts changes to the business object, and
            commits them by calling the object's Save()
            method.
            </summary>
            <remarks>
            <para>
            This method does nothing unless the object
            implements Csla.Core.ISavable.
            </para><para>
            If the object implements IClonable, it
            will be cloned, and the clone will be
            saved.
            </para><para>
            If the object supports n-level undo and
            ManageLifetime is true, then this method
            will automatically call ApplyEdit() and
            BeginEdit() appropriately.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Xaml.CslaDataProvider.AddNew">
            <summary>
            Adds a new item to the object if the object
            implements IBindingList and AllowNew is true.
            </summary>
        </member>
        <member name="M:Csla.Xaml.CslaDataProvider.RemoveItem(System.Object,Csla.Xaml.ExecuteEventArgs)">
            <summary>
            Removes an item from the list if the object
            implements IBindingList and AllowRemove is true.
            </summary>
            <param name="sender">Object invoking this method.</param>
            <param name="e">
            ExecuteEventArgs, where MethodParameter contains 
            the item to be removed from the list.
            </param>
        </member>
        <member name="E:Csla.Xaml.CslaDataProvider.Saved">
            <summary>
            Event raised when the object has been saved.
            </summary>
        </member>
        <member name="P:Csla.Xaml.CslaDataProvider.CommandManager">
            <summary>
            Gets an object that can be used to execute
            Save and Undo commands on this CslaDataProvider 
            through XAML command bindings.
            </summary>
        </member>
        <member name="P:Csla.Xaml.CslaDataProvider.ObjectType">
            <summary>
            Gets or sets the type of object 
            to create an instance of.
            </summary>
        </member>
        <member name="P:Csla.Xaml.CslaDataProvider.ManageObjectLifetime">
            <summary>
            Gets or sets a value indicating whether the
            data control should manage the lifetime of
            the business object, including using n-level
            undo.
            </summary>
        </member>
        <member name="P:Csla.Xaml.CslaDataProvider.DataChangedHandler">
            <summary>
            Gets or sets a reference to an object that
            will handle the DataChanged event raised
            by this data provider.
            </summary>
            <remarks>
            This property is designed to 
            reference an IErrorDialog control.
            </remarks>
        </member>
        <member name="P:Csla.Xaml.CslaDataProvider.FactoryMethod">
            <summary>
            Gets or sets the name of the static
            (Shared in Visual Basic) factory method
            that should be called to create the
            object instance.
            </summary>
        </member>
        <member name="P:Csla.Xaml.CslaDataProvider.FactoryParameters">
            <summary>
            Get the list of parameters to pass
            to the factory method.
            </summary>
        </member>
        <member name="P:Csla.Xaml.CslaDataProvider.IsAsynchronous">
            <summary>
            Gets or sets a value that indicates 
            whether to perform object creation in 
            a worker thread or in the active context.
            </summary>
        </member>
        <member name="P:Csla.Xaml.CslaDataProvider.ObjectInstance">
            <summary>
            Gets or sets a reference to the data
            object.
            </summary>
        </member>
        <member name="P:Csla.Xaml.CslaDataProvider.IsBusy">
            <summary>
            Gets a value indicating if this object is busy.
            </summary>
        </member>
        <member name="T:Csla.Xaml.CslaDataProviderCommandManager">
            <summary>
            Implements support for RoutedCommands that can
            be executed by the CslaDataProvider control.
            </summary>
            <remarks>
            Use this object as the CommandTarget for command
            source objects when you want the CslaDataProvider
            to execute the command.
            </remarks>
        </member>
        <member name="T:Csla.Xaml.DataDecoratorBase">
            <summary>
            Base class for creating WPF panel
            controls that react when the DataContext,
            data object and data property values
            are changed.
            </summary>
        </member>
        <member name="M:Csla.Xaml.DataDecoratorBase.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Xaml.DataDecoratorBase.Panel_DataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle case where the DataContext for the
            control has changed.
            </summary>
        </member>
        <member name="M:Csla.Xaml.DataDecoratorBase.DataProvider_DataChanged(System.Object,System.EventArgs)">
            <summary>
            Handle case where the Data property of the
            DataContext (a DataSourceProvider) has changed.
            </summary>
        </member>
        <member name="M:Csla.Xaml.DataDecoratorBase.DataPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This method is called when a property
            of the data object to which the 
            control is bound has changed.
            </summary>
        </member>
        <member name="M:Csla.Xaml.DataDecoratorBase.DataBindingListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            This method is called if the data
            object is an IBindingList, and the 
            ListChanged event was raised by
            the data object.
            </summary>
        </member>
        <member name="M:Csla.Xaml.DataDecoratorBase.DataObservableCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method is called if the data
            object is an INotifyCollectionChanged, 
            and the CollectionChanged event was 
            raised by the data object.
            </summary>
        </member>
        <member name="M:Csla.Xaml.DataDecoratorBase.DataObjectChanged">
            <summary>
            This method is called when the data
            object to which the control is bound
            has changed.
            </summary>
        </member>
        <member name="M:Csla.Xaml.DataDecoratorBase.FindChildBindings">
            <summary>
            Scans all child controls of this panel
            for object bindings, and calls
            <see cref="M:Csla.Xaml.DataDecoratorBase.FoundBinding(System.Windows.Data.Binding,System.Windows.FrameworkElement,System.Windows.DependencyProperty)"/> for each
            binding found.
            </summary>
        </member>
        <member name="M:Csla.Xaml.DataDecoratorBase.FoundBinding(System.Windows.Data.Binding,System.Windows.FrameworkElement,System.Windows.DependencyProperty)">
            <summary>
            Called by
            <see cref="M:Csla.Xaml.DataDecoratorBase.FindChildBindings"/> each
            time an object binding is found.
            </summary>
            <param name="bnd">The Binding object.</param>
            <param name="control">The control containing the binding.</param>
            <param name="prop">The data bound DependencyProperty.</param>
        </member>
        <member name="P:Csla.Xaml.DataDecoratorBase.DataObject">
            <summary>
            Gets a reference to the current
            data object.
            </summary>
            <remarks>
            The DataContext may not be the data object. The
            DataContext may be a DataSourceProvider control.
            This property returns a reference to the actual
            <b>data object</b>, not necessarily the DataContext
            itself.
            </remarks>
        </member>
        <member name="T:Csla.Xaml.ErrorDialog">
            <summary>
            Displays an error dialog for any exceptions
            that occur in a CslaDataProvider.
            </summary>
        </member>
        <member name="T:Csla.Xaml.IErrorDialog">
            <summary>
            Interface defining the interaction between
            a CslaDataSource and an error dialog control.
            </summary>
        </member>
        <member name="M:Csla.Xaml.IErrorDialog.Register(System.Object)">
            <summary>
            Method called by the CslaDataProvider when the
            error dialog should register any events it
            wishes to handle from the CslaDataProvider.
            </summary>
            <param name="source">Data provider control.</param>
        </member>
        <member name="M:Csla.Xaml.ErrorDialog.#ctor">
            <summary>
            Creates a new instance of the control.
            </summary>
        </member>
        <member name="F:Csla.Xaml.ErrorDialog.DialogTitleProperty">
            <summary>
            Gets or sets the title of the error
            dialog.
            </summary>
        </member>
        <member name="F:Csla.Xaml.ErrorDialog.DialogFirstLineProperty">
            <summary>
            Gets or sets the first line of text displayed
            within the error dialog (before the
            exception message).
            </summary>
        </member>
        <member name="F:Csla.Xaml.ErrorDialog.ShowExceptionDetailProperty">
            <summary>
            Gets or sets a value indicating whether
            the dialog should include exception details
            or just the exception summary message.
            </summary>
        </member>
        <member name="F:Csla.Xaml.ErrorDialog.DialogIconProperty">
            <summary>
            Gets or sets a value indicating whether
            the dialog should include exception details
            or just the exception summary message.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ErrorDialog.DialogTitle">
            <summary>
            Gets or sets the title of the error
            dialog.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ErrorDialog.DialogFirstLine">
            <summary>
            Gets or sets the first line of text displayed
            within the error dialog (before the
            exception message).
            </summary>
        </member>
        <member name="P:Csla.Xaml.ErrorDialog.ShowExceptionDetail">
            <summary>
            Gets or sets the first line of text displayed
            within the error dialog (before the
            exception message).
            </summary>
        </member>
        <member name="P:Csla.Xaml.ErrorDialog.DialogIcon">
            <summary>
            Gets or sets the icon displayed in
            the dialog.
            </summary>
        </member>
        <member name="T:Csla.Xaml.ErrorEventArgs">
            <summary>
            Contains information about the error that
            has occurred.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ErrorEventArgs.Error">
            <summary>
            Gets the Exception object for the error
            that occurred.
            </summary>
        </member>
        <member name="T:Csla.Xaml.ExecuteEventArgs">
            <summary>
            Arguments passed to a method invoked
            by the Execute trigger action.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ExecuteEventArgs.TriggerSource">
            <summary>
            The control that raised the event that
            triggered invocation of this method.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ExecuteEventArgs.MethodParameter">
            <summary>
            The MethodParameter value provided by
            the designer.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ExecuteEventArgs.TriggerParameter">
            <summary>
            The EventArgs parameter from the event
            that triggered invocation of this method.
            </summary>
        </member>
        <member name="T:Csla.Xaml.IdentityConverter">
            <summary>
            Provides the functionality of a WPF
            value converter without affecting the
            value as it flows to and from the UI.
            </summary>
        </member>
        <member name="M:Csla.Xaml.IdentityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns the unchanged value.
            </summary>
            <param name="value">Value to be converted.</param>
            <param name="targetType">Desired value type.</param>
            <param name="parameter">Conversion parameter.</param>
            <param name="culture">Conversion culture.</param>
        </member>
        <member name="M:Csla.Xaml.IdentityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns the unchanged value.
            </summary>
            <param name="value">Value to be converted.</param>
            <param name="targetType">Desired value type.</param>
            <param name="parameter">Conversion parameter.</param>
            <param name="culture">Conversion culture.</param>
        </member>
        <member name="T:Csla.Xaml.InvokeMethod">
            <summary>
            Invokes a method on a target object when a 
            trigger event is raised from the attached
            UI control.
            </summary>
        </member>
        <member name="F:Csla.Xaml.InvokeMethod.TargetProperty">
            <summary>
            Object containing the method to be invoked.
            </summary>
        </member>
        <member name="M:Csla.Xaml.InvokeMethod.SetTarget(System.Windows.UIElement,System.Object)">
            <summary>
            Sets the object containing the method to be invoked.
            </summary>
            <param name="ctrl">Attached control</param>
            <param name="value">New value</param>
        </member>
        <member name="M:Csla.Xaml.InvokeMethod.GetTarget(System.Windows.UIElement)">
            <summary>
            Gets the object containing the method to be invoked.
            </summary>
            <param name="ctrl">Attached control</param>
        </member>
        <member name="F:Csla.Xaml.InvokeMethod.MethodNameProperty">
            <summary>
            Name of method to be invoked.
            </summary>
        </member>
        <member name="M:Csla.Xaml.InvokeMethod.SetMethodName(System.Windows.UIElement,System.String)">
            <summary>
            Sets the name of method to be invoked.
            </summary>
            <param name="ctrl">Attached control</param>
            <param name="value">New value</param>
        </member>
        <member name="M:Csla.Xaml.InvokeMethod.GetMethodName(System.Windows.UIElement)">
            <summary>
            Gets the name of method to be invoked.
            </summary>
            <param name="ctrl">Attached control</param>
        </member>
        <member name="F:Csla.Xaml.InvokeMethod.TriggerEventProperty">
            <summary>
            Name of event raised by UI control that triggers
            invoking the target method.
            </summary>
        </member>
        <member name="M:Csla.Xaml.InvokeMethod.SetTriggerEvent(System.Windows.UIElement,System.String)">
            <summary>
            Sets the name of event raised by UI control that triggers
            invoking the target method.
            </summary>
            <param name="ctrl">Attached control</param>
            <param name="value">New value</param>
        </member>
        <member name="M:Csla.Xaml.InvokeMethod.GetTriggerEvent(System.Windows.UIElement)">
            <summary>
            Gets the name of event raised by UI control that triggers
            invoking the target method.
            </summary>
            <param name="ctrl">Attached control</param>
        </member>
        <member name="F:Csla.Xaml.InvokeMethod.MethodParameterProperty">
            <summary>
            Parameter value to be passed to invoked method.
            </summary>
        </member>
        <member name="M:Csla.Xaml.InvokeMethod.SetMethodParameter(System.Windows.UIElement,System.Object)">
            <summary>
            Sets the parameter value to be passed to invoked method.
            </summary>
            <param name="ctrl">Attached control</param>
            <param name="value">New value</param>
        </member>
        <member name="M:Csla.Xaml.InvokeMethod.GetMethodParameter(System.Windows.UIElement)">
            <summary>
            Gets the parameter value to be passed to invoked method.
            </summary>
            <param name="ctrl">Attached control</param>
        </member>
        <member name="M:Csla.Xaml.InvokeMethod.#ctor(System.Windows.UIElement)">
            <summary>
            Invokes the target method if all required attached
            property values have been set.
            </summary>
            <param name="ctrl">Attached UI control</param>
        </member>
        <member name="T:Csla.Xaml.IsNotConverter">
            <summary>
            Converts a Boolean value into its inverse.
            </summary>
        </member>
        <member name="M:Csla.Xaml.IsNotConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">Original value.</param>
            <param name="targetType">Desired output type (ignored).</param>
            <param name="parameter">Extra parameter (ignored).</param>
            <param name="culture">Desired culture (ignored).</param>
        </member>
        <member name="M:Csla.Xaml.IsNotConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">Original value.</param>
            <param name="targetType">Desired output type (ignored).</param>
            <param name="parameter">Extra parameter (ignored).</param>
            <param name="culture">Desired culture (ignored).</param>
        </member>
        <member name="T:Csla.Xaml.ObjectStatus">
            <summary>
            Container for other UI controls that exposes
            various status values from the CSLA .NET
            business object acting as DataContext.
            </summary>
            <remarks>
            This control provides access to the IsDirty,
            IsNew, IsDeleted, IsValid and IsSavable properties
            of a business object. The purpose behind this
            control is to expose those properties in a way
            that supports WFP data binding against those
            values.
            </remarks>
        </member>
        <member name="M:Csla.Xaml.ObjectStatus.DataObjectChanged">
            <summary>
            This method is called when the data
            object to which the control is bound
            has changed.
            </summary>
        </member>
        <member name="M:Csla.Xaml.ObjectStatus.DataPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            This method is called when a property
            of the data object to which the 
            control is bound has changed.
            </summary>
        </member>
        <member name="M:Csla.Xaml.ObjectStatus.DataBindingListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            This method is called if the data
            object is an IBindingList, and the 
            ListChanged event was raised by
            the data object.
            </summary>
        </member>
        <member name="M:Csla.Xaml.ObjectStatus.DataObservableCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method is called if the data
            object is an INotifyCollectionChanged, 
            and the CollectionChanged event was 
            raised by the data object.
            </summary>
        </member>
        <member name="M:Csla.Xaml.ObjectStatus.Refresh">
            <summary>
            Refreshes the control's property
            values to reflect the values of
            the underlying business object.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ObjectStatus.CanCreateObject">
            <summary>
            Exposes the CanCreateObject property of the
            DataContext business object.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ObjectStatus.CanGetObject">
            <summary>
            Exposes the CanGetObject property of the
            DataContext business object.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ObjectStatus.CanEditObject">
            <summary>
            Exposes the CanEditObject property of the
            DataContext business object.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ObjectStatus.CanDeleteObject">
            <summary>
            Exposes the CanDeleteObject property of the
            DataContext business object.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ObjectStatus.IsDeleted">
            <summary>
            Exposes the IsDeleted property of the
            DataContext business object.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ObjectStatus.IsDirty">
            <summary>
            Exposes the IsDirty property of the
            DataContext business object.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ObjectStatus.IsNew">
            <summary>
            Exposes the IsNew property of the
            DataContext business object.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ObjectStatus.IsSavable">
            <summary>
            Exposes the IsSavable property of the
            DataContext business object.
            </summary>
        </member>
        <member name="P:Csla.Xaml.ObjectStatus.IsValid">
            <summary>
            Exposes the IsValid property of the
            DataContext business object.
            </summary>
        </member>
        <member name="T:Csla.Xaml.PropertyInfo">
            <summary>
            Expose metastate information about a property.
            </summary>
        </member>
        <member name="M:Csla.Xaml.PropertyInfo.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Xaml.PropertyInfo.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the object for testing.
            </summary>
            <param name="testing">Test mode parameter.</param>
        </member>
        <member name="F:Csla.Xaml.PropertyInfo.BrokenRulesProperty">
            <summary>
            Gets the broken rules collection from the
            business object.
            </summary>
        </member>
        <member name="F:Csla.Xaml.PropertyInfo.MyDataContextProperty">
            <summary>
            Used to monitor for changes in the binding path.
            </summary>
        </member>
        <member name="F:Csla.Xaml.PropertyInfo.RelativeBindingProperty">
            <summary>
            Used to monitor for changes in the binding path.
            </summary>
        </member>
        <member name="F:Csla.Xaml.PropertyInfo.PropertyProperty">
            <summary>
            Gets or sets the source business
            property to which this control is bound.
            </summary>
        </member>
        <member name="M:Csla.Xaml.PropertyInfo.ParseRelativeBinding(System.Windows.Data.BindingExpression)">
            <summary>
            Checks a binding expression to see if it is a relative source binding used in a control template.
            </summary>
            <param name="sourceBinding">The binding expression to parse.</param>
            <returns>If the source binding is a relative source binding, this method 
            finds the proper dependency property on the parent control and returns
            the binding expression for that property.</returns>
        </member>
        <member name="M:Csla.Xaml.PropertyInfo.SetSource(System.Boolean)">
            <summary>
            Sets the source binding and updates status.
            </summary>
        </member>
        <member name="M:Csla.Xaml.PropertyInfo.SetSource(System.Object)">
            <summary>
            Sets the source binding and updates status.
            </summary>
        </member>
        <member name="M:Csla.Xaml.PropertyInfo.SetBindingValues(System.Windows.Data.BindingExpression)">
            <summary>
            Sets the binding values for this instance.
            </summary>
        </member>
        <member name="M:Csla.Xaml.PropertyInfo.GetRealSource(System.Object,System.String)">
            <summary>
            Gets the real source helper method.
            </summary>
            <param name="source">The source.</param>
            <param name="bindingPath">The binding path.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Xaml.PropertyInfo.GetRelativePath(System.Object,System.String)">
            <summary>
            Gets the part of the binding path relevant to the given source.
            </summary>
            <param name="source">The source.</param>
            <param name="bindingPath">The binding path.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Xaml.PropertyInfo.UpdateState">
            <summary>
            Updates the state on control Property.
            </summary>
        </member>
        <member name="M:Csla.Xaml.PropertyInfo.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">Name of the changed property.</param>
        </member>
        <member name="P:Csla.Xaml.PropertyInfo.BrokenRules">
            <summary>
            Gets the broken rules collection from the
            business object.
            </summary>
        </member>
        <member name="P:Csla.Xaml.PropertyInfo.Property">
            <summary>
            Gets or sets the source business
            property to which this control is bound.
            </summary>
        </member>
        <member name="P:Csla.Xaml.PropertyInfo.Source">
            <summary>
            Gets or sets the Source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Csla.Xaml.PropertyInfo.BindingPath">
            <summary>
            Gets or sets the binding path.
            </summary>
            <value>The binding path.</value>
        </member>
        <member name="P:Csla.Xaml.PropertyInfo.CanRead">
            <summary>
            Gets a value indicating whether the user
            is authorized to read the property.
            </summary>
        </member>
        <member name="P:Csla.Xaml.PropertyInfo.CanWrite">
            <summary>
            Gets a value indicating whether the user
            is authorized to write the property.
            </summary>
        </member>
        <member name="P:Csla.Xaml.PropertyInfo.IsBusy">
            <summary>
            Gets a value indicating whether the property
            is busy with an asynchronous operation.
            </summary>
        </member>
        <member name="P:Csla.Xaml.PropertyInfo.IsValid">
            <summary>
            Gets a value indicating whether the 
            property is valid.
            </summary>
        </member>
        <member name="P:Csla.Xaml.PropertyInfo.RuleSeverity">
            <summary>
            Gets a valud indicating the worst
            severity of all broken rules
            for this property (if IsValid is
            false).
            </summary>
        </member>
        <member name="P:Csla.Xaml.PropertyInfo.RuleDescription">
            <summary>
            Gets the description of the most severe
            broken rule for this property.
            </summary>
        </member>
        <member name="E:Csla.Xaml.PropertyInfo.PropertyChanged">
            <summary>
            Event raised when a property has changed.
            </summary>
        </member>
        <member name="T:Csla.Xaml.PropertyStatus">
            <summary>
            Displays validation information for a business
            object property, and manipulates an associated
            UI control based on the business object's
            authorization rules.
            </summary>
        </member>
        <member name="M:Csla.Xaml.PropertyStatus.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Xaml.PropertyStatus.OnApplyTemplate">
            <summary>
            Applies the visual template.
            </summary>
        </member>
        <member name="F:Csla.Xaml.PropertyStatus.PropertyProperty">
            <summary>
            Gets or sets the source business
            property to which this control is bound.
            </summary>
        </member>
        <member name="M:Csla.Xaml.PropertyStatus.SetSource(System.Boolean)">
            <summary>
            Sets the source binding and updates status.
            </summary>
        </member>
        <member name="M:Csla.Xaml.PropertyStatus.SetSource(System.Object)">
            <summary>
            Sets the source binding and updates status.
            </summary>
        </member>
        <member name="M:Csla.Xaml.PropertyStatus.SetBindingValues">
            <summary>
            Sets the binding values for this instance.
            </summary>
        </member>
        <member name="M:Csla.Xaml.PropertyStatus.GetRealSource(System.Object,System.String)">
            <summary>
            Gets the real source helper method.
            </summary>
            <param name="source">The source.</param>
            <param name="bindingPath">The binding path.</param>
            <returns></returns>
        </member>
        <member name="F:Csla.Xaml.PropertyStatus.BrokenRulesProperty">
            <summary>
            Gets the broken rules collection from the
            business object.
            </summary>
        </member>
        <member name="M:Csla.Xaml.PropertyStatus.UpdateState">
            <summary>
            Updates the state on control Property.
            </summary>
        </member>
        <member name="F:Csla.Xaml.PropertyStatus._lastState">
            <summary>
            Contains tha last status on this control
            </summary>
        </member>
        <member name="M:Csla.Xaml.PropertyStatus.ClearState">
            <summary>
            Clears the state.
            Must be called whenever the DataContext is updated (and new object is selected).
            </summary>
        </member>
        <member name="M:Csla.Xaml.PropertyStatus.GoToState(System.Boolean)">
            <summary>
            Updates the status of the Property in UI
            </summary>
            <param name="useTransitions">if set to <c>true</c> then use transitions.</param>
        </member>
        <member name="M:Csla.Xaml.PropertyStatus.FindChild(System.Windows.DependencyObject,System.String)">
            <summary>
            Find child dependency property.
            </summary>
            <param name="parent">The parent.</param>
            <param name="name">The name.</param>
            <returns>DependencyObject child</returns>
        </member>
        <member name="M:Csla.Xaml.PropertyStatus.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">Name of the changed property.</param>
        </member>
        <member name="P:Csla.Xaml.PropertyStatus.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this DependencyProperty field is read only.
            </summary>
            <value>
            <c>true</c> if this DependencyProperty is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Csla.Xaml.PropertyStatus.Property">
            <summary>
            Gets or sets the source business
            property to which this control is bound.
            </summary>
        </member>
        <member name="P:Csla.Xaml.PropertyStatus.Source">
            <summary>
            Gets or sets the Source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Csla.Xaml.PropertyStatus.BindingPath">
            <summary>
            Gets or sets the binding path.
            </summary>
            <value>The binding path.</value>
        </member>
        <member name="P:Csla.Xaml.PropertyStatus.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="P:Csla.Xaml.PropertyStatus.BrokenRules">
            <summary>
            Gets the broken rules collection from the
            business object.
            </summary>
        </member>
        <member name="P:Csla.Xaml.PropertyStatus.CanRead">
            <summary>
            Gets a value indicating whether the user
            is authorized to read the property.
            </summary>
        </member>
        <member name="P:Csla.Xaml.PropertyStatus.CanWrite">
            <summary>
            Gets a value indicating whether the user
            is authorized to write the property.
            </summary>
        </member>
        <member name="P:Csla.Xaml.PropertyStatus.IsBusy">
            <summary>
            Gets a value indicating whether the property
            is busy with an asynchronous operation.
            </summary>
        </member>
        <member name="P:Csla.Xaml.PropertyStatus.IsValid">
            <summary>
            Gets a value indicating whether the
            property is valid.
            </summary>
        </member>
        <member name="P:Csla.Xaml.PropertyStatus.RuleSeverity">
            <summary>
            Gets a valud indicating the worst
            severity of all broken rules
            for this property (if IsValid is
            false).
            </summary>
        </member>
        <member name="P:Csla.Xaml.PropertyStatus.RuleDescription">
            <summary>
            Gets the description of the most severe
            broken rule for this property.
            </summary>
        </member>
        <member name="E:Csla.Xaml.PropertyStatus.PropertyChanged">
            <summary>
            Event raised when a property has changed.
            </summary>
        </member>
        <member name="T:Csla.Xaml.TriggerAction">
            <summary>
            Control used to invoke a method on the DataContext
            based on an event being raised by a UI control.
            </summary>
        </member>
        <member name="M:Csla.Xaml.TriggerAction.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Xaml.TriggerAction.CallMethod(System.Object,System.EventArgs)">
            <summary>
            Invokes target method.
            </summary>
        </member>
        <member name="F:Csla.Xaml.TriggerAction.TargetControlProperty">
            <summary>
            Gets or sets the target UI control.
            </summary>
        </member>
        <member name="F:Csla.Xaml.TriggerAction.TriggerEventProperty">
            <summary>
            Gets or sets the name of the event
            that will trigger the action.
            </summary>
        </member>
        <member name="F:Csla.Xaml.TriggerAction.MethodNameProperty">
            <summary>
            Gets or sets the name of the method
            to be invoked.
            </summary>
        </member>
        <member name="F:Csla.Xaml.TriggerAction.MethodParameterProperty">
            <summary>
            Gets or sets the value of a parameter to
            be passed to the invoked method.
            </summary>
        </member>
        <member name="F:Csla.Xaml.TriggerAction.RebindParameterDynamicallyProperty">
            <summary>
            Gets or sets a value indicating whether the
            MethodParameter value should be dynamically rebound
            before invoking the target method.
            </summary>
        </member>
        <member name="P:Csla.Xaml.TriggerAction.TargetControl">
            <summary>
            Gets or sets the target UI control.
            </summary>
        </member>
        <member name="P:Csla.Xaml.TriggerAction.TriggerEvent">
            <summary>
            Gets or sets the name of the event
            that will trigger the action.
            </summary>
        </member>
        <member name="P:Csla.Xaml.TriggerAction.MethodName">
            <summary>
            Gets or sets the name of the method
            to be invoked.
            </summary>
        </member>
        <member name="P:Csla.Xaml.TriggerAction.MethodParameter">
            <summary>
            Gets or sets the value of a parameter to
            be passed to the invoked method.
            </summary>
        </member>
        <member name="P:Csla.Xaml.TriggerAction.RebindParameterDynamically">
            <summary>
            Gets or sets a value indicating whether the
            MethodParameter value should be dynamically rebound
            before invoking the target method.
            </summary>
        </member>
    </members>
</doc>
