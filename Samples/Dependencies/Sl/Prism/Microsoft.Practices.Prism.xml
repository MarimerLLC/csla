<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.Prism</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.Prism.Bootstrapper">
            <summary>
            Base class that provides a basic bootstrapping sequence and hooks
            that specific implementations can override
            </summary>
            <remarks>
            This class must be overriden to provide application specific configuration.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Bootstrapper.CreateLogger">
            <summary>
            Create the <see cref="T:Microsoft.Practices.Prism.Logging.ILoggerFacade"/> used by the bootstrapper.
            </summary>
            <remarks>
            The base implementation returns a new TextLogger.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Bootstrapper.Run">
            <summary>
            Runs the bootstrapper process.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Bootstrapper.CreateModuleCatalog">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.Prism.Modularity.IModuleCatalog"/> used by Prism.
            </summary>
             <remarks>
            The base implementation returns a new ModuleCatalog.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Bootstrapper.ConfigureModuleCatalog">
            <summary>
            Configures the <see cref="T:Microsoft.Practices.Prism.Modularity.IModuleCatalog"/> used by Prism.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Bootstrapper.RegisterFrameworkExceptionTypes">
            <summary>
            Registers the <see cref="T:System.Type"/>s of the Exceptions that are not considered 
            root exceptions by the <see cref="T:Microsoft.Practices.Prism.ExceptionExtensions"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Bootstrapper.InitializeModules">
            <summary>
            Initializes the modules. May be overwritten in a derived class to use a custom Modules Catalog
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Bootstrapper.ConfigureRegionAdapterMappings">
            <summary>
            Configures the default region adapter mappings to use in the application, in order
            to adapt UI controls defined in XAML to use a region and register it automatically.
            May be overwritten in a derived class to add specific mappings required by the application.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.Prism.Regions.RegionAdapterMappings"/> instance containing all the mappings.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Bootstrapper.ConfigureDefaultRegionBehaviors">
            <summary>
            Configures the <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehaviorFactory"/>. 
            This will be the list of default behaviors that will be added to a region. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Bootstrapper.InitializeShell">
            <summary>
            Initializes the shell.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Bootstrapper.Run(System.Boolean)">
            <summary>
            Run the bootstrapper process.
            </summary>
            <param name="runWithDefaultConfiguration">If <see langword="true"/>, registers default 
            Composite Application Library services in the container. This is the default behavior.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Bootstrapper.CreateShell">
            <summary>
            Creates the shell or main window of the application.
            </summary>
            <returns>The shell of the application.</returns>
            <remarks>
            If the returned instance is a <see cref="T:System.Windows.DependencyObject"/>, the
            <see cref="T:Microsoft.Practices.Prism.Bootstrapper"/> will attach the default <seealso cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> of
            the application in its <see cref="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionManagerProperty"/> attached property
            in order to be able to add regions by using the <seealso cref="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionNameProperty"/>
            attached property from XAML.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Bootstrapper.ConfigureServiceLocator">
            <summary>
            Configures the LocatorProvider for the <see cref="T:Microsoft.Practices.ServiceLocation.ServiceLocator"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Bootstrapper.Logger">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.Prism.Logging.ILoggerFacade"/> for the application.
            </summary>
            <value>A <see cref="T:Microsoft.Practices.Prism.Logging.ILoggerFacade"/> instance.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Bootstrapper.ModuleCatalog">
            <summary>
            Gets the default <see cref="T:Microsoft.Practices.Prism.Modularity.IModuleCatalog"/> for the application.
            </summary>
            <value>The default <see cref="T:Microsoft.Practices.Prism.Modularity.IModuleCatalog"/> instance.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Bootstrapper.Shell">
            <summary>
            Gets the shell user interface
            </summary>
            <value>The shell user interface.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.CollectionExtensions">
            <summary>
            Class that provides extension methods to Collection
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.CollectionExtensions.AddRange``1(System.Collections.ObjectModel.Collection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a range of items to a collection.
            </summary>
            <typeparam name="T">Type of objects within the collection.</typeparam>
            <param name="collection">The collection to add items to.</param>
            <param name="items">The items to add to the collection.</param>
            <returns>The collection.</returns>
            <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException"/> is thrown if <paramref name="collection"/> or <paramref name="items"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Microsoft.Practices.Prism.Commands.ButtonBaseClickCommandBehavior">
            <summary>
            Behavior that allows controls that derrive from <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/> to hook up with <see cref="T:System.Windows.Input.ICommand"/> objects. 
            </summary>
            <remarks>
            This Behavior is required in Silverlight, because Silverlight does not have Commanding support.  
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.Prism.Commands.CommandBehaviorBase`1">
            <summary>
            Base behavior to handle connecting a <see cref="T:System.Windows.Controls.Control"/> to a Command.
            </summary>
            <typeparam name="T">The target object must derive from Control</typeparam>
            <remarks>
            CommandBehaviorBase can be used to provide new behaviors similar to <see cref="T:Microsoft.Practices.Prism.Commands.ButtonBaseClickCommandBehavior"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.CommandBehaviorBase`1.#ctor(`0)">
            <summary>
            Constructor specifying the target object.
            </summary>
            <param name="targetObject">The target object the behavior is attached to.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.CommandBehaviorBase`1.UpdateEnabledState">
            <summary>
            Updates the target object's IsEnabled property based on the commands ability to execute.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.CommandBehaviorBase`1.ExecuteCommand">
            <summary>
            Executes the command, if it's set, providing the <see cref="P:Microsoft.Practices.Prism.Commands.CommandBehaviorBase`1.CommandParameter"/>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Commands.CommandBehaviorBase`1.Command">
            <summary>
            Corresponding command to be execute and monitored for <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Commands.CommandBehaviorBase`1.CommandParameter">
            <summary>
            The parameter to supply the command during execution
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Commands.CommandBehaviorBase`1.TargetObject">
            <summary>
            Object to which this behavior is attached.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.ButtonBaseClickCommandBehavior.#ctor(System.Windows.Controls.Primitives.ButtonBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Commands.ButtonBaseClickCommandBehavior"/> class and hooks up the Click event of 
            <paramref name="clickableObject"/> to the ExecuteCommand() method. 
            </summary>
            <param name="clickableObject">The clickable object.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Commands.Click">
            <summary>
            Static Class that holds all Dependency Properties and Static methods to allow 
            the Click event of the ButtonBase class to be attached to a Command. 
            </summary>
            <remarks>
            This class is required, because Silverlight doesn't have native support for Commands. 
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.Prism.Commands.Click.CommandProperty">
            <summary>
            Command to execute on click event.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Commands.Click.CommandParameterProperty">
            <summary>
            Command parameter to supply on command execution.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.Click.SetCommand(System.Windows.Controls.Primitives.ButtonBase,System.Windows.Input.ICommand)">
            <summary>
            Sets the <see cref="T:System.Windows.Input.ICommand"/> to execute on the click event.
            </summary>
            <param name="buttonBase">ButtonBase dependency object to attach command</param>
            <param name="command">Command to attach</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.Click.GetCommand(System.Windows.Controls.Primitives.ButtonBase)">
            <summary>
            Retrieves the <see cref="T:System.Windows.Input.ICommand"/> attached to the <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>.
            </summary>
            <param name="buttonBase">ButtonBase containing the Command dependency property</param>
            <returns>The value of the command attached</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.Click.SetCommandParameter(System.Windows.Controls.Primitives.ButtonBase,System.Object)">
            <summary>
            Sets the value for the CommandParameter attached property on the provided <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>.
            </summary>
            <param name="buttonBase">ButtonBase to attach CommandParameter</param>
            <param name="parameter">Parameter value to attach</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.Click.GetCommandParameter(System.Windows.Controls.Primitives.ButtonBase)">
            <summary>
            Gets the value in CommandParameter attached property on the provided <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>
            </summary>
            <param name="buttonBase">ButtonBase that has the CommandParameter</param>
            <returns>The value of the property</returns>
        </member>
        <member name="T:Microsoft.Practices.Prism.Commands.CompositeCommand">
            <summary>
            The CompositeCommand composes one or more ICommands.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.CompositeCommand.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Commands.CompositeCommand"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.CompositeCommand.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Commands.CompositeCommand"/>.
            </summary>
            <param name="monitorCommandActivity">Indicates when the command activity is going to be monitored.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.CompositeCommand.RegisterCommand(System.Windows.Input.ICommand)">
            <summary>
            Adds a command to the collection and signs up for the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event of it.
            </summary>
             <remarks>
            If this command is set to monitor command activity, and <paramref name="command"/> 
            implements the <see cref="T:Microsoft.Practices.Prism.IActiveAware"/> interface, this method will subscribe to its
            <see cref="E:Microsoft.Practices.Prism.IActiveAware.IsActiveChanged"/> event.
            </remarks>
            <param name="command">The command to register.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.CompositeCommand.UnregisterCommand(System.Windows.Input.ICommand)">
            <summary>
            Removes a command from the collection and removes itself from the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> event of it.
            </summary>
            <param name="command">The command to unregister.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.CompositeCommand.CanExecute(System.Object)">
            <summary>
            Forwards <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> to the registered commands and returns
            <see langword="true"/> if all of the commands return <see langword="true"/>.
            </summary>
            <param name="parameter">Data used by the command.
            If the command does not require data to be passed, this object can be set to <see langword="null"/>.
            </param>
            <returns><see langword="true"/> if all of the commands return <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.CompositeCommand.Execute(System.Object)">
            <summary>
            Forwards <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> to the registered commands.
            </summary>
            <param name="parameter">Data used by the command.
            If the command does not require data to be passed, this object can be set to <see langword="null"/>.
            </param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.CompositeCommand.ShouldExecute(System.Windows.Input.ICommand)">
            <summary>
            Evaluates if a command should execute.
            </summary>
            <param name="command">The command to evaluate.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating whether the command should be used 
            when evaluating <see cref="M:Microsoft.Practices.Prism.Commands.CompositeCommand.CanExecute(System.Object)"/> and <see cref="M:Microsoft.Practices.Prism.Commands.CompositeCommand.Execute(System.Object)"/>.</returns>
            <remarks>
            If this command is set to monitor command activity, and <paramref name="command"/>
            implements the <see cref="T:Microsoft.Practices.Prism.IActiveAware"/> interface, 
            this method will return <see langword="false"/> if the command's <see cref="P:Microsoft.Practices.Prism.IActiveAware.IsActive"/> 
            property is <see langword="false"/>; otherwise it always returns <see langword="true"/>.</remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.CompositeCommand.OnCanExecuteChanged">
            <summary>
            Raises <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> on the UI thread so every 
            command invoker can requery <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> to check if the
            <see cref="T:Microsoft.Practices.Prism.Commands.CompositeCommand"/> can execute.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.CompositeCommand.Command_IsActiveChanged(System.Object,System.EventArgs)">
            <summary>
            Handler for IsActiveChanged events of registered commands.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">EventArgs to pass to the event.</param>
        </member>
        <member name="E:Microsoft.Practices.Prism.Commands.CompositeCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Commands.CompositeCommand.RegisteredCommands">
            <summary>
            Gets the list of all the registered commands.
            </summary>
            <value>A list of registered commands.</value>
            <remarks>This returns a copy of the commands subscribed to the CompositeCommand.</remarks>
        </member>
        <member name="T:Microsoft.Practices.Prism.Commands.DelegateCommand`1">
            <summary>
            An <see cref="T:System.Windows.Input.ICommand"/> whose delegates can be attached for <see cref="M:Microsoft.Practices.Prism.Commands.DelegateCommand`1.Execute(`0)"/> and <see cref="M:Microsoft.Practices.Prism.Commands.DelegateCommand`1.CanExecute(`0)"/>.
            It also implements the <see cref="T:Microsoft.Practices.Prism.IActiveAware"/> interface, which is useful when registering this command in a <see cref="T:Microsoft.Practices.Prism.Commands.CompositeCommand"/> that monitors command's activity.
            </summary>
            <typeparam name="T">Parameter type.</typeparam>
            <remarks>
            The constructor deliberately prevent the use of value types.
            Because ICommand takes an object, having a value type for T would cause unexpected behavior when CanExecute(null) is called during XAML initialization for command bindings.
            Using default(T) was considered and rejected as a solution because the implementor would not be able to distinguish between a valid and defaulted values.
            <para/>
            Instead, callers should support a value type by using a nullable value type and checking the HasValue property before using the Value property.
            <example>
                <code>
            public MyClass()
            {
                this.submitCommand = new DelegateCommand&lt;int?&gt;(this.Submit, this.CanSubmit);
            }
            
            private bool CanSubmit(int? customerId)
            {
                return (customerId.HasValue &amp;&amp; customers.Contains(customerId.Value));
            }
                </code>
            </example>
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.Prism.Commands.DelegateCommandBase">
            <summary>
            An <see cref="T:System.Windows.Input.ICommand"/> whose delegates can be attached for <see cref="M:Microsoft.Practices.Prism.Commands.DelegateCommandBase.Execute(System.Object)"/> and <see cref="M:Microsoft.Practices.Prism.Commands.DelegateCommandBase.CanExecute(System.Object)"/>.
            It also implements the <see cref="T:Microsoft.Practices.Prism.IActiveAware"/> interface, which is
            useful when registering this command in a <see cref="T:Microsoft.Practices.Prism.Commands.CompositeCommand"/>
            that monitors command's activity.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.IActiveAware">
            <summary>
            Interface that defines if the object instance is active
            and notifies when the activity changes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.IActiveAware.IsActive">
            <summary>
            Gets or sets a value indicating whether the object is active.
            </summary>
            <value><see langword="true" /> if the object is active; otherwise <see langword="false" />.</value>
        </member>
        <member name="E:Microsoft.Practices.Prism.IActiveAware.IsActiveChanged">
            <summary>
            Notifies that the value for <see cref="P:Microsoft.Practices.Prism.IActiveAware.IsActive"/> property has changed.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.DelegateCommandBase.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Createse a new instance of a <see cref="T:Microsoft.Practices.Prism.Commands.DelegateCommandBase"/>, specifying both the execute action and the can execute function.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Action"/> to execute when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> is invoked.</param>
            <param name="canExecuteMethod">The <see cref="T:System.Func`2"/> to invoked when <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> is invoked.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.DelegateCommandBase.OnCanExecuteChanged">
            <summary>
            Raises <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> on the UI thread so every 
            command invoker can requery <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> to check if the
            <see cref="T:Microsoft.Practices.Prism.Commands.CompositeCommand"/> can execute.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.DelegateCommandBase.RaiseCanExecuteChanged">
            <summary>
            Raises <see cref="E:Microsoft.Practices.Prism.Commands.DelegateCommandBase.CanExecuteChanged"/> on the UI thread so every command invoker
            can requery to check if the command can execute.
            <remarks>Note that this will trigger the execution of <see cref="M:Microsoft.Practices.Prism.Commands.DelegateCommandBase.CanExecute(System.Object)"/> once for each invoker.</remarks>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.DelegateCommandBase.OnIsActiveChanged">
            <summary>
            This raises the <see cref="E:Microsoft.Practices.Prism.Commands.DelegateCommandBase.IsActiveChanged"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.DelegateCommandBase.Execute(System.Object)">
            <summary>
            Executes the command with the provided parameter by invoking the <see cref="T:System.Action`1"/> supplied during construction.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.DelegateCommandBase.CanExecute(System.Object)">
            <summary>
            Determines if the command can execute with the provided parameter by invoing the <see cref="T:System.Func`2"/> supplied during construction.
            </summary>
            <param name="parameter">The parameter to use when determining if this command can execute.</param>
            <returns>Returns <see langword="true"/> if the command can execute.  <see langword="False"/> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.Commands.DelegateCommandBase.IsActive">
            <summary>
            Gets or sets a value indicating whether the object is active.
            </summary>
            <value><see langword="true" /> if the object is active; otherwise <see langword="false" />.</value>
        </member>
        <member name="E:Microsoft.Practices.Prism.Commands.DelegateCommandBase.IsActiveChanged">
            <summary>
            Fired if the <see cref="P:Microsoft.Practices.Prism.Commands.DelegateCommandBase.IsActive"/> property changes.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.Prism.Commands.DelegateCommandBase.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Commands.DelegateCommand`1"/>.
            </summary>
            <param name="executeMethod">Delegate to execute when Execute is called on the command.  This can be null to just hook up a CanExecute delegate.</param>
            <remarks><seealso cref="M:Microsoft.Practices.Prism.Commands.DelegateCommand`1.CanExecute(`0)"/> will always return true.</remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Commands.DelegateCommand`1"/>.
            </summary>
            <param name="executeMethod">Delegate to execute when Execute is called on the command.  This can be null to just hook up a CanExecute delegate.</param>
            <param name="canExecuteMethod">Delegate to execute when CanExecute is called on the command.  This can be null.</param>
            <exception cref="T:System.ArgumentNullException">When both <paramref name="executeMethod"/> and <paramref name="canExecuteMethod"/> ar <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.DelegateCommand`1.CanExecute(`0)">
            <summary>
            Determines if the command can execute by invoked the <see cref="T:System.Func`2"/> provided during construction.
            </summary>
            <param name="parameter">Data used by the command to determine if it can execute.</param>
            <returns>
            <see langword="true"/> if this command can be executed; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.DelegateCommand`1.Execute(`0)">
            <summary>
            Executes the command and invokes the <see cref="T:System.Action`1"/> provided during construction.
            </summary>
            <param name="parameter">Data used by the command.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Commands.DelegateCommand">
            <summary>
            An <see cref="T:System.Windows.Input.ICommand"/> whose delegates do not take any parameters for <see cref="M:Microsoft.Practices.Prism.Commands.DelegateCommand.Execute"/> and <see cref="M:Microsoft.Practices.Prism.Commands.DelegateCommand.CanExecute"/>.
            </summary>
            <seealso cref="T:Microsoft.Practices.Prism.Commands.DelegateCommandBase"/>
            <seealso cref="T:Microsoft.Practices.Prism.Commands.DelegateCommand`1"/>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.DelegateCommand.#ctor(System.Action)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.Prism.Commands.DelegateCommand"/> with the <see cref="T:System.Action"/> to invoke on execution.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Action"/> to invoke when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> is called.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.Prism.Commands.DelegateCommand"/> with the <see cref="T:System.Action"/> to invoke on execution
            and a <see langword="Func"/> to query for determining if the command can execute.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Action"/> to invoke when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> is called.</param>
            <param name="canExecuteMethod">The <see cref="T:System.Func`1"/> to invoke when <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> is called</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.DelegateCommand.Execute">
            <summary>
             Executes the command.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Commands.DelegateCommand.CanExecute">
            <summary>
            Determines if the command can be executed.
            </summary>
            <returns>Returns <see langword="true"/> if the command can execute,otherwise returns <see langword="false"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Prism.Events.BackgroundEventSubscription`1">
            <summary>
            Extends <see cref="T:Microsoft.Practices.Prism.Events.EventSubscription`1"/> to invoke the <see cref="P:Microsoft.Practices.Prism.Events.EventSubscription`1.Action"/> delegate in a background thread.
            </summary>
            <typeparam name="TPayload">The type to use for the generic <see cref="T:System.Action`1"/> and <see cref="T:System.Predicate`1"/> types.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.Prism.Events.EventSubscription`1">
            <summary>
            Provides a way to retrieve a <see cref="T:System.Delegate"/> to execute an action depending
            on the value of a second filter predicate that returns true if the action should execute.
            </summary>
            <typeparam name="TPayload">The type to use for the generic <see cref="T:System.Action`1"/> and <see cref="T:System.Predicate`1"/> types.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.Prism.Events.IEventSubscription">
            <summary>
             Defines a contract for an event subscription to be used by <see cref="T:Microsoft.Practices.Prism.Events.EventBase"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.IEventSubscription.GetExecutionStrategy">
            <summary>
            Gets the execution strategy to publish this event.
            </summary>
            <returns>An <see cref="T:System.Action`1"/> with the execution strategy, or <see langword="null"/> if the <see cref="T:Microsoft.Practices.Prism.Events.IEventSubscription"/> is no longer valid.</returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.Events.IEventSubscription.SubscriptionToken">
            <summary>
            Gets or sets a <see cref="T:Microsoft.Practices.Prism.Events.SubscriptionToken"/> that identifies this <see cref="T:Microsoft.Practices.Prism.Events.IEventSubscription"/>.
            </summary>
            <value>A token that identifies this <see cref="T:Microsoft.Practices.Prism.Events.IEventSubscription"/>.</value>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.EventSubscription`1.#ctor(Microsoft.Practices.Prism.Events.IDelegateReference,Microsoft.Practices.Prism.Events.IDelegateReference)">
            <summary>
             Creates a new instance of <see cref="T:Microsoft.Practices.Prism.Events.EventSubscription`1"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">A reference to a delegate of type <see cref="T:System.Predicate`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>,
            or the target of <paramref name="filterReference"/> is not of type <see cref="T:System.Predicate`1"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.EventSubscription`1.GetExecutionStrategy">
            <summary>
            Gets the execution strategy to publish this event.
            </summary>
            <returns>An <see cref="T:System.Action`1"/> with the execution strategy, or <see langword="null"/> if the <see cref="T:Microsoft.Practices.Prism.Events.IEventSubscription"/> is no longer valid.</returns>
            <remarks>
            If <see cref="P:Microsoft.Practices.Prism.Events.EventSubscription`1.Action"/> or <see cref="P:Microsoft.Practices.Prism.Events.EventSubscription`1.Filter"/> are no longer valid because they were
            garbage collected, this method will return <see langword="null"/>.
            Otherwise it will return a delegate that evaluates the <see cref="P:Microsoft.Practices.Prism.Events.EventSubscription`1.Filter"/> and if it
            returns <see langword="true"/> will then call <see cref="M:Microsoft.Practices.Prism.Events.EventSubscription`1.InvokeAction(System.Action{`0},`0)"/>. The returned
            delegate holds hard references to the <see cref="P:Microsoft.Practices.Prism.Events.EventSubscription`1.Action"/> and <see cref="P:Microsoft.Practices.Prism.Events.EventSubscription`1.Filter"/> target
            <see cref="T:System.Delegate">delegates</see>. As long as the returned delegate is not garbage collected,
            the <see cref="P:Microsoft.Practices.Prism.Events.EventSubscription`1.Action"/> and <see cref="P:Microsoft.Practices.Prism.Events.EventSubscription`1.Filter"/> references delegates won't get collected either.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.EventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> synchronously when not overriden.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="argument">The payload to pass <paramref name="action"/> while invoking it.</param>
            <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException"/> is thrown if <paramref name="action"/> is null.</exception>
        </member>
        <member name="P:Microsoft.Practices.Prism.Events.EventSubscription`1.Action">
            <summary>
            Gets the target <see cref="T:System.Action`1"/> that is referenced by the <see cref="T:Microsoft.Practices.Prism.Events.IDelegateReference"/>.
            </summary>
            <value>An <see cref="T:System.Action`1"/> or <see langword="null"/> if the referenced target is not alive.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Events.EventSubscription`1.Filter">
            <summary>
            Gets the target <see cref="T:System.Predicate`1"/> that is referenced by the <see cref="T:Microsoft.Practices.Prism.Events.IDelegateReference"/>.
            </summary>
            <value>An <see cref="T:System.Predicate`1"/> or <see langword="null"/> if the referenced target is not alive.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Events.EventSubscription`1.SubscriptionToken">
            <summary>
            Gets or sets a <see cref="T:Microsoft.Practices.Prism.Events.SubscriptionToken"/> that identifies this <see cref="T:Microsoft.Practices.Prism.Events.IEventSubscription"/>.
            </summary>
            <value>A token that identifies this <see cref="T:Microsoft.Practices.Prism.Events.IEventSubscription"/>.</value>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.BackgroundEventSubscription`1.#ctor(Microsoft.Practices.Prism.Events.IDelegateReference,Microsoft.Practices.Prism.Events.IDelegateReference)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.Prism.Events.BackgroundEventSubscription`1"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">A reference to a delegate of type <see cref="T:System.Predicate`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>,
            or the target of <paramref name="filterReference"/> is not of type <see cref="T:System.Predicate`1"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.BackgroundEventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> in an asynchronous thread by using a <see cref="T:System.Threading.ThreadPool"/>.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="argument">The payload to pass <paramref name="action"/> while invoking it.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1">
            <summary>
            Defines a class that manages publication and subscription to events.
            </summary>
            <typeparam name="TPayload">The type of message that will be passed to the subscribers.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.Prism.Events.EventBase">
            <summary>
             Defines a base class to publish and subscribe to events.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.EventBase.InternalSubscribe(Microsoft.Practices.Prism.Events.IEventSubscription)">
            <summary>
            Adds the specified <see cref="T:Microsoft.Practices.Prism.Events.IEventSubscription"/> to the subscribers' collection.
            </summary>
            <param name="eventSubscription">The subscriber.</param>
            <returns>The <see cref="T:Microsoft.Practices.Prism.Events.SubscriptionToken"/> that uniquely identifies every subscriber.</returns>
            <remarks>
            Adds the subscription to the internal list and assigns it a new <see cref="T:Microsoft.Practices.Prism.Events.SubscriptionToken"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.EventBase.InternalPublish(System.Object[])">
            <summary>
            Calls all the execution strategies exposed by the list of <see cref="T:Microsoft.Practices.Prism.Events.IEventSubscription"/>.
            </summary>
            <param name="arguments">The arguments that will be passed to the listeners.</param>
            <remarks>Before executing the strategies, this class will prune all the subscribers from the
            list that return a <see langword="null"/> <see cref="T:System.Action`1"/> when calling the
            <see cref="M:Microsoft.Practices.Prism.Events.IEventSubscription.GetExecutionStrategy"/> method.</remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.EventBase.Unsubscribe(Microsoft.Practices.Prism.Events.SubscriptionToken)">
            <summary>
            Removes the subscriber matching the <seealso cref="T:Microsoft.Practices.Prism.Events.SubscriptionToken"/>.
            </summary>
            <param name="token">The <see cref="T:Microsoft.Practices.Prism.Events.SubscriptionToken"/> returned by <see cref="T:Microsoft.Practices.Prism.Events.EventBase"/> while subscribing to the event.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.EventBase.Contains(Microsoft.Practices.Prism.Events.SubscriptionToken)">
            <summary>
            Returns <see langword="true"/> if there is a subscriber matching <see cref="T:Microsoft.Practices.Prism.Events.SubscriptionToken"/>.
            </summary>
            <param name="token">The <see cref="T:Microsoft.Practices.Prism.Events.SubscriptionToken"/> returned by <see cref="T:Microsoft.Practices.Prism.Events.EventBase"/> while subscribing to the event.</param>
            <returns><see langword="true"/> if there is a <see cref="T:Microsoft.Practices.Prism.Events.SubscriptionToken"/> that matches; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.Events.EventBase.Subscriptions">
            <summary>
            Gets the list of current subscriptions.
            </summary>
            <value>The current subscribers.</value>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1.Subscribe(System.Action{`0})">
            <summary>
            Subscribes a delegate to an event that will be published on the <see cref="F:Microsoft.Practices.Prism.Events.ThreadOption.PublisherThread"/>.
            <see cref="T:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1"/> will maintain a <seealso cref="T:System.WeakReference"/> to the target of the supplied <paramref name="action"/> delegate.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <returns>A <see cref="T:Microsoft.Practices.Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            The CompositePresentationEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1.Subscribe(System.Action{`0},Microsoft.Practices.Prism.Events.ThreadOption)">
            <summary>
            Subscribes a delegate to an event.
            CompositePresentationEvent will maintain a <seealso cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            </summary>
            <param name="action">The delegate that gets executed when the event is raised.</param>
            <param name="threadOption">Specifies on which thread to receive the delegate callback.</param>
            <returns>A <see cref="T:Microsoft.Practices.Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            The CompositePresentationEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1.Subscribe(System.Action{`0},System.Boolean)">
            <summary>
            Subscribes a delegate to an event that will be published on the <see cref="F:Microsoft.Practices.Prism.Events.ThreadOption.PublisherThread"/>.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <seealso cref="T:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1"/> keeps a reference to the subscriber so it does not get garbage collected.</param>
            <returns>A <see cref="T:Microsoft.Practices.Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false"/>, <see cref="T:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1"/> will maintain a <seealso cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true"/>), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexepcted behavior.
            <para/>
            The CompositePresentationEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1.Subscribe(System.Action{`0},Microsoft.Practices.Prism.Events.ThreadOption,System.Boolean)">
            <summary>
            Subscribes a delegate to an event.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="threadOption">Specifies on which thread to receive the delegate callback.</param>
            <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <seealso cref="T:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1"/> keeps a reference to the subscriber so it does not get garbage collected.</param>
            <returns>A <see cref="T:Microsoft.Practices.Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false"/>, <see cref="T:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1"/> will maintain a <seealso cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true"/>), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexepcted behavior.
            <para/>
            The CompositePresentationEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1.Subscribe(System.Action{`0},Microsoft.Practices.Prism.Events.ThreadOption,System.Boolean,System.Predicate{`0})">
            <summary>
            Subscribes a delegate to an event.
            </summary>
            <param name="action">The delegate that gets executed when the event is published.</param>
            <param name="threadOption">Specifies on which thread to receive the delegate callback.</param>
            <param name="keepSubscriberReferenceAlive">When <see langword="true"/>, the <seealso cref="T:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1"/> keeps a reference to the subscriber so it does not get garbage collected.</param>
            <param name="filter">Filter to evaluate if the subscriber should receive the event.</param>
            <returns>A <see cref="T:Microsoft.Practices.Prism.Events.SubscriptionToken"/> that uniquely identifies the added subscription.</returns>
            <remarks>
            If <paramref name="keepSubscriberReferenceAlive"/> is set to <see langword="false"/>, <see cref="T:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1"/> will maintain a <seealso cref="T:System.WeakReference"/> to the Target of the supplied <paramref name="action"/> delegate.
            If not using a WeakReference (<paramref name="keepSubscriberReferenceAlive"/> is <see langword="true"/>), the user must explicitly call Unsubscribe for the event when disposing the subscriber in order to avoid memory leaks or unexepcted behavior.
            
            The CompositePresentationEvent collection is thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1.Publish(`0)">
            <summary>
            Publishes the <see cref="T:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1"/>.
            </summary>
            <param name="payload">Message to pass to the subscribers.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1.Unsubscribe(System.Action{`0})">
            <summary>
            Removes the first subscriber matching <seealso cref="T:System.Action`1"/> from the subscribers' list.
            </summary>
            <param name="subscriber">The <see cref="T:System.Action`1"/> used when subscribing to the event.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1.Contains(System.Action{`0})">
            <summary>
            Returns <see langword="true"/> if there is a subscriber matching <seealso cref="T:System.Action`1"/>.
            </summary>
            <param name="subscriber">The <see cref="T:System.Action`1"/> used when subscribing to the event.</param>
            <returns><see langword="true"/> if there is an <seealso cref="T:System.Action`1"/> that matches; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1.UIDispatcher">
            <summary>
            Gets the <see cref="T:System.Windows.Threading.Dispatcher"/> that is bound to the UI elements.
            </summary>
            <value>The <see cref="T:System.Windows.Threading.Dispatcher"/> to use when subscribing using <see cref="F:Microsoft.Practices.Prism.Events.ThreadOption.UIThread"/>.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Events.DataEventArgs`1">
            <summary>
            Generic arguments class to pass to event handlers that need to receive data.
            </summary>
            <typeparam name="TData">The type of data to pass.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.DataEventArgs`1.#ctor(`0)">
            <summary>
            Initializes the DataEventArgs class.
            </summary>
            <param name="value">Information related to the event.</param>
        </member>
        <member name="P:Microsoft.Practices.Prism.Events.DataEventArgs`1.Value">
            <summary>
            Gets the information related to the event.
            </summary>
            <value>Information related to the event.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Events.DelegateReference">
            <summary>
            Represents a reference to a <see cref="T:System.Delegate"/> that may contain a
            <see cref="T:System.WeakReference"/> to the target. This class is used
            internally by the Composite Application Library.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Events.IDelegateReference">
            <summary>
            Represents a reference to a <see cref="T:System.Delegate"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Events.IDelegateReference.Target">
            <summary>
            Gets the referenced <see cref="T:System.Delegate"/> object.
            </summary>
            <value>A <see cref="T:System.Delegate"/> instance if the target is valid; otherwise <see langword="null"/>.</value>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.DelegateReference.#ctor(System.Delegate,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Events.DelegateReference"/>.
            </summary>
            <param name="delegate">The original <see cref="T:System.Delegate"/> to create a reference for.</param>
            <param name="keepReferenceAlive">If <see langword="false"/> the class will create a weak reference to the delegate, allowing it to be garbage collected. Otherwise it will keep a strong reference to the target.</param>
            <exception cref="T:System.ArgumentNullException">If the passed <paramref name="delegate"/> is not assignable to <see cref="T:System.Delegate"/>.</exception>
        </member>
        <member name="P:Microsoft.Practices.Prism.Events.DelegateReference.Target">
            <summary>
            Gets the <see cref="T:System.Delegate"/> (the target) referenced by the current <see cref="T:Microsoft.Practices.Prism.Events.DelegateReference"/> object.
            </summary>
            <value><see langword="null"/> if the object referenced by the current <see cref="T:Microsoft.Practices.Prism.Events.DelegateReference"/> object has been garbage collected; otherwise, a reference to the <see cref="T:System.Delegate"/> referenced by the current <see cref="T:Microsoft.Practices.Prism.Events.DelegateReference"/> object.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Events.DispatcherEventSubscription`1">
            <summary>
             Extends <see cref="T:Microsoft.Practices.Prism.Events.EventSubscription`1"/> to invoke the <see cref="P:Microsoft.Practices.Prism.Events.EventSubscription`1.Action"/> delegate
             in a specific <see cref="T:System.Windows.Threading.Dispatcher"/>.
            </summary>
             <typeparam name="TPayload">The type to use for the generic <see cref="T:System.Action`1"/> and <see cref="T:System.Predicate`1"/> types.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.DispatcherEventSubscription`1.#ctor(Microsoft.Practices.Prism.Events.IDelegateReference,Microsoft.Practices.Prism.Events.IDelegateReference,Microsoft.Practices.Prism.Events.IDispatcherFacade)">
            <summary>
             Creates a new instance of <see cref="T:Microsoft.Practices.Prism.Events.BackgroundEventSubscription`1"/>.
            </summary>
            <param name="actionReference">A reference to a delegate of type <see cref="T:System.Action`1"/>.</param>
            <param name="filterReference">A reference to a delegate of type <see cref="T:System.Predicate`1"/>.</param>
            <param name="dispatcher">The dispatcher to use when executing the <paramref name="actionReference"/> delegate.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="actionReference"/> or <see paramref="filterReference"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">When the target of <paramref name="actionReference"/> is not of type <see cref="T:System.Action`1"/>,
            or the target of <paramref name="filterReference"/> is not of type <see cref="T:System.Predicate`1"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.DispatcherEventSubscription`1.InvokeAction(System.Action{`0},`0)">
            <summary>
            Invokes the specified <see cref="T:System.Action`1"/> asynchronously in the specified <see cref="T:System.Windows.Threading.Dispatcher"/>.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="argument">The payload to pass <paramref name="action"/> while invoking it.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Events.EventAggregator">
            <summary>
            Implements <see cref="T:Microsoft.Practices.Prism.Events.IEventAggregator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Events.IEventAggregator">
            <summary>
            Defines an interface to get instances of an event type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.IEventAggregator.GetEvent``1">
            <summary>
            Gets an instance of an event type.
            </summary>
            <typeparam name="TEventType">The type of event to get.</typeparam>
            <returns>An instance of an event object of type <typeparamref name="TEventType"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.EventAggregator.GetEvent``1">
            <summary>
            Gets the single instance of the event managed by this EventAggregator. Multiple calls to this method with the same <typeparamref name="TEventType"/> returns the same event instance.
            </summary>
            <typeparam name="TEventType">The type of event to get. This must inherit from <see cref="T:Microsoft.Practices.Prism.Events.EventBase"/>.</typeparam>
            <returns>A singleton instance of an event object of type <typeparamref name="TEventType"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Prism.Events.IDispatcherFacade">
            <summary>
            Defines the interface for invoking methods through a Dispatcher Facade
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.IDispatcherFacade.BeginInvoke(System.Delegate,System.Object)">
            <summary>
            Dispatches an invocation to the method received as parameter.
            </summary>
            <param name="method">Method to be invoked.</param>
            <param name="arg">Arguments to pass to the invoked method.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Events.SubscriptionToken">
            <summary>
            Subscription token returned from <see cref="T:Microsoft.Practices.Prism.Events.EventBase"/> on subscribe.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.SubscriptionToken.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Events.SubscriptionToken"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.SubscriptionToken.Equals(Microsoft.Practices.Prism.Events.SubscriptionToken)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <see langword="true"/> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.SubscriptionToken.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.SubscriptionToken.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Microsoft.Practices.Prism.Events.ThreadOption">
            <summary>
            Specifies on which thread a <see cref="T:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1"/> subscriber will be called.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Events.ThreadOption.PublisherThread">
            <summary>
            The call is done on the same thread on which the <see cref="T:Microsoft.Practices.Prism.Events.CompositePresentationEvent`1"/> was published.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Events.ThreadOption.UIThread">
            <summary>
            The call is done on the UI thread.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Events.ThreadOption.BackgroundThread">
            <summary>
            The call is done asynchronously on a background thread.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.ExceptionExtensions">
            <summary>
            Class that provides extension methods for the Exception class. These extension methods provide
            a mechanism for developers to get more easily to the root cause of an exception, especially in combination with 
            DI-containers such as Unity. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.ExceptionExtensions.RegisterFrameworkExceptionType(System.Type)">
            <summary>
            Register the type of an Exception that is thrown by the framework. The <see cref="M:Microsoft.Practices.Prism.ExceptionExtensions.GetRootException(System.Exception)"/> method uses
            this list of Exception types to find out if something has gone wrong.  
            </summary>
            <param name="frameworkExceptionType">The type of exception to register.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.ExceptionExtensions.IsFrameworkExceptionRegistered(System.Type)">
            <summary>
            Determines whether the exception type is already registered using the <see cref="M:Microsoft.Practices.Prism.ExceptionExtensions.RegisterFrameworkExceptionType(System.Type)"/> 
            method
            </summary>
            <param name="frameworkExceptionType">The type of framework exception to find.</param>
            <returns>
            	<c>true</c> if the exception type is already registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.ExceptionExtensions.GetRootException(System.Exception)">
            <summary>
            Looks at all the inner exceptions of the <paramref name="exception"/> parameter to find the 
            most likely root cause of the exception. This works by skipping all registered exception types.
            </summary>
            <remarks>
            This method is not 100% accurate and should only be used to point a developer into the most likely direction.
            It should not be used to replace the Inner Exception stack of an exception, because this might hide required exception
            information. 
            </remarks>
            <param name="exception">The exception that will provide the list of inner exeptions to examine.</param>
            <returns>
            The exception that most likely caused the exception to occur. If it can't find the root exception, it will return the 
            <paramref name="exception"/> value itself.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.Prism.ListDictionary`2">
            <summary>
            A dictionary of lists.
            </summary>
            <typeparam name="TKey">The key to use for lists.</typeparam>
            <typeparam name="TValue">The type of the value held by lists.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Prism.ListDictionary`2.Add(`0)">
            <summary>
            If a list does not already exist, it will be created automatically.
            </summary>
            <param name="key">The key of the list that will hold the value.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.ListDictionary`2.Add(`0,`1)">
            <summary>
            Adds a value to a list with the given key. If a list does not already exist, 
            it will be created automatically.
            </summary>
            <param name="key">The key of the list that will hold the value.</param>
            <param name="value">The value to add to the list under the given key.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.ListDictionary`2.Clear">
            <summary>
            Removes all entries in the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.ListDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the dictionary contains the specified value.
            </summary>
            <param name="value">The value to locate.</param>
            <returns>true if the dictionary contains the value in any list; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.ListDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains the given key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>true if the dictionary contains the given key; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.ListDictionary`2.FindAllValuesByKey(System.Predicate{`0})">
            <summary>
            Retrieves the all the elements from the list which have a key that matches the condition 
            defined by the specified predicate.
            </summary>
            <param name="keyFilter">The filter with the condition to use to filter lists by their key.</param>
            <returns>The elements that have a key that matches the condition defined by the specified predicate.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.ListDictionary`2.FindAllValues(System.Predicate{`1})">
            <summary>
            Retrieves all the elements that match the condition defined by the specified predicate.
            </summary>
            <param name="valueFilter">The filter with the condition to use to filter values.</param>
            <returns>The elements that match the condition defined by the specified predicate.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.ListDictionary`2.Remove(`0)">
            <summary>
            Removes a list by key.
            </summary>
            <param name="key">The key of the list to remove.</param>
            <returns><see langword="true" /> if the element was removed.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.ListDictionary`2.Remove(`0,`1)">
            <summary>
            Removes a value from the list with the given key.
            </summary>
            <param name="key">The key of the list where the value exists.</param>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.ListDictionary`2.Remove(`1)">
            <summary>
            Removes a value from all lists where it may be found.
            </summary>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.ListDictionary`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#IList{TValue}}#Add(`0,System.Collections.Generic.IList{`1})">
            <summary>
            See <see cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.ListDictionary`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#IList{TValue}}#TryGetValue(`0,System.Collections.Generic.IList{`1}@)">
            <summary>
            See <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#IList{TValue}}}#Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#IList{TValue}}}#Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#IList{TValue}}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#IList{TValue}}}#Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <summary>
            See <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.ListDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#IList{TValue}}}#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.ListDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.ListDictionary`2.Values">
            <summary>
            Gets a shallow copy of all values in all lists.
            </summary>
            <value>List of values.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.ListDictionary`2.Keys">
            <summary>
            Gets the list of keys in the dictionary.
            </summary>
            <value>Collection of keys.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.ListDictionary`2.Item(`0)">
            <summary>
            Gets or sets the list associated with the given key. The 
            access always succeeds, eventually returning an empty list.
            </summary>
            <param name="key">The key of the list to access.</param>
            <returns>The list associated with the key.</returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.ListDictionary`2.Count">
            <summary>
            Gets the number of lists in the dictionary.
            </summary>
            <value>Value indicating the values count.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.ListDictionary`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#IList{TValue}}#Values">
            <summary>
            See <see cref="P:System.Collections.Generic.IDictionary`2.Values"/> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.ListDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@System#Collections#Generic#IList{TValue}}}#IsReadOnly">
            <summary>
            See <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/> for more information.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Logging.Category">
            <summary>
            Defines values for the categories used by <see cref="T:Microsoft.Practices.Prism.Logging.ILoggerFacade"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Logging.Category.Debug">
            <summary>
            Debug category.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Logging.Category.Exception">
            <summary>
            Exception category.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Logging.Category.Info">
            <summary>
            Informational category.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Logging.Category.Warn">
            <summary>
            Warning category.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Logging.EmptyLogger">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.Prism.Logging.ILoggerFacade"/> that does nothing. This
            implementation is useful when the application does not need logging
            but there are infrastructure pieces that assume there is a logger.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Logging.ILoggerFacade">
            <summary>
            Defines a simple logger façade to be used by the Composite Application Library.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Logging.ILoggerFacade.Log(System.String,Microsoft.Practices.Prism.Logging.Category,Microsoft.Practices.Prism.Logging.Priority)">
            <summary>
            Write a new log entry with the specified category and priority.
            </summary>
            <param name="message">Message body to log.</param>
            <param name="category">Category of the entry.</param>
            <param name="priority">The priority of the entry.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Logging.EmptyLogger.Log(System.String,Microsoft.Practices.Prism.Logging.Category,Microsoft.Practices.Prism.Logging.Priority)">
            <summary>
            This method does nothing.
            </summary>
            <param name="message">Message body to log.</param>
            <param name="category">Category of the entry.</param>
            <param name="priority">The priority of the entry.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Logging.Priority">
            <summary>
            Defines values for the priorities used by <see cref="T:Microsoft.Practices.Prism.Logging.ILoggerFacade"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Logging.Priority.None">
            <summary>
            No priority specified.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Logging.Priority.High">
            <summary>
            High priority entry.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Logging.Priority.Medium">
            <summary>
            Medium priority entry.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Logging.Priority.Low">
            <summary>
            Low priority entry.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Logging.TextLogger">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.Prism.Logging.ILoggerFacade"/> that logs into a <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Logging.TextLogger.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Logging.TextLogger"/> that writes to
            the console output.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Logging.TextLogger.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Logging.TextLogger"/>.
            </summary>
            <param name="writer">The writer to use for writing log entries.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Logging.TextLogger.Log(System.String,Microsoft.Practices.Prism.Logging.Category,Microsoft.Practices.Prism.Logging.Priority)">
            <summary>
            Write a new log entry with the specified category and priority.
            </summary>
            <param name="message">Message body to log.</param>
            <param name="category">Category of the entry.</param>
            <param name="priority">The priority of the entry.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Logging.TextLogger.Dispose(System.Boolean)">
            <summary>
            Disposes the associated <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="disposing">When <see langword="true"/>, disposes the associated <see cref="T:System.IO.TextWriter"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Logging.TextLogger.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
             <remarks>Calls <see cref="M:Microsoft.Practices.Prism.Logging.TextLogger.Dispose(System.Boolean)"/></remarks>.
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.CyclicDependencyFoundException">
            <summary>
            Represents the exception that is thrown when there is a circular dependency
            between modules during the module loading process.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.ModularityException">
            <summary>
            Base class for exceptions that are thrown because of a problem with modules. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModularityException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModularityException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModularityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModularityException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModularityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModularityException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModularityException.#ctor(System.String,System.String)">
            <summary>
            Initializes the exception with a particular module and error message.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModularityException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModularityException.ModuleName">
            <summary>
            Gets or sets the name of the module that this exception refers to.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.CyclicDependencyFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.CyclicDependencyFoundException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.CyclicDependencyFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.CyclicDependencyFoundException"/> class
            with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.CyclicDependencyFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.CyclicDependencyFoundException"/> class
            with the specified error message and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.CyclicDependencyFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.DuplicateModuleException">
            <summary>
            Exception thrown when a module is declared twice in the same catalog.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.DuplicateModuleException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.DuplicateModuleException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.DuplicateModuleException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.DuplicateModuleException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.DuplicateModuleException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.DuplicateModuleException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.DuplicateModuleException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.DuplicateModuleException"/> class with a specified error message.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.DuplicateModuleException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.DuplicateModuleException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.IModule">
            <summary>
            Defines the contract for the modules deployed in the application.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.IModule.Initialize">
            <summary>
            Notifies the module that it has be initialized.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.IModuleCatalog">
            <summary>
            This is the expected catalog definition for the ModuleManager. 
            The ModuleCatalog holds information about the modules that can be used by the 
            application. Each module is described in a ModuleInfo class, that records the 
            name, type and location of the module. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.IModuleCatalog.GetDependentModules(Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Return the list of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s that <paramref name="moduleInfo"/> depends on.
            </summary>
            <param name="moduleInfo">The <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> to get the </param>
            <returns>An enumeration of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> that <paramref name="moduleInfo"/> depends on.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.IModuleCatalog.CompleteListWithDependencies(System.Collections.Generic.IEnumerable{Microsoft.Practices.Prism.Modularity.ModuleInfo})">
            <summary>
            Returns the collection of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s that contain both the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s in 
            <paramref name="modules"/>, but also all the modules they depend on. 
            </summary>
            <param name="modules">The modules to get the dependencies for.</param>
            <returns>
            A collection of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> that contains both all <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s in <paramref name="modules"/>
            and also all the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> they depend on.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.IModuleCatalog.Initialize">
            <summary>
            Initializes the catalog, which may load and validate the modules.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.IModuleCatalog.AddModule(Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Adds a <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> to the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/>.
            </summary>
            <param name="moduleInfo">The <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> to add.</param>
            <returns>The <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> for easily adding multiple modules.</returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.IModuleCatalog.Modules">
            <summary>
            Gets all the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> classes that are in the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.IModuleCatalogItem">
            <summary>
            Marker interface that allows both <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>s and <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s to be
            added to the <see cref="T:Microsoft.Practices.Prism.Modularity.IModuleCatalog"/> from code and XAML. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.IModuleInitializer">
            <summary>
            Declares a service which initializes the modules into the application.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.IModuleInitializer.Initialize(Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Initializes the specified module.
            </summary>
            <param name="moduleInfo">The module to initialize</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.IModuleManager">
            <summary>
            Defines the interface for the service that will retrieve and initialize the application's modules.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.IModuleManager.Run">
            <summary>
            Initializes the modules marked as <see cref="F:Microsoft.Practices.Prism.Modularity.InitializationMode.WhenAvailable"/> on the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.IModuleManager.LoadModule(System.String)">
            <summary>
            Loads and initializes the module on the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> with the name <paramref name="moduleName"/>.
            </summary>
            <param name="moduleName">Name of the module requested for initialization.</param>
        </member>
        <member name="E:Microsoft.Practices.Prism.Modularity.IModuleManager.ModuleDownloadProgressChanged">
            <summary>
            Raised repeatedly to provide progress as modules are downloaded.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.Prism.Modularity.IModuleManager.LoadModuleCompleted">
            <summary>
            Raised when a module is loaded or fails to load.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.IModuleTypeLoader">
            <summary>
            Defines the interface for moduleTypeLoaders
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.IModuleTypeLoader.CanLoadModuleType(Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Evaluates the <see cref="P:Microsoft.Practices.Prism.Modularity.ModuleInfo.Ref"/> property to see if the current typeloader will be able to retrieve the <paramref name="moduleInfo"/>.
            </summary>
            <param name="moduleInfo">Module that should have it's type loaded.</param>
            <returns><see langword="true"/> if the current typeloader is able to retrieve the module, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.IModuleTypeLoader.LoadModuleType(Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Retrieves the <paramref name="moduleInfo"/>.
            </summary>
            <param name="moduleInfo">Module that should have it's type loaded.</param>
        </member>
        <member name="E:Microsoft.Practices.Prism.Modularity.IModuleTypeLoader.ModuleDownloadProgressChanged">
            <summary>
            Raised repeatedly to provide progress as modules are downloaded in the background.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.Prism.Modularity.IModuleTypeLoader.LoadModuleCompleted">
            <summary>
            Raised when a module is loaded or fails to load.
            </summary>
            <remarks>
            This event is raised once per ModuleInfo instance requested in <see cref="M:Microsoft.Practices.Prism.Modularity.IModuleTypeLoader.LoadModuleType(Microsoft.Practices.Prism.Modularity.ModuleInfo)"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.InitializationMode">
            <summary>
            Specifies on which stage the Module group will be initialized.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Modularity.InitializationMode.WhenAvailable">
            <summary>
            The module will be initialized when it is available on application start-up.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Modularity.InitializationMode.OnDemand">
            <summary>
            The module will be initialized when requested, and not automatically on application start-up.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.LoadModuleCompletedEventArgs">
            <summary>
            Provides completion information after a module is loaded, or fails to load.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.LoadModuleCompletedEventArgs.#ctor(Microsoft.Practices.Prism.Modularity.ModuleInfo,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.LoadModuleCompletedEventArgs"/> class.
            </summary>
            <param name="moduleInfo">The module info.</param>
            <param name="error">Any error that occurred during the call.</param>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.LoadModuleCompletedEventArgs.ModuleInfo">
            <summary>
            Gets the module info.
            </summary>
            <value>The module info.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.LoadModuleCompletedEventArgs.Error">
            <summary>
            Gets any error that occurred
            </summary>
            <value>The exception if an error occurred; otherwise null.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.LoadModuleCompletedEventArgs.IsErrorHandled">
            <summary>
            Gets or sets a value indicating whether the error has been handled by the event subscriber.
            </summary>
            <value><c>true</c>if the error is handled; otherwise, <c>false</c>.</value>
            <remarks>
            If there is an error on this event and no event subscriber sets this to true, an exception will be thrown by the event publisher.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog">
            <summary>
            The <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> holds information about the modules that can be used by the 
            application. Each module is described in a <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> class, that records the 
            name, type and location of the module. 
            
            It also verifies that the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> is internally valid. That means that
            it does not have:
            <list>
                <item>Circular dependencies</item>
                <item>Missing dependencies</item>
                <item>
                    Invalid dependencies, such as a Module that's loaded at startup that depends on a module 
                    that might need to be retrieved.
                </item>
            </list>
            The <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> also serves as a baseclass for more specialized Catalogs .
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Practices.Prism.Modularity.ModuleInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> class while providing an 
            initial list of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s.
            </summary>
            <param name="modules">The initial list of modules.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.CreateFromXaml(System.IO.Stream)">
            <summary>
            Creates a <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> from XAML.
            </summary>
            <param name="xamlStream"><see cref="T:System.IO.Stream"/> that contains the XAML declaration of the catalog.</param>
            <returns>An instance of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> built from the XAML.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.CreateFromXaml(System.Uri)">
            <summary>
            Creates a <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> from a XAML included as an Application Resource.
            </summary>
            <param name="builderResourceUri">Relative <see cref="T:System.Uri"/> that identifies the XAML included as an Application Resource.</param>
            <returns>An instance of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> build from the XAML.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.Load">
            <summary>
            Loads the catalog if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.GetDependentModules(Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Return the list of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s that <paramref name="moduleInfo"/> depends on.
            </summary>
            <remarks>
            If  the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> was not yet validated, this method will call <see cref="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.Validate"/>.
            </remarks>
            <param name="moduleInfo">The <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> to get the </param>
            <returns>An enumeration of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> that <paramref name="moduleInfo"/> depends on.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.CompleteListWithDependencies(System.Collections.Generic.IEnumerable{Microsoft.Practices.Prism.Modularity.ModuleInfo})">
            <summary>
            Returns a list of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s that contain both the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s in 
            <paramref name="modules"/>, but also all the modules they depend on. 
            </summary>
            <param name="modules">The modules to get the dependencies for.</param>
            <returns>
            A list of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> that contains both all <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s in <paramref name="modules"/>
            but also all the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> they depend on.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.Validate">
            <summary>
            Validates the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/>.
            </summary>
            <exception cref="T:Microsoft.Practices.Prism.Modularity.ModularityException">When validation of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> fails.</exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.AddModule(Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Adds a <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> to the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/>.
            </summary>
            <param name="moduleInfo">The <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> to add.</param>
            <returns>The <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> for easily adding multiple modules.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.AddModule(System.Type,System.String[])">
            <summary>
            Adds a groupless <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> to the catalog.
            </summary>
            <param name="moduleType"><see cref="T:System.Type"/> of the module to be added.</param>
            <param name="dependsOn">Collection of module names (<see cref="P:Microsoft.Practices.Prism.Modularity.ModuleInfo.ModuleName"/>) of the modules on which the module to be added logically depends on.</param>
            <returns>The same <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> instance with the added module.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.AddModule(System.Type,Microsoft.Practices.Prism.Modularity.InitializationMode,System.String[])">
            <summary>
            Adds a groupless <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> to the catalog.
            </summary>
            <param name="moduleType"><see cref="T:System.Type"/> of the module to be added.</param>
            <param name="initializationMode">Stage on which the module to be added will be initialized.</param>
            <param name="dependsOn">Collection of module names (<see cref="P:Microsoft.Practices.Prism.Modularity.ModuleInfo.ModuleName"/>) of the modules on which the module to be added logically depends on.</param>
            <returns>The same <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> instance with the added module.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.AddModule(System.String,System.String,System.String[])">
            <summary>
            Adds a groupless <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> to the catalog.
            </summary>
            <param name="moduleName">Name of the module to be added.</param>
            <param name="moduleType"><see cref="T:System.Type"/> of the module to be added.</param>
            <param name="dependsOn">Collection of module names (<see cref="P:Microsoft.Practices.Prism.Modularity.ModuleInfo.ModuleName"/>) of the modules on which the module to be added logically depends on.</param>
            <returns>The same <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> instance with the added module.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.AddModule(System.String,System.String,Microsoft.Practices.Prism.Modularity.InitializationMode,System.String[])">
            <summary>
            Adds a groupless <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> to the catalog.
            </summary>
            <param name="moduleName">Name of the module to be added.</param>
            <param name="moduleType"><see cref="T:System.Type"/> of the module to be added.</param>
            <param name="initializationMode">Stage on which the module to be added will be initialized.</param>
            <param name="dependsOn">Collection of module names (<see cref="P:Microsoft.Practices.Prism.Modularity.ModuleInfo.ModuleName"/>) of the modules on which the module to be added logically depends on.</param>
            <returns>The same <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> instance with the added module.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.AddModule(System.String,System.String,System.String,Microsoft.Practices.Prism.Modularity.InitializationMode,System.String[])">
            <summary>
            Adds a groupless <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> to the catalog.
            </summary>
            <param name="moduleName">Name of the module to be added.</param>
            <param name="moduleType"><see cref="T:System.Type"/> of the module to be added.</param>
            <param name="refValue">Reference to the location of the module to be added assembly.</param>
            <param name="initializationMode">Stage on which the module to be added will be initialized.</param>
            <param name="dependsOn">Collection of module names (<see cref="P:Microsoft.Practices.Prism.Modularity.ModuleInfo.ModuleName"/>) of the modules on which the module to be added logically depends on.</param>
            <returns>The same <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> instance with the added module.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.Initialize">
            <summary>
            Initializes the catalog, which may load and validate the modules.
            </summary>
            <exception cref="T:Microsoft.Practices.Prism.Modularity.ModularityException">When validation of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> fails, because this method calls <see cref="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.Validate"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.AddGroup(Microsoft.Practices.Prism.Modularity.InitializationMode,System.String,Microsoft.Practices.Prism.Modularity.ModuleInfo[])">
            <summary>
            Creates and adds a <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/> to the catalog.
            </summary>
            <param name="initializationMode">Stage on which the module group to be added will be initialized.</param>
            <param name="refValue">Reference to the location of the module group to be added.</param>
            <param name="moduleInfos">Collection of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> included in the group.</param>
            <returns><see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> with the added module group.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.SolveDependencies(System.Collections.Generic.IEnumerable{Microsoft.Practices.Prism.Modularity.ModuleInfo})">
            <summary>
            Checks for cyclic dependencies, by calling the dependencysolver. 
            </summary>
            <param name="modules">the.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.ValidateDependencies(System.Collections.Generic.IEnumerable{Microsoft.Practices.Prism.Modularity.ModuleInfo})">
            <summary>
            Ensures that all the dependencies within <paramref name="modules"/> refer to <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s
            within that list.
            </summary>
            <param name="modules">The modules to validate modules for.</param>
            <exception cref="T:Microsoft.Practices.Prism.Modularity.ModularityException">
            Throws if a <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> in <paramref name="modules"/> depends on a module that's 
            not in <paramref name="modules"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">Throws if <paramref name="modules"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.InnerLoad">
            <summary>
            Does the actual work of loading the catalog.  The base implementation does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.Sort(System.Collections.Generic.IEnumerable{Microsoft.Practices.Prism.Modularity.ModuleInfo})">
            <summary>
            Sorts a list of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s. This method is called by <see cref="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.CompleteListWithDependencies(System.Collections.Generic.IEnumerable{Microsoft.Practices.Prism.Modularity.ModuleInfo})"/>
            to return a sorted list. 
            </summary>
            <param name="modules">The <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s to sort.</param>
            <returns>Sorted list of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.ValidateUniqueModules">
            <summary>
            Makes sure all modules have an Unique name. 
            </summary>
            <exception cref="T:Microsoft.Practices.Prism.Modularity.DuplicateModuleException">
            Thrown if the names of one or more modules are not unique. 
            </exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.ValidateDependencyGraph">
            <summary>
            Ensures that there are no cyclic dependencies. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.ValidateCrossGroupDependencies">
            <summary>
            Ensures that there are no dependencies between modules on different groups.
            </summary>
            <remarks>
            A groupless module can only depend on other groupless modules.
            A module within a group can depend on other modules within the same group and/or on groupless modules.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.ValidateDependenciesInitializationMode">
            <summary>
            Ensures that there are no modules marked to be loaded <see cref="F:Microsoft.Practices.Prism.Modularity.InitializationMode.WhenAvailable"/>
            depending on modules loaded <see cref="F:Microsoft.Practices.Prism.Modularity.InitializationMode.OnDemand"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.GetDependentModulesInner(Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Returns the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> on which the received module dependens on.
            </summary>
            <param name="moduleInfo">Module whose dependant modules are requested.</param>
            <returns>Collection of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> dependants of <paramref name="moduleInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleCatalog.EnsureCatalogValidated">
            <summary>
            Ensures that the catalog is validated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleCatalog.Items">
            <summary>
            Gets the items in the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/>. This property is mainly used to add <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>s or 
            <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s through XAML. 
            </summary>
            <value>The items in the catalog.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleCatalog.Modules">
            <summary>
            Gets all the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> classes that are in the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/>, regardless 
            if they are within a <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/> or not. 
            </summary>
            <value>The modules.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleCatalog.Groups">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>s that have been added to the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/>. 
            </summary>
            <value>The groups.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleCatalog.Validated">
            <summary>
            Gets or sets a value that remembers whether the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> has been validated already. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleCatalog.GrouplessModules">
            <summary>
            Returns the list of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s that are not contained within any <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>. 
            </summary>
            <value>The groupless modules.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.ModuleDependencySolver">
            <summary>
            Used by <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInitializer"/> to get the load sequence
            for the modules to load according to their dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleDependencySolver.AddModule(System.String)">
            <summary>
            Adds a module to the solver.
            </summary>
            <param name="name">The name that uniquely identifies the module.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleDependencySolver.AddDependency(System.String,System.String)">
            <summary>
            Adds a module dependency between the modules specified by dependingModule and
            dependentModule.
            </summary>
            <param name="dependingModule">The name of the module with the dependency.</param>
            <param name="dependentModule">The name of the module dependingModule
            depends on.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleDependencySolver.Solve">
            <summary>
            Calculates an ordered vector according to the defined dependencies.
            Non-dependant modules appears at the beginning of the resulting array.
            </summary>
            <returns>The resulting ordered list of modules.</returns>
            <exception cref="T:Microsoft.Practices.Prism.Modularity.CyclicDependencyFoundException">This exception is thrown
            when a cycle is found in the defined depedency graph.</exception>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleDependencySolver.ModuleCount">
            <summary>
            Gets the number of modules added to the solver.
            </summary>
            <value>The number of modules.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.ModuleDownloadProgressChangedEventArgs">
            <summary>
            Provides progress information as a module downloads.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleDownloadProgressChangedEventArgs.#ctor(Microsoft.Practices.Prism.Modularity.ModuleInfo,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleDownloadProgressChangedEventArgs"/> class.
            </summary>
            <param name="moduleInfo">The module info.</param>
            <param name="bytesReceived">The bytes received.</param>
            <param name="totalBytesToReceive">The total bytes to receive.</param>        
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleDownloadProgressChangedEventArgs.ModuleInfo">
            <summary>
            Getsthe module info.
            </summary>
            <value>The module info.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleDownloadProgressChangedEventArgs.BytesReceived">
            <summary>
            Gets the bytes received.
            </summary>
            <value>The bytes received.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleDownloadProgressChangedEventArgs.TotalBytesToReceive">
            <summary>
            Gets the total bytes to receive.
            </summary>
            <value>The total bytes to receive.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.ModuleInfo">
            <summary>
            Defines the metadata that describes a module.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfo.#ctor">
            <summary>
            Initializes a new empty instance of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfo.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>.
            </summary>
            <param name="name">The module's name.</param>
            <param name="type">The module <see cref="T:System.Type"/>'s AssemblyQualifiedName.</param>
            <param name="dependsOn">The modules this instance depends on.</param>
            <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException"/> is thrown if <paramref name="dependsOn"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>.
            </summary>
            <param name="name">The module's name.</param>
            <param name="type">The module's type.</param>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleInfo.ModuleName">
            <summary>
            Gets or sets the name of the module.
            </summary>
            <value>The name of the module.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleInfo.ModuleType">
            <summary>
            Gets or sets the module <see cref="T:System.Type"/>'s AssemblyQualifiedName.
            </summary>
            <value>The type of the module.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleInfo.DependsOn">
            <summary>
            Gets or sets the list of modules that this module depends upon.
            </summary>
            <value>The list of modules that this module depends upon.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleInfo.InitializationMode">
            <summary>
            Specifies on which stage the Module will be initialized.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleInfo.Ref">
            <summary>
            Reference to the location of the module assembly.
            <example>The following are examples of valid <see cref="P:Microsoft.Practices.Prism.Modularity.ModuleInfo.Ref"/> values:
            http://myDomain/ClientBin/MyModules.xap for remote module in Silverlight
            file://c:/MyProject/Modules/MyModule.dll for a loose DLL in WPF.
            </example>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleInfo.State">
            <summary>
            Gets or sets the state of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> with regards to the module loading and initialization process.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup">
            <summary>
            Represents a group of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> instances that are usually deployed together. <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>s 
            are also used by the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleCatalog"/> to prevent common deployment problems such as having a module that's required 
            at startup that depends on modules that will only be downloaded on demand. 
            
            The group also forwards <see cref="P:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.Ref"/> and <see cref="P:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.InitializationMode"/> values to the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s that it
            contains. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.Add(Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Adds an <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> moduleInfo to the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>.
            </summary>
            <param name="item">The <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> to the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.ForwardValues(Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Forwards <see cref="P:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.InitializationMode"/> and <see cref="P:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.Ref"/> properties from this <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>
            to <paramref name="moduleInfo"/>.
            </summary>
            <param name="moduleInfo">The module info to forward values to.</param>
            <exception cref="T:System.ArgumentNullException">An <see cref="T:System.ArgumentNullException"/> is thrown if <paramref name="moduleInfo"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.Clear">
            <summary>
            Removes all <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s from the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.Contains(Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Determines whether the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.CopyTo(Microsoft.Practices.Prism.Modularity.ModuleInfo[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.Remove(Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>.
            </summary>
            <param name="value">
            The <see cref="T:System.Object"/> to add to the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>.
            Must be of type <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>
            </param>
            <returns>
            The position into which the new element was inserted.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/> contains a specific value.
            </summary>
            <param name="value">
            The <see cref="T:System.Object"/> to locate in the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>.
            Must be of type <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>
            </param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>.
            </summary>
            <param name="value">
            The <see cref="T:System.Object"/> to locate in the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>.
            Must be of type <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>
            </param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">
            The <see cref="T:System.Object"/> to insert into the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>.
            Must be of type <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> is not of type <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>
            </exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>.
            </summary>
            <param name="value">
            The <see cref="T:System.Object"/> to remove from the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>. 
            Must be of type <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>
            </param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.IndexOf(Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.Insert(System.Int32,Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.InitializationMode">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Practices.Prism.Modularity.ModuleInfo.InitializationMode"/> for the whole group. Any <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> classes that are
            added after setting this value will also get this <see cref="P:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.InitializationMode"/>.
            </summary>
            <seealso cref="P:Microsoft.Practices.Prism.Modularity.ModuleInfo.InitializationMode"/>
            <value>The initialization mode.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.Ref">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Practices.Prism.Modularity.ModuleInfo.Ref"/> value for the whole group. Any <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> classes that are
            added after setting this value will also get this <see cref="P:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.Ref"/>.
            
            The ref value will also be used by the <see cref="T:Microsoft.Practices.Prism.Modularity.IModuleManager"/> to determine which  <see cref="T:Microsoft.Practices.Prism.Modularity.IModuleTypeLoader"/> to use. 
            For example, if the ref property can be converted to an URL, it the XapModuleTypeLoader will be used 
            (Only available in the Silverlight version of CAL).
            For example, using an "file://" prefix with a valid URL will cause the FileModuleTypeLoader to be used
            (Only available in the desktop version of CAL).
            </summary>
            <seealso cref="P:Microsoft.Practices.Prism.Modularity.ModuleInfo.Ref"/>
            <value>The ref value that will be used.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/> is read-only.
            </summary>
            <value></value>
            <returns>false, because the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/> is not Read-Only.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/> has a fixed size.
            </summary>
            <returns>false, because the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/> does not have a fixed length.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> at the specified index.
            </summary>
            <value>The <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> at the specified index </value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroupExtensions">
            <summary>
            Defines extension methods for the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfoGroup"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroupExtensions.AddModule(Microsoft.Practices.Prism.Modularity.ModuleInfoGroup,System.String,System.Type,System.String[])">
            <summary>
            Adds a new module that is statically referenced to the specified module info group.
            </summary>
            <param name="moduleInfoGroup">The group where to add the module info in.</param>
            <param name="moduleName">The name for the module.</param>
            <param name="moduleType">The type for the module. This type should be a descendant of <see cref="T:Microsoft.Practices.Prism.Modularity.IModule"/>.</param>
            <param name="dependsOn">The names for the modules that this module depends on.</param>
            <returns>Returns the instance of the passed in module info group, to provide a fluid interface.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInfoGroupExtensions.AddModule(Microsoft.Practices.Prism.Modularity.ModuleInfoGroup,System.Type,System.String[])">
            <summary>
            Adds a new module that is statically referenced to the specified module info group.
            </summary>
            <param name="moduleInfoGroup">The group where to add the module info in.</param>
            <param name="moduleType">The type for the module. This type should be a descendant of <see cref="T:Microsoft.Practices.Prism.Modularity.IModule"/>.</param>
            <param name="dependsOn">The names for the modules that this module depends on.</param>
            <returns>Returns the instance of the passed in module info group, to provide a fluid interface.</returns>
            <remarks>The name of the module will be the type name.</remarks>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.ModuleInitializeException">
            <summary>
            Exception thrown by <see cref="T:Microsoft.Practices.Prism.Modularity.IModuleInitializer"/> implementations whenever 
            a module fails to load.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInitializeException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInitializeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInitializeException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInitializeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInitializeException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInitializeException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes the exception with a particular module and error message.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="moduleAssembly">The assembly where the module is located.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInitializeException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception 
            that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="moduleAssembly">The assembly where the module is located.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInitializeException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.ModuleInitializer">
            <summary>
            Implements the <see cref="T:Microsoft.Practices.Prism.Modularity.IModuleInitializer"/> interface. Handles loading of a module based on a type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInitializer.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,Microsoft.Practices.Prism.Logging.ILoggerFacade)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInitializer"/>.
            </summary>
            <param name="serviceLocator">The container that will be used to resolve the modules by specifying its type.</param>
            <param name="loggerFacade">The logger to use.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInitializer.Initialize(Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Initializes the specified module.
            </summary>
            <param name="moduleInfo">The module to initialize</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInitializer.HandleModuleInitializationError(Microsoft.Practices.Prism.Modularity.ModuleInfo,System.String,System.Exception)">
            <summary>
            Handles any exception ocurred in the module Initialization process,
            logs the error using the <seealso cref="T:Microsoft.Practices.Prism.Logging.ILoggerFacade"/> and throws a <seealso cref="T:Microsoft.Practices.Prism.Modularity.ModuleInitializeException"/>.
            This method can be overriden to provide a different behavior. 
            </summary>
            <param name="moduleInfo">The module metadata where the error happenened.</param>
            <param name="assemblyName">The assembly name.</param>
            <param name="exception">The exception thrown that is the cause of the current error.</param>
            <exception cref="T:Microsoft.Practices.Prism.Modularity.ModuleInitializeException"></exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInitializer.CreateModule(Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Uses the container to resolve a new <see cref="T:Microsoft.Practices.Prism.Modularity.IModule"/> by specifying its <see cref="T:System.Type"/>.
            </summary>
            <param name="moduleInfo">The module to create.</param>
            <returns>A new instance of the module specified by <paramref name="moduleInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleInitializer.CreateModule(System.String)">
            <summary>
            Uses the container to resolve a new <see cref="T:Microsoft.Practices.Prism.Modularity.IModule"/> by specifying its <see cref="T:System.Type"/>.
            </summary>
            <param name="typeName">The type name to resolve. This type must implement <see cref="T:Microsoft.Practices.Prism.Modularity.IModule"/>.</param>
            <returns>A new instance of <paramref name="typeName"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.ModuleManager">
            <summary>
            Component responsible for coordinating the modules' type loading and module initialization process. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleManager.#ctor(Microsoft.Practices.Prism.Modularity.IModuleInitializer,Microsoft.Practices.Prism.Modularity.IModuleCatalog,Microsoft.Practices.Prism.Logging.ILoggerFacade)">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleManager"/> class.
            </summary>
            <param name="moduleInitializer">Service used for initialization of modules.</param>
            <param name="moduleCatalog">Catalog that enumerates the modules to be loaded and initialized.</param>
            <param name="loggerFacade">Logger used during the load and initialization of modules.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleManager.Run">
            <summary>
            Initializes the modules marked as <see cref="F:Microsoft.Practices.Prism.Modularity.InitializationMode.WhenAvailable"/> on the <see cref="P:Microsoft.Practices.Prism.Modularity.ModuleManager.ModuleCatalog"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleManager.LoadModule(System.String)">
            <summary>
            Loads and initializes the module on the <see cref="P:Microsoft.Practices.Prism.Modularity.ModuleManager.ModuleCatalog"/> with the name <paramref name="moduleName"/>.
            </summary>
            <param name="moduleName">Name of the module requested for initialization.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleManager.ModuleNeedsRetrieval(Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Checks if the module needs to be retrieved before it's initialized.
            </summary>
            <param name="moduleInfo">Module that is being checked if needs retrieval.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleManager.LoadModulesThatAreReadyForLoad">
            <summary>
            Loads the modules that are not intialized and have their dependencies loaded.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleManager.HandleModuleTypeLoadingError(Microsoft.Practices.Prism.Modularity.ModuleInfo,System.Exception)">
            <summary>
            Handles any exception ocurred in the module typeloading process,
            logs the error using the <seealso cref="T:Microsoft.Practices.Prism.Logging.ILoggerFacade"/> and throws a <seealso cref="T:Microsoft.Practices.Prism.Modularity.ModuleTypeLoadingException"/>.
            This method can be overriden to provide a different behavior. 
            </summary>
            <param name="moduleInfo">The module metadata where the error happenened.</param>
            <param name="exception">The exception thrown that is the cause of the current error.</param>
            <exception cref="T:Microsoft.Practices.Prism.Modularity.ModuleTypeLoadingException"></exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>Calls <see cref="M:Microsoft.Practices.Prism.Modularity.ModuleManager.Dispose(System.Boolean)"/></remarks>.
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleManager.Dispose(System.Boolean)">
            <summary>
            Disposes the associated <see cref="T:Microsoft.Practices.Prism.Modularity.IModuleTypeLoader"/>s.
            </summary>
            <param name="disposing">When <see langword="true"/>, it is being called from the Dispose method.</param>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleManager.ModuleCatalog">
            <summary>
            The module catalog specified in the constructor.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.Prism.Modularity.ModuleManager.ModuleDownloadProgressChanged">
            <summary>
            Raised repeatedly to provide progress as modules are loaded in the background.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.Prism.Modularity.ModuleManager.LoadModuleCompleted">
            <summary>
            Raised when a module is loaded or fails to load.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.ModuleManager.ModuleTypeLoaders">
            <summary>
            Returns the list of registered <see cref="T:Microsoft.Practices.Prism.Modularity.IModuleTypeLoader"/> instances that will be 
            used to load the types of modules. 
            </summary>
            <value>The module type loaders.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.ModuleNotFoundException">
            <summary>
            Exception thrown when a requested <see cref="F:Microsoft.Practices.Prism.Modularity.InitializationMode.OnDemand"/> <see cref="T:Microsoft.Practices.Prism.Modularity.IModule"/> was not found.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleNotFoundException"/> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error. 
            </param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleNotFoundException"/> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error. 
            </param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.ModuleState">
            <summary>
            Defines the states a <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> can be in, with regards to the module loading and initialization process. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Modularity.ModuleState.NotStarted">
            <summary>
            Initial state for <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/>s. The <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleInfo"/> is defined, 
            but it has not been loaded, retrieved or initialized yet. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Modularity.ModuleState.LoadingTypes">
            <summary>
            The assembly that contains the type of the module is currently being loaded by an instance of a
            <see cref="T:Microsoft.Practices.Prism.Modularity.IModuleTypeLoader"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Modularity.ModuleState.ReadyForInitialization">
            <summary>
            The assembly that holds the Module is present. This means the type of the <see cref="T:Microsoft.Practices.Prism.Modularity.IModule"/> can be instantiated and initialized. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Modularity.ModuleState.Initializing">
            <summary>
            The module is currently Initializing, by the <see cref="T:Microsoft.Practices.Prism.Modularity.IModuleInitializer"/>
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Modularity.ModuleState.Initialized">
            <summary>
            The module is initialized and ready to be used. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.ModuleTypeLoaderNotFoundException">
            <summary>
            Exception that's thrown when there is no <see cref="T:Microsoft.Practices.Prism.Modularity.IModuleTypeLoader"/> registered in 
            <see cref="P:Microsoft.Practices.Prism.Modularity.ModuleManager.ModuleTypeLoaders"/> that can handle this particular type of module. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleTypeLoaderNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleTypeLoaderNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleTypeLoaderNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleTypeLoaderNotFoundException"/> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error. 
            </param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleTypeLoaderNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.ModuleTypeLoaderNotFoundException"/> class with a specified error message.
            </summary>
            <param name="message">
            The message that describes the error. 
            </param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleTypeLoaderNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.ModuleTypeLoadingException">
            <summary>
            Exception thrown by <see cref="T:Microsoft.Practices.Prism.Modularity.IModuleManager"/> implementations whenever 
            a module fails to retrieve.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleTypeLoadingException.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleTypeLoadingException.#ctor(System.String)">
            <summary>
            Initializes a new instance with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleTypeLoadingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="exception">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleTypeLoadingException.#ctor(System.String,System.String)">
            <summary>
            Initializes the exception with a particular module and error message.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.ModuleTypeLoadingException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes the exception with a particular module, error message and inner exception that happened.
            </summary>
            <param name="moduleName">The name of the module.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or a <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.ObservableObject`1">
            <summary>
            Class that wraps an object, so that other classes can notify for Change events. Typically, this class is set as 
            a Dependency Property on DependencyObjects, and allows other classes to observe any changes in the Value. 
            </summary>
            <remarks>
            This class is required, because in Silverlight, it's not possible to receive Change notifications for Dependency properties that you do not own. 
            </remarks>
            <typeparam name="T">The type of the property that's wrapped in the Observable object</typeparam>
        </member>
        <member name="F:Microsoft.Practices.Prism.ObservableObject`1.ValueProperty">
            <summary>
            Identifies the Value property of the ObservableObject
            </summary>
        </member>
        <member name="E:Microsoft.Practices.Prism.ObservableObject`1.PropertyChanged">
            <summary>
            Event that gets invoked when the Value property changes. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.ObservableObject`1.Value">
            <summary>
            The value that's wrapped inside the ObservableObject.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.AdapterInvalidTypeException">
            <summary>
              Looks up a localized string similar to The object must be of type &apos;{0}&apos; in order to use the current region adapter..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.CannotChangeRegionNameException">
            <summary>
              Looks up a localized string similar to Cannot change the region name once is set. The current region name is &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.CannotCreateNavigationTarget">
            <summary>
              Looks up a localized string similar to Cannot create navigation target &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.CannotRegisterCompositeCommandInItself">
            <summary>
              Looks up a localized string similar to Cannot register a CompositeCommand in itself..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.CannotRegisterSameCommandTwice">
            <summary>
              Looks up a localized string similar to Cannot register the same command twice in the same CompositeCommand..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.CanOnlyAddTypesThatInheritIFromRegionBehavior">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not implement from IRegionBehavior..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.ConfigurationStoreCannotBeNull">
            <summary>
              Looks up a localized string similar to The ConfigurationStore cannot contain a null value. .
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.ContentControlHasContentException">
            <summary>
              Looks up a localized string similar to ContentControl&apos;s Content property is not empty. 
               This control is being associated with a region, but the control is already bound to something else. 
               If you did not explicitly set the control&apos;s Content property, 
               this exception may be caused by a change in the value of the inherited RegionManager attached property..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.CyclicDependencyFound">
            <summary>
              Looks up a localized string similar to At least one cyclic dependency has been found in the module catalog. Cycles in the module dependencies must be avoided..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.DeactiveNotPossibleException">
            <summary>
              Looks up a localized string similar to Deactivation is not possible in this type of region..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.DefaultTextLoggerPattern">
            <summary>
              Looks up a localized string similar to {1}: {2}. Priority: {3}. Timestamp:{0:u}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.DelegateCommandDelegatesCannotBeNull">
            <summary>
              Looks up a localized string similar to Neither the executeMethod nor the canExecuteMethod delegates can be null..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.DelegateCommandInvalidGenericPayloadType">
            <summary>
              Looks up a localized string similar to T for DelegateCommand&lt;T&gt; is not an object nor Nullable..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.DependencyForUnknownModule">
            <summary>
              Looks up a localized string similar to Cannot add dependency for unknown module {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.DependencyOnMissingModule">
            <summary>
              Looks up a localized string similar to A module declared a dependency on another module which is not declared to be loaded. Missing module(s): {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.DirectoryNotFound">
            <summary>
              Looks up a localized string similar to Directory {0} was not found..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.DuplicatedModule">
            <summary>
              Looks up a localized string similar to A duplicated module with name {0} has been found by the loader..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.DuplicatedModuleGroup">
            <summary>
              Looks up a localized string similar to A duplicated module group with name {0} has been found by the loader..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.FailedToGetType">
            <summary>
              Looks up a localized string similar to Unable to retrieve the module type {0} from the loaded assemblies.  You may need to specify a more fully-qualified type name..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.FailedToLoadModule">
            <summary>
              Looks up a localized string similar to An exception occurred while initializing module &apos;{0}&apos;. 
               - The exception message was: {2}
               - The Assembly that the module was trying to be loaded from was:{1}
               Check the InnerException property of the exception for more information. If the exception occurred while creating an object in a DI container, you can exception.GetRootException() to help locate the root cause of the problem. 
             .
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.FailedToLoadModuleNoAssemblyInfo">
            <summary>
              Looks up a localized string similar to An exception occurred while initializing module &apos;{0}&apos;. 
               - The exception message was: {1}
               Check the InnerException property of the exception for more information. If the exception occurred 
               while creating an object in a DI container, you can exception.GetRootException() to help locate the 
               root cause of the problem. .
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.FailedToRetrieveModule">
             <summary>
               Looks up a localized string similar to Failed to load type for module {0}. 
            
            If this error occurred when using MEF in a Silverlight application, please ensure that the CopyLocal property of the reference to the MefExtensions assembly is set to true in the main application/shell and false in all other assemblies. 
            
            Error was: {1}..
             </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.HostControlCannotBeNull">
            <summary>
              Looks up a localized string similar to HostControl cannot have null value when behavior attaches. .
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.HostControlCannotBeSetAfterAttach">
            <summary>
              Looks up a localized string similar to The HostControl property cannot be set after Attach method has been called..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.HostControlMustBeATabControl">
            <summary>
              Looks up a localized string similar to HostControl type must be a TabControl..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.IEnumeratorObsolete">
            <summary>
              Looks up a localized string similar to The IModuleEnumerator interface is no longer used and has been replaced by ModuleCatalog..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.InvalidArgumentAssemblyUri">
            <summary>
              Looks up a localized string similar to The argument must be a valid absolute Uri to an assembly file..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.InvalidDelegateRerefenceTypeException">
            <summary>
              Looks up a localized string similar to The Target of the IDelegateReference should be of type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.ItemsControlHasItemsSourceException">
            <summary>
              Looks up a localized string similar to ItemsControl&apos;s ItemsSource property is not empty. 
               This control is being associated with a region, but the control is already bound to something else. 
               If you did not explicitly set the control&apos;s ItemSource property, 
               this exception may be caused by a change in the value of the inherited RegionManager attached property..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.MappingExistsException">
            <summary>
              Looks up a localized string similar to Mapping with the given type is already registered: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.ModuleDependenciesNotMetInGroup">
            <summary>
              Looks up a localized string similar to Module {0} depends on other modules that don&apos;t belong to the same group..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.ModuleNotFound">
            <summary>
              Looks up a localized string similar to Module {0} was not found in the catalog..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.ModulePathCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to The ModulePath cannot contain a null value or be empty.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.ModuleTypeNotFound">
            <summary>
              Looks up a localized string similar to Failed to load type &apos;{0}&apos; from assembly &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.NavigationInProgress">
            <summary>
              Looks up a localized string similar to Navigation is already in progress on region with name &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.NavigationServiceHasNoRegion">
            <summary>
              Looks up a localized string similar to Navigation cannot proceed until a region is set for the RegionNavigationService..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.NoRetrieverCanRetrieveModule">
            <summary>
              Looks up a localized string similar to There is currently no moduleTypeLoader in the ModuleManager that can retrieve the specified module..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.OnViewRegisteredException">
            <summary>
              Looks up a localized string similar to An exception has occurred while trying to add a view to region &apos;{0}&apos;. 
               - The most likely causing exception was was: &apos;{1}&apos;.
               But also check the InnerExceptions for more detail or call .GetRootException(). .
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.PropertySupport_ExpressionNotProperty_Exception">
            <summary>
              Looks up a localized string similar to The member access expression does not access a property..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.PropertySupport_NotMemberAccessExpression_Exception">
            <summary>
              Looks up a localized string similar to The expression is not a member access expression..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.PropertySupport_StaticExpression_Exception">
            <summary>
              Looks up a localized string similar to The referenced property is a static property..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.RegionBehaviorAttachCannotBeCallWithNullRegion">
            <summary>
              Looks up a localized string similar to The Attach method cannot be called when Region property is null..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.RegionBehaviorRegionCannotBeSetAfterAttach">
            <summary>
              Looks up a localized string similar to The Region property cannot be set after Attach method has been called..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.RegionCreationException">
            <summary>
              Looks up a localized string similar to An exception occurred while creating a region with name &apos;{0}&apos;. The exception was: {1}. .
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.RegionManagerWithDifferentNameException">
            <summary>
              Looks up a localized string similar to The region being added already has a name of &apos;{0}&apos; and cannot be added to the region manager with a different name (&apos;{1}&apos;)..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.RegionNameCannotBeEmptyException">
            <summary>
              Looks up a localized string similar to The region name cannot be null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.RegionNameExistsException">
            <summary>
              Looks up a localized string similar to Region with the given name is already registered: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.RegionNotFound">
            <summary>
              Looks up a localized string similar to This RegionManager does not contain a Region with the name &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.RegionNotInRegionManagerException">
            <summary>
              Looks up a localized string similar to The region manager does not contain the {0} region..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.RegionViewExistsException">
            <summary>
              Looks up a localized string similar to View already exists in region..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.RegionViewNameExistsException">
            <summary>
              Looks up a localized string similar to View with name &apos;{0}&apos; already exists in the region..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.StartupModuleDependsOnAnOnDemandModule">
            <summary>
              Looks up a localized string similar to Module {0} is marked for automatic initialization when the application starts, but it depends on modules that are marked as OnDemand initialization. To fix this error, mark the dependency modules for InitializationMode=WhenAvailable, or remove this validation by extending the ModuleCatalog class..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.StringCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to The provided String argument {0} must not be null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.StringCannotBeNullOrEmpty1">
            <summary>
              Looks up a localized string similar to The provided String argument {0} must not be null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.TypeWithKeyNotRegistered">
            <summary>
              Looks up a localized string similar to No BehaviorType with key &apos;{0}&apos; was registered..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.UpdateRegionException">
            <summary>
              Looks up a localized string similar to An exception occurred while trying to create region objects. 
               - The most likely causing exception was: &apos;{0}&apos;.
               But also check the InnerExceptions for more detail or call .GetRootException(). .
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.ValueMustBeOfTypeModuleInfo">
            <summary>
              Looks up a localized string similar to The value must be of type ModuleInfo..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.ValueNotFound">
            <summary>
              Looks up a localized string similar to {0} not found..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Properties.Resources.ViewNotInRegionException">
            <summary>
              Looks up a localized string similar to The region does not contain the specified view..
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.AllActiveRegion">
            <summary>
            Region that keeps all the views in it as active. Deactivation of views is not allowed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.Region">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> that allows multiple active views.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.IRegion">
            <summary>
            Defines a model that can be used to compose views.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.INavigateAsync">
            <summary>
            Provides methods to perform navigation.
            </summary>
            <remarks>
            Convenience overloads for the methods in this interface can be found as extension methods on the 
            <see cref="T:Microsoft.Practices.Prism.Regions.NavigationAsyncExtensions"/> class.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.INavigateAsync.RequestNavigate(System.Uri,System.Action{Microsoft.Practices.Prism.Regions.NavigationResult})">
            <summary>
            Initiates navigation to the target specified by the <see cref="T:System.Uri"/>.
            </summary>
            <param name="target">The navigation target</param>
            <param name="navigationCallback">The callback executed when the navigation request is completed.</param>
            <remarks>
            Convenience overloads for this method can be found as extension methods on the 
            <see cref="T:Microsoft.Practices.Prism.Regions.NavigationAsyncExtensions"/> class.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegion.Add(System.Object)">
            <overloads>Adds a new view to the region.</overloads>
             <summary>
             Adds a new view to the region.
             </summary>
             <param name="view">The view to add.</param>
             <returns>The <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>. It will be the current region manager when using this overload.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegion.Add(System.Object,System.String)">
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="view">The view to add.</param>
            <param name="viewName">The name of the view. This can be used to retrieve it later by calling <see cref="M:Microsoft.Practices.Prism.Regions.IRegion.GetView(System.String)"/>.</param>
            <returns>The <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>. It will be the current region manager when using this overload.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegion.Add(System.Object,System.String,System.Boolean)">
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="view">The view to add.</param>
            <param name="viewName">The name of the view. This can be used to retrieve it later by calling <see cref="M:Microsoft.Practices.Prism.Regions.IRegion.GetView(System.String)"/>.</param>
            <param name="createRegionManagerScope">When <see langword="true"/>, the added view will receive a new instance of <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/>, otherwise it will use the current region manager for this region.</param>
            <returns>The <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegion.Remove(System.Object)">
            <summary>
            Removes the specified view from the region.
            </summary>
            <param name="view">The view to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegion.Activate(System.Object)">
            <summary>
            Marks the specified view as active. 
            </summary>
            <param name="view">The view to activate.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegion.Deactivate(System.Object)">
            <summary>
            Marks the specified view as inactive. 
            </summary>
            <param name="view">The view to deactivate.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegion.GetView(System.String)">
            <summary>
            Returns the view instance that was added to the region using a specific name.
            </summary>
            <param name="viewName">The name used when adding the view to the region.</param>
            <returns>Returns the named view or <see langword="null"/> if the view with <paramref name="viewName"/> does not exist in the current region.</returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegion.Views">
            <summary>
            Gets a readonly view of the collection of views in the region.
            </summary>
            <value>An <see cref="T:Microsoft.Practices.Prism.Regions.IViewsCollection"/> of all the added views.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegion.ActiveViews">
            <summary>
            Gets a readonly view of the collection of all the active views in the region.
            </summary>
            <value>An <see cref="T:Microsoft.Practices.Prism.Regions.IViewsCollection"/> of all the active views.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegion.Context">
            <summary>
            Gets or sets a context for the region. This value can be used by the user to share context with the views.
            </summary>
            <value>The context value to be shared.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegion.Name">
            <summary>
            Gets the name of the region that uniequely identifies the region within a <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/>.
            </summary>
            <value>The name of the region.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegion.SortComparison">
            <summary>
            Gets or sets the comparison used to sort the views.
            </summary>
            <value>The comparison to use.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegion.RegionManager">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> that will be passed to the views when adding them to the region, unless the view is added by specifying createRegionManagerScope as <see langword="true"/>.
            </summary>
            <value>The <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> where this <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> is registered.</value>
            <remarks>This is usually used by implementations of <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> and should not be
            used by the developer explicitely.</remarks>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegion.Behaviors">
            <summary>
            Gets the collection of <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/>s that can extend the behavior of regions. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegion.NavigationService">
            <summary>
            Gets or sets the navigation service.
            </summary>
            <value>The navigation service.</value>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Region.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Regions.Region"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Region.Add(System.Object)">
            <overloads>Adds a new view to the region.</overloads>
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="view">The view to add.</param>
            <returns>The <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>. It will be the current region manager when using this overload.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Region.Add(System.Object,System.String)">
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="view">The view to add.</param>
            <param name="viewName">The name of the view. This can be used to retrieve it later by calling <see cref="M:Microsoft.Practices.Prism.Regions.IRegion.GetView(System.String)"/>.</param>
            <returns>The <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>. It will be the current region manager when using this overload.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Region.Add(System.Object,System.String,System.Boolean)">
            <summary>
            Adds a new view to the region.
            </summary>
            <param name="view">The view to add.</param>
            <param name="viewName">The name of the view. This can be used to retrieve it later by calling <see cref="M:Microsoft.Practices.Prism.Regions.IRegion.GetView(System.String)"/>.</param>
            <param name="createRegionManagerScope">When <see langword="true"/>, the added view will receive a new instance of <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/>, otherwise it will use the current region manager for this region.</param>
            <returns>The <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> that is set on the view if it is a <see cref="T:System.Windows.DependencyObject"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Region.Remove(System.Object)">
            <summary>
            Removes the specified view from the region.
            </summary>
            <param name="view">The view to remove.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Region.Activate(System.Object)">
            <summary>
            Marks the specified view as active. 
            </summary>
            <param name="view">The view to activate.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Region.Deactivate(System.Object)">
            <summary>
            Marks the specified view as inactive. 
            </summary>
            <param name="view">The view to deactivate.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Region.GetView(System.String)">
            <summary>
            Returns the view instance that was added to the region using a specific name.
            </summary>
            <param name="viewName">The name used when adding the view to the region.</param>
            <returns>Returns the named view or <see langword="null"/> if the view with <paramref name="viewName"/> does not exist in the current region.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Region.RequestNavigate(System.Uri,System.Action{Microsoft.Practices.Prism.Regions.NavigationResult})">
            <summary>
            Initiates navigation to the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="navigationCallback">A callback to execute when the navigation request is completed.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Region.DefaultSortComparison(System.Object,System.Object)">
            <summary>
            The default sort algorithm.
            </summary>
            <param name="x">The first view to compare.</param>
            <param name="y">The second view to compare.</param>
            <returns></returns>
        </member>
        <member name="E:Microsoft.Practices.Prism.Regions.Region.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Region.Behaviors">
            <summary>
            Gets the collection of <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/>s that can extend the behavior of regions. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Region.Context">
            <summary>
            Gets or sets a context for the region. This value can be used by the user to share context with the views.
            </summary>
            <value>The context value to be shared.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Region.Name">
            <summary>
            Gets the name of the region that uniequely identifies the region within a <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/>.
            </summary>
            <value>The name of the region.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Region.Views">
            <summary>
            Gets a readonly view of the collection of views in the region.
            </summary>
            <value>An <see cref="T:Microsoft.Practices.Prism.Regions.IViewsCollection"/> of all the added views.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Region.ActiveViews">
            <summary>
            Gets a readonly view of the collection of all the active views in the region.
            </summary>
            <value>An <see cref="T:Microsoft.Practices.Prism.Regions.IViewsCollection"/> of all the active views.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Region.SortComparison">
            <summary>
            Gets or sets the comparison used to sort the views.
            </summary>
            <value>The comparison to use.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Region.RegionManager">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> that will be passed to the views when adding them to the region, unless the view is added by specifying createRegionManagerScope as <see langword="true"/>.
            </summary>
            <value>The <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> where this <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> is registered.</value>
            <remarks>This is usually used by implementations of <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> and should not be
            used by the developer explicitely.</remarks>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Region.NavigationService">
            <summary>
            Gets the navigation service.
            </summary>
            <value>The navigation service.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Region.ItemMetadataCollection">
            <summary>
            Gets the collection with all the views along with their metadata.
            </summary>
            <value>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of <see cref="T:Microsoft.Practices.Prism.Regions.ItemMetadata"/> with all the added views.</value>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.AllActiveRegion.Deactivate(System.Object)">
            <summary>
            Deactive is not valid in this Region. This method will always throw <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="view">The view to deactivate.</param>
            <exception cref="T:System.InvalidOperationException">Every time this method is called.</exception>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.AllActiveRegion.ActiveViews">
            <summary>
            Gets a readonly view of the collection of all the active views in the region. These are all the added views.
            </summary>
            <value>An <see cref="T:Microsoft.Practices.Prism.Regions.IViewsCollection"/> of all the active views.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.Behaviors.AutoPopulateRegionBehavior">
            <summary>
            Populates the target region with the views registered to it in the <see cref="T:Microsoft.Practices.Prism.Regions.IRegionViewRegistry"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.RegionBehavior">
            <summary>
            Provides a base class for region's behaviors.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.IRegionBehavior">
            <summary>
            Interface for allowing extensible behavior on regions.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionBehavior.Attach">
            <summary>
            Attaches the behavior to the specified region.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegionBehavior.Region">
            <summary>
            The region that this behavior is extending.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionBehavior.Attach">
            <summary>
            Attaches the behavior to the region.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionBehavior.OnAttach">
            <summary>
            Override this method to perform the logic after the behavior has been attached.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.RegionBehavior.Region">
            <summary>
            Behavior's attached region.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.RegionBehavior.IsAttached">
            <summary>
            Returns <see langword="true"/> if the behavior is attached to a region, <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Regions.Behaviors.AutoPopulateRegionBehavior.BehaviorKey">
            <summary>
            The key of this behavior.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.AutoPopulateRegionBehavior.#ctor(Microsoft.Practices.Prism.Regions.IRegionViewRegistry)">
            <summary>
            Creates a new instance of the AutoPopulateRegionBehavior 
            associated with the <see cref="T:Microsoft.Practices.Prism.Regions.IRegionViewRegistry"/> received.
            </summary>
            <param name="regionViewRegistry"><see cref="T:Microsoft.Practices.Prism.Regions.IRegionViewRegistry"/> that the behavior will monitor for views to populate the region.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.AutoPopulateRegionBehavior.OnAttach">
            <summary>
            Attaches the AutoPopulateRegionBehavior to the Region.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.AutoPopulateRegionBehavior.CreateViewsToAutoPopulate">
            <summary>
            Returns a collection of views that will be added to the
            View collection. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.AutoPopulateRegionBehavior.AddViewIntoRegion(System.Object)">
            <summary>
            Adds a view into the views collection of this region. 
            </summary>
            <param name="viewToAdd"></param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.AutoPopulateRegionBehavior.OnViewRegistered(System.Object,Microsoft.Practices.Prism.Regions.ViewRegisteredEventArgs)">
            <summary>
            Handler of the event that fires when a new viewtype is registered to the registry. 
            </summary>
            <remarks>Although this is a public method to support Weak Delegates in Silverlight, it should not be called by the user.</remarks>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.Behaviors.BindRegionContextToDependencyObjectBehavior">
            <summary>
            Defines a behavior that forwards the <see cref="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionContextProperty"/> 
            to the views in the region.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Regions.Behaviors.BindRegionContextToDependencyObjectBehavior.BehaviorKey">
            <summary>
            The key of this behavior.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.BindRegionContextToDependencyObjectBehavior.Attach">
            <summary>
            Attaches the behavior to the specified region.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Behaviors.BindRegionContextToDependencyObjectBehavior.Region">
            <summary>
            Behavior's attached region.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior">
            <summary>
            Behavior that creates a new <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>, when the control that will host the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> (see <see cref="P:Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.TargetElement"/>)
            is added to the VisualTree. This behavior will use the <see cref="T:Microsoft.Practices.Prism.Regions.RegionAdapterMappings"/> class to find the right type of adapter to create
            the region. After the region is created, this behavior will detach. 
            </summary>
            <remarks>
            Attached property value inheritance is not available in Silverlight, so the current approach walks up the visual tree when requesting a region from a region manager.
            The <see cref="T:Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior"/> is now responsible for walking up the Tree. 
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.#ctor(Microsoft.Practices.Prism.Regions.RegionAdapterMappings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior"/> class.
            </summary>
            <param name="regionAdapterMappings">
            The region adapter mappings, that are used to find the correct adapter for 
            a given controltype. The controltype is determined by the <see name="TargetElement"/> value. 
            </param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.Attach">
            <summary>
            Start monitoring the <see cref="T:Microsoft.Practices.Prism.Regions.RegionManager"/> and the <see cref="P:Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.TargetElement"/> to detect when the <see cref="P:Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.TargetElement"/> becomes
            part of the Visual Tree. When that happens, the Region will be created and the behavior will <see cref="M:Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.Detach"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.Detach">
            <summary>
            Stop monitoring the <see cref="T:Microsoft.Practices.Prism.Regions.RegionManager"/> and the  <see cref="P:Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.TargetElement"/>, so that this behavior can be garbage collected. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.OnUpdatingRegions(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="T:Microsoft.Practices.Prism.Regions.RegionManager"/> is updating it's <see cref="P:Microsoft.Practices.Prism.Regions.RegionManager.Regions"/> collection. 
            </summary>
            <remarks>
            This method has to be public, because it has to be callable using weak references in silverlight and other partial trust environments.
            </remarks>
            <param name="sender">The <see cref="T:Microsoft.Practices.Prism.Regions.RegionManager"/>. </param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.CreateRegion(System.Windows.DependencyObject,System.String)">
            <summary>
            Method that will create the region, by calling the right <see cref="T:Microsoft.Practices.Prism.Regions.IRegionAdapter"/>. 
            </summary>
            <param name="targetElement">The target element that will host the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.</param>
            <param name="regionName">Name of the region.</param>
            <returns>The created <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/></returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.RegionManagerAccessor">
            <summary>
            Sets a class that interfaces between the <see cref="T:Microsoft.Practices.Prism.Regions.RegionManager"/> 's static properties/events and this behavior,
            so this behavior can be tested in isolation. 
            </summary>
            <value>The region manager accessor.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Behaviors.DelayedRegionCreationBehavior.TargetElement">
            <summary>
            The element that will host the Region. 
            </summary>
            <value>The target element.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.Behaviors.IHostAwareRegionBehavior">
            <summary>
            Defines a <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/> that not allows extensible behaviors on regions which also interact
            with the target element that the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> is attached to.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Behaviors.IHostAwareRegionBehavior.HostControl">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> is attached to.
            </summary>
            <value>A <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> is attached to.
            This is usually a <see cref="T:System.Windows.FrameworkElement"/> that is part of the tree.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.Behaviors.RegionActiveAwareBehavior">
            <summary>
            Behavior that monitors a <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> object and 
            changes the value for the <see cref="P:Microsoft.Practices.Prism.IActiveAware.IsActive"/> property when
            an object that implements <see cref="T:Microsoft.Practices.Prism.IActiveAware"/> gets added or removed 
            from the collection.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Regions.Behaviors.RegionActiveAwareBehavior.BehaviorKey">
            <summary>
            Name that identifies the <see cref="T:Microsoft.Practices.Prism.Regions.Behaviors.RegionActiveAwareBehavior"/> behavior in a collection of <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.RegionActiveAwareBehavior.Attach">
            <summary>
            Attaches the behavior to the specified region
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.RegionActiveAwareBehavior.Detach">
            <summary>
            Detaches the behavior from the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Behaviors.RegionActiveAwareBehavior.Region">
            <summary>
            The region that this behavior is extending
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.Behaviors.RegionCreationException">
            <summary>
            Represents errors that occured during region creation.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.RegionCreationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.Behaviors.RegionCreationException"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.RegionCreationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.Behaviors.RegionCreationException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.RegionCreationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.Behaviors.RegionCreationException"/> class with a specified error message and a reference 
            to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference 
            (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior">
            <summary>
            Subscribes to a static event from the <see cref="T:Microsoft.Practices.Prism.Regions.RegionManager"/> in order to register the target <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>
            in a <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> when one is available on the host control by walking up the tree and finding
            a control whose <see cref="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionManagerProperty"/> property is not <see langword="null"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.BehaviorKey">
            <summary>
            The key of this behavior.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.OnAttach">
            <summary>
            When the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> has a name assigned, the behavior will start monitoring the ancestor controls in the element tree
            to look for an <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> where to register the region in.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.OnUpdatingRegions(System.Object,System.EventArgs)">
            <summary>
            This event handler gets called when a RegionManager is requering the instances of a region to be registered if they are not already.
            <remarks>Although this is a public method to support Weak Delegates in Silverlight, it should not be called by the user.</remarks>
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The arguments.</param>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.RegionManagerAccessor">
            <summary>
            Provides an abstraction on top of the RegionManager static members.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Behaviors.RegionManagerRegistrationBehavior.HostControl">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> is attached to.
            </summary>
            <value>A <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> is attached to.
            This is usually a <see cref="T:System.Windows.FrameworkElement"/> that is part of the tree.</value>
            <exception cref="T:System.InvalidOperationException">When this member is set after the <see cref="M:Microsoft.Practices.Prism.Regions.IRegionBehavior.Attach"/> method has being called.</exception>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.Behaviors.RegionMemberLifetimeBehavior">
            <summary>
            The RegionMemberLifetimeBehavior determines if items should be removed from the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>
            when they are deactivated.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Practices.Prism.Regions.Behaviors.RegionMemberLifetimeBehavior"/> monitors the <see cref="P:Microsoft.Practices.Prism.Regions.IRegion.ActiveViews"/>
            collection to discover items that transition into a deactivated state.  
            <p/>
            The behavior checks the removed items for either the <see cref="T:Microsoft.Practices.Prism.Regions.IRegionMemberLifetime"/>
            or the <see cref="T:Microsoft.Practices.Prism.Regions.RegionMemberLifetimeAttribute"/> (in that order) to determine if it should be kept 
            alive on removal.
            <p/>
            If the item in the collection is a <see cref="T:System.Windows.FrameworkElement"/>, it will
            also check it's DataContext for <see cref="T:Microsoft.Practices.Prism.Regions.IRegionMemberLifetime"/> or the <see cref="T:Microsoft.Practices.Prism.Regions.RegionMemberLifetimeAttribute"/>.
            <p/>
            The order of checks are:
            <list type="number">
                <item>Region Item's IRegionMemberLifetime.KeepAlive value.</item>
                <item>Region Item's DataContext's IRegionMemberLifetime.KeepAlive value.</item>
                <item>Region Item's RegionMemberLifetimeAttribute.KeepAlive value.</item>
                <item>Region Item's DataContext's RegionMemberLifetimeAttribute.KeepAlive value.</item>
            </list>
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.Prism.Regions.Behaviors.RegionMemberLifetimeBehavior.BehaviorKey">
            <summary>
            The key for this behavior.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.RegionMemberLifetimeBehavior.OnAttach">
            <summary>
            Override this method to perform the logic after the behavior has been attached.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.Behaviors.SelectorItemsSourceSyncBehavior">
            <summary>
            Defines the attached behavior that keeps the items of the <see cref="T:System.Windows.Controls.Primitives.Selector"/> host control in synchronization with the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
            
            This behavior also makes sure that, if you activate a view in a region, the SelectedItem is set. If you set the SelectedItem or SelectedItems (ListBox)
            then this behavior will also call Activate on the selected items. 
            <remarks>
            When calling Activate on a view, you can only select a single active view at a time. By setting the SelectedItems property of a listbox, you can set
            multiple views to active. 
            </remarks>
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Regions.Behaviors.SelectorItemsSourceSyncBehavior.BehaviorKey">
            <summary>
            Name that identifies the SelectorItemsSourceSyncBehavior behavior in a collection of RegionsBehaviors. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.SelectorItemsSourceSyncBehavior.OnAttach">
            <summary>
            Starts to monitor the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> to keep it in synch with the items of the <see cref="P:Microsoft.Practices.Prism.Regions.Behaviors.SelectorItemsSourceSyncBehavior.HostControl"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Behaviors.SelectorItemsSourceSyncBehavior.HostControl">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> is attached to.
            </summary>
            <value>
            A <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> is attached to.
            </value>
            <remarks>For this behavior, the host control must always be a <see cref="T:System.Windows.Controls.Primitives.Selector"/> or an inherited class.</remarks>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.Behaviors.SyncRegionContextWithHostBehavior">
            <summary>
            Behavior that synchronizes the <see cref="P:Microsoft.Practices.Prism.Regions.IRegion.Context"/> property of a <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> with 
            the control that hosts the Region. It does this by setting the <see cref="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionContextProperty"/> 
            Dependency Property on the host control.
            
            This behavior allows the usage of two way databinding of the RegionContext from XAML. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Regions.Behaviors.SyncRegionContextWithHostBehavior.BehaviorKey">
            <summary>
            Name that identifies the SyncRegionContextWithHostBehavior behavior in a collection of RegionsBehaviors. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.SyncRegionContextWithHostBehavior.OnAttach">
            <summary>
            Override this method to perform the logic after the behavior has been attached.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Behaviors.SyncRegionContextWithHostBehavior.HostControl">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> is attached to.
            </summary>
            <value>
            A <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> is attached to.
            This is usually a <see cref="T:System.Windows.FrameworkElement"/> that is part of the tree.
            </value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.ContentControlRegionAdapter">
            <summary>
            Adapter that creates a new <see cref="T:Microsoft.Practices.Prism.Regions.SingleActiveRegion"/> and monitors its
            active view to set it on the adapted <see cref="T:System.Windows.Controls.ContentControl"/>. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.RegionAdapterBase`1">
            <summary>
            Base class to facilitate the creation of <see cref="T:Microsoft.Practices.Prism.Regions.IRegionAdapter"/> implementations.
            </summary>
            <typeparam name="T">Type of object to adapt.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.IRegionAdapter">
            <summary>
            Defines an interfaces to adapt an object and bind it to a new <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionAdapter.Initialize(System.Object,System.String)">
            <summary>
            Adapts an object and binds it to a new <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
            </summary>
            <param name="regionTarget">The object to adapt.</param>
            <param name="regionName">The name of the region to be created.</param>
            <returns>The new instance of <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> that the <paramref name="regionTarget"/> is bound to.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.#ctor(Microsoft.Practices.Prism.Regions.IRegionBehaviorFactory)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Regions.RegionAdapterBase`1"/>.
            </summary>
            <param name="regionBehaviorFactory">The factory used to create the region behaviors to attach to the created regions.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Initialize(`0,System.String)">
            <summary>
            Adapts an object and binds it to a new <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
            </summary>
            <param name="regionTarget">The object to adapt.</param>
            <param name="regionName">The name of the region to be created.</param>
            <returns>The new instance of <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> that the <paramref name="regionTarget"/> is bound to.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Microsoft#Practices#Prism#Regions#IRegionAdapter#Initialize(System.Object,System.String)">
            <summary>
            Adapts an object and binds it to a new <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
            </summary>
            <param name="regionTarget">The object to adapt.</param>
            <param name="regionName">The name of the region to be created.</param>
            <returns>The new instance of <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> that the <paramref name="regionTarget"/> is bound to.</returns>
            <remarks>This methods performs validation to check that <paramref name="regionTarget"/>
            is of type <typeparamref name="T"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">When <paramref name="regionTarget"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">When <paramref name="regionTarget"/> is not of type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.AttachDefaultBehaviors(Microsoft.Practices.Prism.Regions.IRegion,`0)">
            <summary>
            This method adds the default behaviors by using the <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehaviorFactory"/> object.
            </summary>
            <param name="region">The region being used.</param>
            <param name="regionTarget">The object to adapt.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.AttachBehaviors(Microsoft.Practices.Prism.Regions.IRegion,`0)">
            <summary>
            Template method to attach new behaviors.
            </summary>
            <param name="region">The region being used.</param>
            <param name="regionTarget">The object to adapt.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.Adapt(Microsoft.Practices.Prism.Regions.IRegion,`0)">
            <summary>
            Template method to adapt the object to an <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
            </summary>
            <param name="region">The new region being used.</param>
            <param name="regionTarget">The object to adapt.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.CreateRegion">
            <summary>
            Template method to create a new instance of <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>
            that will be used to adapt the object.
            </summary>
            <returns>A new instance of <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.RegionAdapterBase`1.RegionBehaviorFactory">
            <summary>
            Gets or sets the factory used to create the region behaviors to attach to the created regions.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ContentControlRegionAdapter.#ctor(Microsoft.Practices.Prism.Regions.IRegionBehaviorFactory)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Regions.ContentControlRegionAdapter"/>.
            </summary>
            <param name="regionBehaviorFactory">The factory used to create the region behaviors to attach to the created regions.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ContentControlRegionAdapter.Adapt(Microsoft.Practices.Prism.Regions.IRegion,System.Windows.Controls.ContentControl)">
            <summary>
            Adapts a <see cref="T:System.Windows.Controls.ContentControl"/> to an <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
            </summary>
            <param name="region">The new region being used.</param>
            <param name="regionTarget">The object to adapt.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ContentControlRegionAdapter.CreateRegion">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.Prism.Regions.SingleActiveRegion"/>.
            </summary>
            <returns>A new instance of <see cref="T:Microsoft.Practices.Prism.Regions.SingleActiveRegion"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.IRegionManagerAccessor">
            <summary>
            Provides an abstraction on top of the RegionManager static members.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionManagerAccessor.GetRegionName(System.Windows.DependencyObject)">
            <summary>
            Gets the value for the RegionName attached property.
            </summary>
            <param name="element">The object to adapt. This is typically a container (i.e a control).</param>
            <returns>The name of the region that should be created when 
            the RegionManager is also set in this element.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionManagerAccessor.GetRegionManager(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RegionName attached property.
            </summary>
            <param name="element">The target element.</param>
            <returns>The <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> attached to the <paramref name="element"/> element.</returns>
        </member>
        <member name="E:Microsoft.Practices.Prism.Regions.IRegionManagerAccessor.UpdatingRegions">
            <summary>
            Notification used by attached behaviors to update the region managers appropriatelly if needed to.
            </summary>
            <remarks>This event uses weak references to the event handler to prevent this static event of keeping the
            target element longer than expected. For security reasons, to use weak delegates in Silverlight you must provide
            a delegate that is available in the public API of the class (no private or anonymous delegates allowed).</remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.DefaultRegionManagerAccessor.GetRegionName(System.Windows.DependencyObject)">
            <summary>
            Gets the value for the RegionName attached property.
            </summary>
            <param name="element">The object to adapt. This is typically a container (i.e a control).</param>
            <returns>The name of the region that should be created when 
            the RegionManager is also set in this element.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.DefaultRegionManagerAccessor.GetRegionManager(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the RegionName attached property.
            </summary>
            <param name="element">The target element.</param>
            <returns>The <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> attached to the <paramref name="element"/> element.</returns>
        </member>
        <member name="E:Microsoft.Practices.Prism.Regions.DefaultRegionManagerAccessor.UpdatingRegions">
            <summary>
            Notification used by attached behaviors to update the region managers appropriatelly if needed to.
            </summary>
            <remarks>This event uses weak references to the event handler to prevent this static event of keeping the
            target element longer than expected. For security reasons, to use weak delegates in Silverlight you must provide
            a delegate that is available in the public API of the class (no private or anonymous delegates allowed).</remarks>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.IConfirmNavigationRequest">
            <summary>
            Provides a way for objects involved in navigation to determine if a navigation request should continue.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.INavigationAware">
            <summary>
            Provides a way for objects involved in navigation to be notified of navigation activities.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.INavigationAware.OnNavigatedTo(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
            Called when the implementer has been navigated to.
            </summary>
            <param name="navigationContext">The navigation context.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.INavigationAware.IsNavigationTarget(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
            Called to determine if this instance can handle the navigation request.
            </summary>
            <param name="navigationContext">The navigation context.</param>
            <returns>
            <see langword="true"/> if this instance accepts the navigation request; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.INavigationAware.OnNavigatedFrom(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
            Called when the implementer is being navigated away from.
            </summary>
            <param name="navigationContext">The navigation context.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IConfirmNavigationRequest.ConfirmNavigationRequest(Microsoft.Practices.Prism.Regions.NavigationContext,System.Action{System.Boolean})">
            <summary>
            Determines whether this instance accepts being navigated away from.
            </summary>
            <param name="navigationContext">The navigation context.</param>
            <param name="continuationCallback">The callback to indicate when navigation can proceed.</param>
            <remarks>
            Implementors of this method do not need to invoke the callback before this method is completed,
            but they must ensure the callback is eventually invoked.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.IRegionBehaviorCollection">
            <summary>
            Defines the interface for a collection of <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/> classes on a Region.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionBehaviorCollection.Add(System.String,Microsoft.Practices.Prism.Regions.IRegionBehavior)">
            <summary>
            Adds a <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/> to the collection, using the specified key as an indexer. 
            </summary>
            <param name="key">
            The key that specifies the type of <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/> that's added. 
            </param>
            <param name="regionBehavior">The <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/> to add.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionBehaviorCollection.ContainsKey(System.String)">
            <summary>
            Checks if a <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/> with the specified key is already present. 
            </summary>
            <param name="key">The key to use to find a particular <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/>.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegionBehaviorCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/> with the specified key.
            </summary>
            <value>The registered <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/></value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.IRegionBehaviorFactory">
            <summary>
            Interface for RegionBehaviorFactories. This factory allows the registration of the default set of RegionBehaviors, that will
            be added to the <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehaviorCollection"/>s of all <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>s, unless overridden on a 'per-region' basis. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionBehaviorFactory.AddIfMissing(System.String,System.Type)">
            <summary>
            Adds a particular type of RegionBehavior if it was not already registered. the <paramref name="behaviorKey"/> string is used to check if the behavior is already present
            </summary>
            <param name="behaviorKey">The behavior key that's used to find if a certain behavior is already added.</param>
            <param name="behaviorType">Type of the behavior to add. .</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionBehaviorFactory.ContainsKey(System.String)">
            <summary>
            Determines whether a behavior with the specified key already exists
            </summary>
            <param name="behaviorKey">The behavior key.</param>
            <returns>
            <see langword="true"/> if a behavior with the specified key is present; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionBehaviorFactory.CreateFromKey(System.String)">
            <summary>
            Creates an instance of the Behaviortype that's registered using the specified key.
            </summary>
            <param name="key">The key that's used to register a behavior type.</param>
            <returns>The created behavior. </returns>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.IRegionCollection">
            <summary>
            Defines a collection of <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> uniquely identified by their Name.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionCollection.Add(Microsoft.Practices.Prism.Regions.IRegion)">
            <summary>
            Adds a <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> to the collection.
            </summary>
            <param name="region">Region to be added to the collection.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionCollection.Remove(System.String)">
            <summary>
            Removes a <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> from the collection.
            </summary>
            <param name="regionName">Name of the region to be removed.</param>
            <returns><see langword="true"/> if the region was removed from the collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionCollection.ContainsRegionWithName(System.String)">
            <summary>
            Checks if the collection contains a <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> with the name received as parameter.
            </summary>
            <param name="regionName">The name of the region to look for.</param>
            <returns><see langword="true"/> if the region is contained in the collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegionCollection.Item(System.String)">
            <summary>
            Gets the IRegion with the name received as index.
            </summary>
            <param name="regionName">Name of the region to be retrieved.</param>
            <returns>The <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> identified with the requested name.</returns>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.IRegionManager">
            <summary>
            Defines an interface to manage a set of <see cref="T:Microsoft.Practices.Prism.Regions.IRegion">regions</see> and to attach regions to objects (typically controls).
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionManager.CreateRegionManager">
            <summary>
            Creates a new region manager.
            </summary>
            <returns>A new region manager that can be used as a different scope from the current region manager.</returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegionManager.Regions">
            <summary>
            Gets a collection of <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> that identify each region by name. You can use this collection to add or remove regions to the current region manager.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.IRegionMemberLifetime">
            <summary>
            When implemented, allows an instance placed in a <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>
            that uses a <see cref="T:Microsoft.Practices.Prism.Regions.Behaviors.RegionMemberLifetimeBehavior"/> to indicate
            it should be removed when it transitions from an activated to deactived state.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegionMemberLifetime.KeepAlive">
            <summary>
            Gets a value indicating whether this instance should be kept-alive upon deactivation.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.IRegionNavigationContentLoader">
            <summary>
            Identifies the view in a region that is the target of a navigation request.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionNavigationContentLoader.LoadContent(Microsoft.Practices.Prism.Regions.IRegion,Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
            Gets the content to which the navigation request represented by <paramref name="navigationContext"/> applies.
            </summary>
            <remarks>
            If none of the items in the region match the target of the navigation request, a new item
            will be created and added to the region.
            </remarks>
            <param name="region">The region.</param>
            <param name="navigationContext">The context representing the navigation request.</param>
            <returns>The item to be the target of the navigation request.</returns>
            <exception cref="T:System.InvalidOperationException">when a new item cannot be created for the navigation request.</exception>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.IRegionNavigationJournal">
            <summary>
            Provides journaling of current, back, and forward navigation within regions.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionNavigationJournal.GoBack">
            <summary>
            Navigates to the most recent entry in the back navigation history, or does nothing if no entry exists in back navigation.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionNavigationJournal.GoForward">
            <summary>
            Navigates to the most recent entry in the forward navigation history, or does nothing if no entry exists in forward navigation.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionNavigationJournal.RecordNavigation(Microsoft.Practices.Prism.Regions.IRegionNavigationJournalEntry)">
            <summary>
            Records the navigation to the entry..
            </summary>
            <param name="entry">The entry to record.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionNavigationJournal.Clear">
            <summary>
            Clears the journal of current, back, and forward navigation histories.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegionNavigationJournal.CanGoBack">
            <summary>
            Gets a value that indicates whether there is at least one entry in the back navigation history.
            </summary>
            <value>
            <c>true</c> if the journal can go back; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegionNavigationJournal.CanGoForward">
            <summary>
            Gets a value that indicates whether there is at least one entry in the forward navigation history.
            </summary>
            <value>
            	<c>true</c> if this instance can go forward; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegionNavigationJournal.CurrentEntry">
            <summary>
            Gets the current navigation entry of the content that is currently displayed.
            </summary>
            <value>The current entry.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegionNavigationJournal.NavigationTarget">
            <summary>
            Gets or sets the target that implements INavigateAsync.
            </summary>
            <value>The INavigate implementation.</value>
            <remarks>
            This is set by the owner of this journal.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.IRegionNavigationJournalEntry">
            <summary>
            An entry in an IRegionNavigationJournal representing the URI navigated to.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegionNavigationJournalEntry.Uri">
            <summary>
            Gets or sets the URI.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.IRegionNavigationService">
            <summary>
            Provides navigation for regions.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegionNavigationService.Region">
            <summary>
            Gets or sets the region owning this service.
            </summary>
            <value>A Region.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.IRegionNavigationService.Journal">
            <summary>
            Gets the journal.
            </summary>
            <value>The journal.</value>
        </member>
        <member name="E:Microsoft.Practices.Prism.Regions.IRegionNavigationService.Navigating">
            <summary>
            Raised when the region is about to be navigated to content.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.Prism.Regions.IRegionNavigationService.Navigated">
            <summary>
            Raised when the region is navigated to content.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.Prism.Regions.IRegionNavigationService.NavigationFailed">
            <summary>
            Raised when a navigation request fails.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.IRegionViewRegistry">
            <summary>
            Defines the interface for the registry of region's content.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionViewRegistry.GetContents(System.String)">
            <summary>
            Returns the contents associated with a region name.
            </summary>
            <param name="regionName">Region name for which contents are requested.</param>
            <returns>Collection of contents associated with the <paramref name="regionName"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionViewRegistry.RegisterViewWithRegion(System.String,System.Type)">
            <summary>
            Registers a content type with a region name.
            </summary>
            <param name="regionName">Region name to which the <paramref name="viewType"/> will be registered.</param>
            <param name="viewType">Content type to be registered for the <paramref name="regionName"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IRegionViewRegistry.RegisterViewWithRegion(System.String,System.Func{System.Object})">
            <summary>
            Registers a delegate that can be used to retrieve the content associated with a region name. 
            </summary>
            <param name="regionName">Region name to which the <paramref name="getContentDelegate"/> will be registered.</param>
            <param name="getContentDelegate">Delegate used to retrieve the content associated with the <paramref name="regionName"/>.</param>
        </member>
        <member name="E:Microsoft.Practices.Prism.Regions.IRegionViewRegistry.ContentRegistered">
            <summary>
            Event triggered when a content is registered to a region name.
            </summary>
            <remarks>
            This event uses weak references to the event handler to prevent this service (typically a singleton) of keeping the
            target element longer than expected. For security reasons, to use weak delegates in Silverlight you must provide
            a delegate that is available in the public API of the class (no private or anonymous delegates allowed).
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.ItemMetadata">
            <summary>
            Defines a class that wraps an item and adds metadata for it.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Regions.ItemMetadata.NameProperty">
            <summary>
            The name of the wrapped item.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Regions.ItemMetadata.IsActiveProperty">
            <summary>
            Value indicating whether the wrapped item is considered active.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ItemMetadata.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Regions.ItemMetadata"/>.
            </summary>
            <param name="item">The item to wrap.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ItemMetadata.InvokeMetadataChanged">
            <summary>
            Explicitly invokes <see cref="E:Microsoft.Practices.Prism.Regions.ItemMetadata.MetadataChanged"/> to notify listeners.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.ItemMetadata.Item">
            <summary>
            Gets the wrapped item.
            </summary>
            <value>The wrapped item.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.ItemMetadata.Name">
            <summary>
            Gets or sets a name for the wrapped item.
            </summary>
            <value>The name of the wrapped item.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.ItemMetadata.IsActive">
            <summary>
            Gets or sets a value indicating whether the wrapped item is considered active.
            </summary>
            <value><see langword="true" /> if the item should be considered active; otherwise <see langword="false" />.</value>
        </member>
        <member name="E:Microsoft.Practices.Prism.Regions.ItemMetadata.MetadataChanged">
            <summary>
            Occurs when metadata on the item changes.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.ItemsControlRegionAdapter">
            <summary>
            Adapter that creates a new <see cref="T:Microsoft.Practices.Prism.Regions.AllActiveRegion"/> and binds all
            the views to the adapted <see cref="T:System.Windows.Controls.ItemsControl"/>. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ItemsControlRegionAdapter.#ctor(Microsoft.Practices.Prism.Regions.IRegionBehaviorFactory)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Regions.ItemsControlRegionAdapter"/>.
            </summary>
            <param name="regionBehaviorFactory">The factory used to create the region behaviors to attach to the created regions.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ItemsControlRegionAdapter.Adapt(Microsoft.Practices.Prism.Regions.IRegion,System.Windows.Controls.ItemsControl)">
            <summary>
            Adapts an <see cref="T:System.Windows.Controls.ItemsControl"/> to an <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
            </summary>
            <param name="region">The new region being used.</param>
            <param name="regionTarget">The object to adapt.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ItemsControlRegionAdapter.CreateRegion">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.Prism.Regions.AllActiveRegion"/>.
            </summary>
            <returns>A new instance of <see cref="T:Microsoft.Practices.Prism.Regions.AllActiveRegion"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.IViewsCollection">
            <summary>
            Defines a view of a collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.IViewsCollection.Contains(System.Object)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="value">The object to locate in the collection.</param>
            <returns><see langword="true" /> if <paramref name="value"/> is found in the collection; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.NavigationAsyncExtensions">
            <summary>
            Provides additional methods to the <see cref="T:Microsoft.Practices.Prism.Regions.INavigateAsync"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.NavigationAsyncExtensions.RequestNavigate(Microsoft.Practices.Prism.Regions.INavigateAsync,System.String)">
            <summary>
            Initiates navigation to the target specified by the <paramref name="target"/>.
            </summary>
            <param name="navigation">The navigation object.</param>
            <param name="target">The navigation target</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.NavigationAsyncExtensions.RequestNavigate(Microsoft.Practices.Prism.Regions.INavigateAsync,System.String,System.Action{Microsoft.Practices.Prism.Regions.NavigationResult})">
            <summary>
            Initiates navigation to the target specified by the <paramref name="target"/>.
            </summary>
            <param name="navigation">The navigation object.</param>
            <param name="target">The navigation target</param>
            <param name="navigationCallback">The callback executed when the navigation request is completed.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.NavigationAsyncExtensions.RequestNavigate(Microsoft.Practices.Prism.Regions.INavigateAsync,System.Uri)">
            <summary>
            Initiates navigation to the target specified by the <see cref="T:System.Uri"/>.
            </summary>
            <param name="navigation">The navigation object.</param>
            <param name="target">The navigation target</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.NavigationContext">
            <summary>
            Encapsulates information about a navigation request.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.NavigationContext.#ctor(Microsoft.Practices.Prism.Regions.IRegionNavigationService,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.NavigationContext"/> class for a region name and a 
            <see cref="P:Microsoft.Practices.Prism.Regions.NavigationContext.Uri"/>.
            </summary>
            <param name="navigationService">The navigation service.</param>
            <param name="uri">The Uri.</param>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.NavigationContext.NavigationService">
            <summary>
            Gets the region navigation service.
            </summary>
            <value>The navigation service.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.NavigationContext.Uri">
            <summary>
            Gets the navigation URI.
            </summary>
            <value>The navigation URI.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.NavigationContext.Parameters">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.Prism.UriQuery"/> extracted from the URI.
            </summary>
            <value>The URI query.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.NavigationResult">
            <summary>
            Represents the result of navigating to a URI.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.NavigationResult.#ctor(Microsoft.Practices.Prism.Regions.NavigationContext,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.NavigationResult"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.NavigationResult.#ctor(Microsoft.Practices.Prism.Regions.NavigationContext,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.NavigationResult"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="error">The error.</param>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.NavigationResult.Result">
            <summary>
            Gets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.NavigationResult.Error">
            <summary>
            Gets an exception that occurred while navigating.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.NavigationResult.Context">
            <summary>
            Gets the navigation context.
            </summary>
            <value>The navigation context.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.RegionAdapterMappings">
            <summary>
            This class maps <see cref="T:System.Type"/> with <see cref="T:Microsoft.Practices.Prism.Regions.IRegionAdapter"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionAdapterMappings.RegisterMapping(System.Type,Microsoft.Practices.Prism.Regions.IRegionAdapter)">
            <summary>
            Registers the mapping between a type and an adapter.
            </summary>
            <param name="controlType">The type of the control.</param>
            <param name="adapter">The adapter to use with the <paramref name="controlType"/> type.</param>
            <exception cref="T:System.ArgumentNullException">When any of <paramref name="controlType"/> or <paramref name="adapter"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">If a mapping for <paramref name="controlType"/> already exists.</exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionAdapterMappings.GetMapping(System.Type)">
            <summary>
            Returns the adapter associated with the type provided.
            </summary>
            <param name="controlType">The type to obtain the <seealso cref="T:Microsoft.Practices.Prism.Regions.IRegionAdapter"/> mapped.</param>
            <returns>The <seealso cref="T:Microsoft.Practices.Prism.Regions.IRegionAdapter"/> mapped to the <paramref name="controlType"/>.</returns>
            <remarks>This class will look for a registered type for <paramref name="controlType"/> and if there is not any,
            it will look for a registered type for any of its ancestors in the class hierarchy.
            If there is no registered type for <paramref name="controlType"/> or any of its ancestors,
            an exception will be thrown.</remarks>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">When there is no registered type for <paramref name="controlType"/> or any of its ancestors.</exception>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.RegionBehaviorCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/> instances, that are stored and retrieved by Key.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionBehaviorCollection.#ctor(Microsoft.Practices.Prism.Regions.IRegion)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.RegionBehaviorCollection"/> class and associates it with a region.
            </summary>
            <param name="region">The region to associate the behavior collection with.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionBehaviorCollection.Add(System.String,Microsoft.Practices.Prism.Regions.IRegionBehavior)">
            <summary>
            Adds a <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/> to the collection, using the specified key as an indexer.
            </summary>
            <param name="key">The key that specifies the type of <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/> that's added.</param>
            <param name="regionBehavior">The <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/> to add.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown is the <paramref name="key"/> parameter is Null, 
            or if the <paramref name="regionBehavior"/> parameter is Null.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if a behavior with the specified Key parameter already exists.</exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionBehaviorCollection.ContainsKey(System.String)">
            <summary>
            Checks if a <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/> with the specified key is already present.
            </summary>
            <param name="key">The key to use to find a particular <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionBehaviorCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionBehaviorCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.RegionBehaviorCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/> with the specified key.
            </summary>
            <value>The RegionBehavior that's registered with the key.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.RegionBehaviorFactory">
            <summary>
            Defines a factory that allows the registration of the default set of <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehavior"/>, that will
            be added to the <see cref="T:Microsoft.Practices.Prism.Regions.IRegionBehaviorCollection"/> of all <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>s, unless overridden on a 'per-region' basis. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionBehaviorFactory.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Regions.RegionBehaviorFactory"/>.
            </summary>
            <param name="serviceLocator"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> used to create the instance of the behavior from its <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionBehaviorFactory.AddIfMissing(System.String,System.Type)">
            <summary>
            Adds a particular type of RegionBehavior if it was not already registered. The <paramref name="behaviorKey"/> string is used to check if the behavior is already present
            </summary>
            <param name="behaviorKey">The behavior key that's used to find if a certain behavior is already added.</param>
            <param name="behaviorType">Type of the behavior to add.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionBehaviorFactory.CreateFromKey(System.String)">
            <summary>
            Creates an instance of the behavior <see cref="T:System.Type"/> that is registered using the specified key.
            </summary>
            <param name="key">The key that is used to register a behavior type.</param>
            <returns>A new instance of the behavior. </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionBehaviorFactory.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionBehaviorFactory.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionBehaviorFactory.ContainsKey(System.String)">
            <summary>
            Determines whether a behavior with the specified key already exists.
            </summary>
            <param name="behaviorKey">The behavior key.</param>
            <returns>
            <see langword="true"/> if a behavior with the specified key is present; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.RegionContext">
            <summary>
            Class that holds methods to Set and Get the RegionContext from a DependencyObject. 
            
            RegionContext allows sharing of contextual information between the view that's hosting a <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>
            and any views that are inside the Region. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionContext.GetObservableContext(System.Windows.DependencyObject)">
            <summary>
            Returns an <see cref="T:Microsoft.Practices.Prism.ObservableObject`1"/> wrapper around the RegionContext value. The RegionContext
            will be set on any views (dependency objects) that are inside the <see cref="P:Microsoft.Practices.Prism.Regions.IRegion.Views"/> collection by 
            the <see cref="T:Microsoft.Practices.Prism.Regions.Behaviors.BindRegionContextToDependencyObjectBehavior"/> Behavior.
            The RegionContext will also be set to the control that hosts the Region, by the <see cref="T:Microsoft.Practices.Prism.Regions.Behaviors.SyncRegionContextWithHostBehavior"/> Behavior.
            
            If the <see cref="T:Microsoft.Practices.Prism.ObservableObject`1"/> wrapper does not already exist, an empty one will be created. This way, an observer can 
            notify when the value is set for the first time. 
            </summary>
            <param name="view">Any view that hold the RegionContext value. </param>
            <returns>Wrapper around the Regioncontext value. </returns>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.RegionManager">
            <summary>
            This class is responsible for maintaining a collection of regions and attaching regions to controls. 
            </summary>
            <remarks>
            This class supplies the attached properties that can be used for simple region creation from XAML.
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionNameProperty">
            <summary>
            Identifies the RegionName attached property.
            </summary>
            <remarks>
            When a control has both the <see cref="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionNameProperty"/> and
            <see cref="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionManagerProperty"/> attached properties set to
            a value different than <see langword="null"/> and there is a
            <see cref="T:Microsoft.Practices.Prism.Regions.IRegionAdapter"/> mapping registered for the control, it
            will create and adapt a new region for that control, and register it
            in the <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> with the specified region name.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionManager.SetRegionName(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the <see cref="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionNameProperty"/> attached property.
            </summary>
            <param name="regionTarget">The object to adapt. This is typically a container (i.e a control).</param>
            <param name="regionName">The name of the region to register.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionManager.GetRegionName(System.Windows.DependencyObject)">
            <summary>
            Gets the value for the <see cref="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionNameProperty"/> attached property.
            </summary>
            <param name="regionTarget">The object to adapt. This is typically a container (i.e a control).</param>
            <returns>The name of the region that should be created when 
            <see cref="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionManagerProperty"/> is also set in this element.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionManager.GetObservableRegion(System.Windows.DependencyObject)">
            <summary>
            Returns an <see cref="T:Microsoft.Practices.Prism.ObservableObject`1"/> wrapper that can hold an <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>. Using this wrapper
            you can detect when an <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> has been created by the <see cref="T:Microsoft.Practices.Prism.Regions.RegionAdapterBase`1"/>. 
            
            If the <see cref="T:Microsoft.Practices.Prism.ObservableObject`1"/> wrapper does not yet exist, a new wrapper will be created. When the region
            gets created and assigned to the wrapper, you can use the <see cref="E:Microsoft.Practices.Prism.ObservableObject`1.PropertyChanged"/> event 
            to get notified of that change. 
            </summary>
            <param name="view">The view that will host the region. </param>
            <returns>Wrapper that can hold an <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> value and can notify when the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> value changes. </returns>
        </member>
        <member name="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionManagerProperty">
            <summary>
            Identifies the RegionManager attached property.
            </summary>
            <remarks>
            When a control has both the <see cref="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionNameProperty"/> and
            <see cref="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionManagerProperty"/> attached properties set to
            a value different than <see langword="null"/> and there is a
            <see cref="T:Microsoft.Practices.Prism.Regions.IRegionAdapter"/> mapping registered for the control, it
            will create and adapt a new region for that control, and register it
            in the <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> with the specified region name.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionManager.GetRegionManager(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionNameProperty"/> attached property.
            </summary>
            <param name="target">The target element.</param>
            <returns>The <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> attached to the <paramref name="target"/> element.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionManager.SetRegionManager(System.Windows.DependencyObject,Microsoft.Practices.Prism.Regions.IRegionManager)">
            <summary>
            Sets the <see cref="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionManagerProperty"/> attached property.
            </summary>
            <param name="target">The target element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionContextProperty">
            <summary>
            Identifies the RegionContext attached property.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionManager.GetRegionContext(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionContextProperty"/> attached property.
            </summary>
            <param name="target">The target element.</param>
            <returns>The region context to pass to the contained views.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionManager.SetRegionContext(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the <see cref="F:Microsoft.Practices.Prism.Regions.RegionManager.RegionContextProperty"/> attached property.
            </summary>
            <param name="target">The target element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionManager.UpdateRegions">
            <summary>
            Notifies attached behaviors to update the region managers appropriatelly if needed to. 
            </summary>
            <remarks>
            This method is normally called internally, and there is usually no need to call this from user code.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionManager.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Regions.RegionManager"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionManager.CreateRegionManager">
            <summary>
            Creates a new region manager.
            </summary>
            <returns>A new region manager that can be used as a different scope from the current region manager.</returns>
        </member>
        <member name="E:Microsoft.Practices.Prism.Regions.RegionManager.UpdatingRegions">
            <summary>
            Notification used by attached behaviors to update the region managers appropriatelly if needed to.
            </summary>
            <remarks>This event uses weak references to the event handler to prevent this static event of keeping the
            target element longer than expected. For security reasons, to use weak delegates in Silverlight you must provide
            a delegate that is available in the public API of the class (no private or anonymous delegates allowed).</remarks>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.RegionManager.Regions">
            <summary>
            Gets a collection of <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> that identify each region by name. You can use this collection to add or remove regions to the current region manager.
            </summary>
            <value>A <see cref="T:Microsoft.Practices.Prism.Regions.IRegionCollection"/> with all the registered regions.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.RegionManagerExtensions">
            <summary>
            Class that creates a fluent interface for the <see cref="T:Microsoft.Practices.Prism.Regions.IRegionManager"/> class, with respect to 
            adding views to regions (View Injection pattern), registering view types to regions (View Discovery pattern)
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionManagerExtensions.AddToRegion(Microsoft.Practices.Prism.Regions.IRegionManager,System.String,System.Object)">
            <summary>
                Add a view to the Views collection of a Region. Note that the region must already exist in this regionmanager. 
            </summary>
            <param name="regionManager">The regionmanager that this extension method effects.</param>
            <param name="regionName">The name of the region to add a view to</param>
            <param name="view">The view to add to the views collection</param>
            <returns>The RegionManager, to easily add several views. </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionManagerExtensions.RegisterViewWithRegion(Microsoft.Practices.Prism.Regions.IRegionManager,System.String,System.Type)">
            <summary>
            Associate a view with a region, by registering a type. When the region get's displayed
            this type will be resolved using the ServiceLocator into a concrete instance. The instance
            will be added to the Views collection of the region
            </summary>
            <param name="regionManager">The regionmanager that this extension method effects.</param>
            <param name="regionName">The name of the region to associate the view with.</param>
            <param name="viewType">The type of the view to register with the </param>
            <returns>The regionmanager, for adding several views easily</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionManagerExtensions.RegisterViewWithRegion(Microsoft.Practices.Prism.Regions.IRegionManager,System.String,System.Func{System.Object})">
            <summary>
            Associate a view with a region, using a delegate to resolve a concreate instance of the view. 
            When the region get's displayed, this delelgate will be called and the result will be added to the
            views collection of the region. 
            </summary>
            <param name="regionManager">The regionmanager that this extension method effects.</param>
            <param name="regionName">The name of the region to associate the view with.</param>
            <param name="getContentDelegate">The delegate used to resolve a concreate instance of the view.</param>
            <returns>The regionmanager, for adding several views easily</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionManagerExtensions.Add(Microsoft.Practices.Prism.Regions.IRegionCollection,System.String,Microsoft.Practices.Prism.Regions.IRegion)">
            <summary>
            Adds a region to the regionmanager with the name received as argument.
            </summary>
            <param name="regionCollection">The regionmanager's collection of regions.</param>
            <param name="regionName">The name to be given to the region.</param>
            <param name="region">The region to be added to the regionmanager.</param>        
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="region"/> or <paramref name="regionCollection"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="regionName"/> and <paramref name="region"/>'s name do not match and the <paramref name="region"/> <see cref="P:Microsoft.Practices.Prism.Regions.IRegion.Name"/> is not <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionManagerExtensions.RequestNavigate(Microsoft.Practices.Prism.Regions.IRegionManager,System.String,System.Uri,System.Action{Microsoft.Practices.Prism.Regions.NavigationResult})">
            <summary>
            Navigates the specified region manager.
            </summary>
            <param name="regionManager">The regionmanager that this extension method effects.</param>
            <param name="regionName">The name of the region to call Navigate on.</param>
            <param name="source">The URI of the content to display.</param>
            <param name="navigationCallback">The navigation callback.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionManagerExtensions.RequestNavigate(Microsoft.Practices.Prism.Regions.IRegionManager,System.String,System.Uri)">
            <summary>
            Navigates the specified region manager.
            </summary>
            <param name="regionManager">The regionmanager that this extension method effects.</param>
            <param name="regionName">The name of the region to call Navigate on.</param>
            <param name="source">The URI of the content to display.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionManagerExtensions.RequestNavigate(Microsoft.Practices.Prism.Regions.IRegionManager,System.String,System.String,System.Action{Microsoft.Practices.Prism.Regions.NavigationResult})">
            <summary>
            Navigates the specified region manager.
            </summary>
            <param name="regionManager">The regionmanager that this extension method effects.</param>
            <param name="regionName">The name of the region to call Navigate on.</param>
            <param name="source">The URI of the content to display.</param>
            <param name="navigationCallback">The navigation callback.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionManagerExtensions.RequestNavigate(Microsoft.Practices.Prism.Regions.IRegionManager,System.String,System.String)">
            <summary>
            Navigates the specified region manager.
            </summary>
            <param name="regionManager">The regionmanager that this extension method effects.</param>
            <param name="regionName">The name of the region to call Navigate on.</param>
            <param name="source">The URI of the content to display.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.RegionMemberLifetimeAttribute">
            <summary>
            When <see cref="T:Microsoft.Practices.Prism.Regions.RegionMemberLifetimeAttribute"/> is applied to class provides data
            the <see cref="T:Microsoft.Practices.Prism.Regions.Behaviors.RegionMemberLifetimeBehavior"/> can use to determine if the instance should
            be removed when it is deactivated.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionMemberLifetimeAttribute.#ctor">
            <summary>
            Instantiates an instance of <see cref="T:Microsoft.Practices.Prism.Regions.RegionMemberLifetimeAttribute"/>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.RegionMemberLifetimeAttribute.KeepAlive">
            <summary>
             Determines if the region member should be kept-alive
             when deactivated.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.RegionNavigationContentLoader">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.Prism.Regions.IRegionNavigationContentLoader"/> that relies on a <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>
            to create new views when necessary.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionNavigationContentLoader.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.RegionNavigationContentLoader"/> class with a service locator.
            </summary>
            <param name="serviceLocator">The service locator.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionNavigationContentLoader.LoadContent(Microsoft.Practices.Prism.Regions.IRegion,Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
            Gets the view to which the navigation request represented by <paramref name="navigationContext"/> applies.
            </summary>
            <param name="region">The region.</param>
            <param name="navigationContext">The context representing the navigation request.</param>
            <returns>
            The view to be the target of the navigation request.
            </returns>
            <remarks>
            If none of the views in the region can be the target of the navigation request, a new view
            is created and added to the region.
            </remarks>
            <exception cref="T:System.ArgumentException">when a new view cannot be created for the navigation request.</exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionNavigationContentLoader.CreateNewRegionItem(System.String)">
            <summary>
            Provides a new item for the region based on the supplied candidate target contract name.
            </summary>
            <param name="candidateTargetContract">The target contract to build.</param>
            <returns>An instance of an item to put into the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionNavigationContentLoader.GetContractFromNavigationContext(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
            Returns the candidate TargetContract based on the <see cref="T:Microsoft.Practices.Prism.Regions.NavigationContext"/>.
            </summary>
            <param name="navigationContext">The navigation contract.</param>
            <returns>The candidate contract to seek within the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> and to use, if not found, when resolving from the container.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionNavigationContentLoader.GetCandidatesFromRegion(Microsoft.Practices.Prism.Regions.IRegion,System.String)">
            <summary>
            Returns the set of candidates that may satisfiy this navigation request.
            </summary>
            <param name="region">The region containing items that may satisfy the navigation request.</param>
            <param name="candidateNavigationContract">The candidate navigation target as determined by <see cref="M:Microsoft.Practices.Prism.Regions.RegionNavigationContentLoader.GetContractFromNavigationContext(Microsoft.Practices.Prism.Regions.NavigationContext)"/></param>
            <returns>An enumerable of candidate objects from the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/></returns>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.RegionNavigationEventArgs">
            <summary>
            EventArgs used with the Navigated event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionNavigationEventArgs.#ctor(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.RegionNavigationEventArgs"/> class.
            </summary>
            <param name="navigationContext">The navigation context.</param>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.RegionNavigationEventArgs.NavigationContext">
            <summary>
            Gets the navigation context.
            </summary>
            <value>The navigation context.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.RegionNavigationEventArgs.Uri">
            <summary>
            Gets the navigation URI
            </summary>
            <value>The URI.</value>
            <remarks>
            This is a convenience accessor around NavigationContext.Uri.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.RegionNavigationFailedEventArgs">
            <summary>
            EventArgs used with the NavigationFailed event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionNavigationFailedEventArgs.#ctor(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.RegionNavigationEventArgs"/> class.
            </summary>
            <param name="navigationContext">The navigation context.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionNavigationFailedEventArgs.#ctor(Microsoft.Practices.Prism.Regions.NavigationContext,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.RegionNavigationFailedEventArgs"/> class.
            </summary>
            <param name="navigationContext">The navigation context.</param>
            <param name="error">The error.</param>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.RegionNavigationFailedEventArgs.NavigationContext">
            <summary>
            Gets the navigation context.
            </summary>
            <value>The navigation context.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.RegionNavigationFailedEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The <see cref="T:System.Exception"/>, or <see langword="null"/> if the failure was not caused by an exception.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.RegionNavigationFailedEventArgs.Uri">
            <summary>
            Gets the navigation URI
            </summary>
            <value>The URI.</value>
            <remarks>
            This is a convenience accessor around NavigationContext.Uri.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.RegionNavigationJournal">
            <summary>
            Provides journaling of current, back, and forward navigation within regions.    
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionNavigationJournal.GoBack">
            <summary>
            Navigates to the most recent entry in the back navigation history, or does nothing if no entry exists in back navigation.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionNavigationJournal.GoForward">
            <summary>
            Navigates to the most recent entry in the forward navigation history, or does nothing if no entry exists in forward navigation.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionNavigationJournal.RecordNavigation(Microsoft.Practices.Prism.Regions.IRegionNavigationJournalEntry)">
            <summary>
            Records the navigation to the entry..
            </summary>
            <param name="entry">The entry to record.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionNavigationJournal.Clear">
            <summary>
            Clears the journal of current, back, and forward navigation histories.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.RegionNavigationJournal.NavigationTarget">
            <summary>
            Gets or sets the target that implements INavigate.
            </summary>
            <value>The INavigate implementation.</value>
            <remarks>
            This is set by the owner of this journal.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.RegionNavigationJournal.CurrentEntry">
            <summary>
            Gets the current navigation entry of the content that is currently displayed.
            </summary>
            <value>The current entry.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.RegionNavigationJournal.CanGoBack">
            <summary>
            Gets a value that indicates whether there is at least one entry in the back navigation history.
            </summary>
            <value><c>true</c> if the journal can go back; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.RegionNavigationJournal.CanGoForward">
            <summary>
            Gets a value that indicates whether there is at least one entry in the forward navigation history.
            </summary>
            <value>
            	<c>true</c> if this instance can go forward; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.RegionNavigationJournalEntry">
            <summary>
            An entry in an IRegionNavigationJournal representing the URI navigated to.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionNavigationJournalEntry.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.RegionNavigationJournalEntry.Uri">
            <summary>
            Gets or sets the URI.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.RegionNavigationService">
            <summary>
            Provides navigation for regions.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionNavigationService.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator,Microsoft.Practices.Prism.Regions.IRegionNavigationContentLoader,Microsoft.Practices.Prism.Regions.IRegionNavigationJournal)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.RegionNavigationService"/> class.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="regionNavigationContentLoader">The navigation target handler.</param>
            <param name="journal">The journal.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionNavigationService.RequestNavigate(System.Uri,System.Action{Microsoft.Practices.Prism.Regions.NavigationResult})">
            <summary>
            Initiates navigation to the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="navigationCallback">A callback to execute when the navigation request is completed.</param>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.RegionNavigationService.Region">
            <summary>
            Gets or sets the region.
            </summary>
            <value>The region.</value>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.RegionNavigationService.Journal">
            <summary>
            Gets the journal.
            </summary>
            <value>The journal.</value>
        </member>
        <member name="E:Microsoft.Practices.Prism.Regions.RegionNavigationService.Navigating">
            <summary>
            Raised when the region is about to be navigated to content.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.Prism.Regions.RegionNavigationService.Navigated">
            <summary>
            Raised when the region is navigated to content.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.Prism.Regions.RegionNavigationService.NavigationFailed">
            <summary>
            Raised when a navigation request fails.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.RegionViewRegistry">
            <summary>
            Defines a registry for the content of the regions used on View Discovery composition.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionViewRegistry.#ctor(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.RegionViewRegistry"/> class.
            </summary>
            <param name="locator"><see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> used to create the instance of the views from its <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionViewRegistry.GetContents(System.String)">
            <summary>
            Returns the contents registered for a region.
            </summary>
            <param name="regionName">Name of the region which content is being requested.</param>
            <returns>Collection of contents registered for the region.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionViewRegistry.RegisterViewWithRegion(System.String,System.Type)">
            <summary>
            Registers a content type with a region name.
            </summary>
            <param name="regionName">Region name to which the <paramref name="viewType"/> will be registered.</param>
            <param name="viewType">Content type to be registered for the <paramref name="regionName"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionViewRegistry.RegisterViewWithRegion(System.String,System.Func{System.Object})">
            <summary>
            Registers a delegate that can be used to retrieve the content associated with a region name. 
            </summary>
            <param name="regionName">Region name to which the <paramref name="getContentDelegate"/> will be registered.</param>
            <param name="getContentDelegate">Delegate used to retrieve the content associated with the <paramref name="regionName"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.RegionViewRegistry.CreateInstance(System.Type)">
            <summary>
            Creates an instance of a registered view <see cref="T:System.Type"/>. 
            </summary>
            <param name="type">Type of the registered view.</param>
            <returns>Instance of the registered view.</returns>
        </member>
        <member name="E:Microsoft.Practices.Prism.Regions.RegionViewRegistry.ContentRegistered">
            <summary>
            Occurs whenever a new view is registered.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.SelectorRegionAdapter">
            <summary>
            Adapter that creates a new <see cref="T:Microsoft.Practices.Prism.Regions.Region"/> and binds all
            the views to the adapted <see cref="T:System.Windows.Controls.Primitives.Selector"/>.
            It also keeps the <see cref="P:Microsoft.Practices.Prism.Regions.IRegion.ActiveViews"/> and the selected items
            of the <see cref="T:System.Windows.Controls.Primitives.Selector"/> in sync.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.SelectorRegionAdapter.#ctor(Microsoft.Practices.Prism.Regions.IRegionBehaviorFactory)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.Prism.Regions.SelectorRegionAdapter"/>.
            </summary>
            <param name="regionBehaviorFactory">The factory used to create the region behaviors to attach to the created regions.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.SelectorRegionAdapter.Adapt(Microsoft.Practices.Prism.Regions.IRegion,System.Windows.Controls.Primitives.Selector)">
            <summary>
            Adapts an <see cref="T:System.Windows.Controls.Primitives.Selector"/> to an <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
            </summary>
            <param name="region">The new region being used.</param>
            <param name="regionTarget">The object to adapt.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.SelectorRegionAdapter.AttachBehaviors(Microsoft.Practices.Prism.Regions.IRegion,System.Windows.Controls.Primitives.Selector)">
            <summary>
            Attach new behaviors.
            </summary>
            <param name="region">The region being used.</param>
            <param name="regionTarget">The object to adapt.</param>
            <remarks>
            This class attaches the base behaviors and also listens for changes in the
            activity of the region or the control selection and keeps the in sync.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.SelectorRegionAdapter.CreateRegion">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.Prism.Regions.Region"/>.
            </summary>
            <returns>A new instance of <see cref="T:Microsoft.Practices.Prism.Regions.Region"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.SingleActiveRegion">
            <summary>
            Region that allows a maximum of one active view at a time.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.SingleActiveRegion.Activate(System.Object)">
            <summary>
            Marks the specified view as active.
            </summary>
            <param name="view">The view to activate.</param>
            <remarks>If there is an active view before calling this method,
            that view will be deactivated automatically.</remarks>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.UpdateRegionsException">
            <summary>
            Represents errors that occured during the regions' update.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.UpdateRegionsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.UpdateRegionsException"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.UpdateRegionsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.UpdateRegionsException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.UpdateRegionsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.UpdateRegionsException"/> class with a specified error message and a reference 
            to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference 
            (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.ViewRegisteredEventArgs">
            <summary>
            Argument class used by the <see cref="E:Microsoft.Practices.Prism.Regions.IRegionViewRegistry.ContentRegistered"/> event when a new content is registered.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ViewRegisteredEventArgs.#ctor(System.String,System.Func{System.Object})">
            <summary>
            Initializes the ViewRegisteredEventArgs class.
            </summary>
            <param name="regionName">The region name to which the content was registered.</param>
            <param name="getViewDelegate">The content which was registered.</param>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.ViewRegisteredEventArgs.RegionName">
            <summary>
            Gets the region name to which the content was registered.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.ViewRegisteredEventArgs.GetView">
            <summary>
            Gets the content which was registered.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.ViewRegistrationException">
            <summary>
            Exception that's thrown when something goes wrong while Registering a View with a region name in the <see cref="T:Microsoft.Practices.Prism.Regions.RegionViewRegistry"/> class. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ViewRegistrationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.ViewRegistrationException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ViewRegistrationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.ViewRegistrationException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ViewRegistrationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.ViewRegistrationException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.ViewsCollection">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.Prism.Regions.IViewsCollection"/> that takes an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of <see cref="T:Microsoft.Practices.Prism.Regions.ItemMetadata"/>
            and filters it to display an <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> collection of
            <see cref="T:System.Object"/> elements (the items which the <see cref="T:Microsoft.Practices.Prism.Regions.ItemMetadata"/> wraps).
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ViewsCollection.#ctor(System.Collections.ObjectModel.ObservableCollection{Microsoft.Practices.Prism.Regions.ItemMetadata},System.Predicate{Microsoft.Practices.Prism.Regions.ItemMetadata})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.ViewsCollection"/> class.
            </summary>
            <param name="list">The list to wrap and filter.</param>
            <param name="filter">A predicate to filter the <paramref name="list"/> collection.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ViewsCollection.Contains(System.Object)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="value">The object to locate in the collection.</param>
            <returns><see langword="true" /> if <paramref name="value"/> is found in the collection; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ViewsCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ViewsCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ViewsCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Used to invoked the <see cref="E:Microsoft.Practices.Prism.Regions.ViewsCollection.CollectionChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ViewsCollection.ResetAllMonitors">
            <summary>
            Removes all monitoring of underlying MetadataItems and re-adds them.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ViewsCollection.MonitorAllMetadataItems">
            <summary>
            Adds all underlying MetadataItems to the list from the subjectCollection
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ViewsCollection.RemoveAllMetadataMonitors">
            <summary>
            Removes all monitored items from our monitoring list.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ViewsCollection.AddMetadataMonitor(Microsoft.Practices.Prism.Regions.ItemMetadata,System.Boolean)">
            <summary>
            Adds handler to monitor the MetadatItem and adds it to our monitoring list.
            </summary>
            <param name="itemMetadata"></param>
            <param name="isInList"></param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ViewsCollection.RemoveMetadataMonitor(Microsoft.Practices.Prism.Regions.ItemMetadata)">
            <summary>
            Unhooks from the MetadataItem change event and removes from our monitoring list.
            </summary>
            <param name="itemMetadata"></param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ViewsCollection.OnItemMetadataChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when any of the underlying ItemMetadata items we're monitoring changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ViewsCollection.SourceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            The event handler due to changes in the underlying collection.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Microsoft.Practices.Prism.Regions.ViewsCollection.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.ViewsCollection.SortComparison">
            <summary>
            Gets or sets the comparison used to sort the views.
            </summary>
            <value>The comparison to use.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.ViewSortHintAttribute">
            <summary>
            Provides a hint from a view to a region on how to sort the view.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.ViewSortHintAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.ViewSortHintAttribute"/> class.
            </summary>
            <param name="hint">The hint to use for sorting.</param>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.ViewSortHintAttribute.Hint">
            <summary>
            Gets  the hint.
            </summary>
            <value>The hint to use for sorting.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.ServiceLocatorExtensions">
            <summary>
            Defines extension methods for the <see cref="T:Microsoft.Practices.ServiceLocation.ServiceLocator"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.ServiceLocatorExtensions.TryResolve(Microsoft.Practices.ServiceLocation.IServiceLocator,System.Type)">
            <summary>
            Attempts to resolve specified type from the underlying <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>.
            </summary>
            <remarks>
            This will return null on any <see cref="T:Microsoft.Practices.ServiceLocation.ActivationException"/>.</remarks>
            <param name="locator">Locator to use in resolving.</param>
            <param name="type">Type to resolve.</param>
            <returns>T or null</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="locator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.Prism.ServiceLocatorExtensions.TryResolve``1(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Attempts to resolve specified type from the underlying <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>.
            </summary>
            <remarks>
            This will return null on any <see cref="T:Microsoft.Practices.ServiceLocation.ActivationException"/>.</remarks>
            <typeparam name="T">Type to resolve.</typeparam>
            <param name="locator">Locator to use in resolving.</param>
            <returns>T or null</returns>
        </member>
        <member name="T:Microsoft.Practices.Prism.UriParsingHelper">
            <summary>
            Helper class for parsing <see cref="T:System.Uri"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.UriParsingHelper.GetQuery(System.Uri)">
            <summary>
            Gets the query part of <paramref name="uri"/>.
            </summary>
            <param name="uri">The Uri.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.UriParsingHelper.GetAbsolutePath(System.Uri)">
            <summary>
            Gets the AbsolutePath part of <paramref name="uri"/>.
            </summary>
            <param name="uri">The Uri.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.UriParsingHelper.ParseQuery(System.Uri)">
            <summary>
            Parses the query of <paramref name="uri"/> into a dictionary.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.UriQuery">
            <summary>
            Represents a query in a Uri.
            </summary>
            <remarks>
            This class can be used to parse a query string to access 
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.UriQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.UriQuery"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.UriQuery.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.UriQuery"/> class with a query string.
            </summary>
            <param name="query">The query string.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.UriQuery.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.UriQuery.Add(System.String,System.String)">
            <summary>
            Adds the specified key and value.
            </summary>
            <param name="key">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.UriQuery.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance as a query string.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.Prism.UriQuery.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified key.
            </summary>
            <returns>The value for the specified key, or <see langword="null"/> if the query does not contain such a key.</returns>
        </member>
        <member name="T:Microsoft.Practices.Prism.ViewModel.ErrorsContainer`1">
            <summary>
            Manages validation errors for an object, notifying when the error state changes.
            </summary>
            <typeparam name="T">The type of the error object.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.Prism.ViewModel.ErrorsContainer`1.#ctor(System.Action{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.ViewModel.ErrorsContainer`1"/> class.
            </summary>
            <param name="raiseErrorsChanged">The action that invoked if when errors are added for an object./&gt;
            event.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.ViewModel.ErrorsContainer`1.GetErrors(System.String)">
            <summary>
            Gets the validation errors for a specified property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>The validation errors of type <typeparamref name="T"/> for the property.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.ViewModel.ErrorsContainer`1.ClearErrors``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Clears the errors for the property indicated by the property expression.
            </summary>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="propertyExpression">The expression indicating a property.</param>
            <example>
                container.ClearErrors(()=>SomeProperty);
            </example>
        </member>
        <member name="M:Microsoft.Practices.Prism.ViewModel.ErrorsContainer`1.ClearErrors(System.String)">
            <summary>
            Clears the errors for a property.
            </summary>
            <param name="propertyName">The name of th property for which to clear errors.</param>
            <example>
                container.ClearErrors("SomeProperty");
            </example>
        </member>
        <member name="M:Microsoft.Practices.Prism.ViewModel.ErrorsContainer`1.SetErrors``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the validation errors for the specified property.
            </summary>
            <typeparam name="TProperty">The property type for which to set errors.</typeparam>
            <param name="propertyExpression">The <see cref="T:System.Linq.Expressions.Expression"/> indicating the property.</param>
            <param name="propertyErrors">The list of errors to set for the property.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.ViewModel.ErrorsContainer`1.SetErrors(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the validation errors for the specified property.
            </summary>
            <remarks>
            If a change is detected then the errors changed event is raised.
            </remarks>
            <param name="propertyName">The name of the property.</param>
            <param name="newValidationResults">The new validation errors.</param>
        </member>
        <member name="P:Microsoft.Practices.Prism.ViewModel.ErrorsContainer`1.HasErrors">
            <summary>
            Gets a value indicating whether the object has validation errors. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.ViewModel.NotificationObject">
            <summary>
            Base class for items that support property notification.
            </summary>
            <remarks>
            This class provides basic support for implementing the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface and for
            marshalling execution to the UI thread.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.ViewModel.NotificationObject.RaisePropertyChanged(System.String)">
            <summary>
            Raises this object's PropertyChanged event.
            </summary>
            <param name="propertyName">The property that has a new value.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.ViewModel.NotificationObject.RaisePropertyChanged(System.String[])">
            <summary>
            Raises this object's PropertyChanged event for each of the properties.
            </summary>
            <param name="propertyNames">The properties that have a new value.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.ViewModel.NotificationObject.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raises this object's PropertyChanged event.
            </summary>
            <typeparam name="T">The type of the property that has a new value</typeparam>
            <param name="propertyExpression">A Lambda expression representing the property that has a new value.</param>
        </member>
        <member name="E:Microsoft.Practices.Prism.ViewModel.NotificationObject.PropertyChanged">
            <summary>
            Raised when a property on this object has a new value.
            </summary>        
        </member>
        <member name="T:Microsoft.Practices.Prism.ViewModel.PropertySupport">
            <summary>
             Provides support for extracting property information based on a property expression.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.ViewModel.PropertySupport.ExtractPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Extracts the property name from a property expression.
            </summary>
            <typeparam name="T">The object type containing the property specified in the expression.</typeparam>
            <param name="propertyExpression">The property expression (e.g. p =&gt; p.PropertyName)</param>
            <returns>The name of the property.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="propertyExpression"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the expression is:<br/>
                Not a <see cref="T:System.Linq.Expressions.MemberExpression"/><br/>
                The <see cref="T:System.Linq.Expressions.MemberExpression"/> does not represent a property.<br/>
                Or, the property is static.
            </exception>
        </member>
        <member name="T:Microsoft.Practices.Prism.Events.DefaultDispatcher">
            <summary>
            Wraps the Deployment Dispatcher.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Events.DefaultDispatcher.BeginInvoke(System.Delegate,System.Object)">
            <summary>
            Forwards the BeginInvoke to the current deployment's <see cref="T:System.Windows.Threading.Dispatcher"/>.
            </summary>
            <param name="method">Method to be invoked.</param>
            <param name="arg">Arguments to pass to the invoked method.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.ExtensionMethods">
            <summary>
            Defines extension methods on the <see cref="T:System.Collections.Generic.List`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.ExtensionMethods.RemoveAll``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the List's items.</typeparam>
            <param name="list"><see langword="this"/>.</param>
            <param name="filter">The delegate that defines the conditions of the elements to remove.</param>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.DownloadCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.Practices.Prism.Modularity.FileDownloader.DownloadCompleted"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.DownloadCompletedEventArgs.#ctor(System.IO.Stream,System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Modularity.DownloadCompletedEventArgs"/> class.
            </summary>
            <param name="result">The downloaded <see cref="T:System.IO.Stream"/>.</param>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="canceled">A value that indicates whether the asynchronous operation was canceled.</param>
            <param name="userState">The optional user-supplied state object that is used to identify the task that raised the MethodNameCompleted event.</param>
        </member>
        <member name="P:Microsoft.Practices.Prism.Modularity.DownloadCompletedEventArgs.Result">
            <summary>
            Gets the downloaded <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.FileDownloader">
            <summary>
            Defines the component used to download files.
            </summary>
            <remarks>This is mainly a wrapper for the <see cref="T:System.Net.WebClient"/> class that implements <see cref="T:Microsoft.Practices.Prism.Modularity.IFileDownloader"/>.</remarks>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.IFileDownloader">
            <summary>
            Defines a contract for the object used to download files asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.IFileDownloader.DownloadAsync(System.Uri,System.Object)">
            <summary>
            Starts downloading asynchronously a file from <paramref name="uri"/>.
            </summary>
            <param name="uri">The location of the file to be downloaded.</param>
            <param name="userToken">Provides a user-specified identifier for the asynchronous task.</param>
        </member>
        <member name="E:Microsoft.Practices.Prism.Modularity.IFileDownloader.DownloadProgressChanged">
            <summary>
            Raised whenever the download progress changes.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.Prism.Modularity.IFileDownloader.DownloadCompleted">
            <summary>
            Raised download is complete.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.FileDownloader.DownloadAsync(System.Uri,System.Object)">
            <summary>
            Starts downloading asynchronously a file from <paramref name="uri"/>.
            </summary>
            <param name="uri">The location of the file to be downloaded.</param>
            <param name="userToken">Provides a user-specified identifier for the asynchronous task.</param>
        </member>
        <member name="E:Microsoft.Practices.Prism.Modularity.FileDownloader.DownloadProgressChanged">
            <summary>
            Raised whenever the download progress changes.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.Prism.Modularity.FileDownloader.DownloadCompleted">
            <summary>
            Raised download is complete.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Modularity.XapModuleTypeLoader">
            <summary>
            Component responsible for downloading remote modules 
            and load their <see cref="T:System.Type"/> into the current application domain.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.XapModuleTypeLoader.CanLoadModuleType(Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Evaluates the <see cref="P:Microsoft.Practices.Prism.Modularity.ModuleInfo.Ref"/> property to see if the current typeloader will be able to retrieve the <paramref name="moduleInfo"/>.
            </summary>
            <param name="moduleInfo">Module that should have it's type loaded.</param>
            <returns><see langword="true"/> if the current typeloader is able to retrieve the module, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.XapModuleTypeLoader.LoadModuleType(Microsoft.Practices.Prism.Modularity.ModuleInfo)">
            <summary>
            Retrieves the <paramref name="moduleInfo"/>.
            </summary>
            <param name="moduleInfo">Module that should have it's type loaded.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Modularity.XapModuleTypeLoader.CreateDownloader">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.Prism.Modularity.IFileDownloader"/> used to retrieve the remote modules.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.Prism.Modularity.IFileDownloader"/> used to retrieve the remote modules.</returns>
        </member>
        <member name="E:Microsoft.Practices.Prism.Modularity.XapModuleTypeLoader.ModuleDownloadProgressChanged">
            <summary>
            Raised repeatedly to provide progress as modules are loaded in the background.
            </summary>
        </member>
        <member name="E:Microsoft.Practices.Prism.Modularity.XapModuleTypeLoader.LoadModuleCompleted">
            <summary>
            Raised when a module is loaded or fails to load.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.Behaviors.TabControlRegionSyncBehavior">
            <summary>
            Behavior that generates <see cref="T:System.Windows.Controls.TabItem"/> containers for the added items
            and also keeps the <see cref="P:System.Windows.Controls.TabControl.SelectedItem"/> and the <see cref="P:Microsoft.Practices.Prism.Regions.IRegion.ActiveViews"/> in sync.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.Prism.Regions.Behaviors.TabControlRegionSyncBehavior.BehaviorKey">
            <summary>
             The behavior key for this region sync behavior.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.TabControlRegionSyncBehavior.OnAttach">
            <summary>
            Override this method to perform the logic after the behavior has been attached.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.TabControlRegionSyncBehavior.GetContainedItem(System.Windows.Controls.TabItem)">
            <summary>
            Gets the item contained in the <see cref="T:System.Windows.Controls.TabItem"/>.
            </summary>
            <param name="tabItem">The container item.</param>
            <returns>The item contained in the <paramref name="tabItem"/> if it was generated automatically by the behavior; otherwise <paramref name="tabItem"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.TabControlRegionSyncBehavior.PrepareContainerForItem(System.Object,System.Windows.DependencyObject)">
            <summary>
            Override to change how TabItem's are prepared for items.
            </summary>
            <param name="item">The item to wrap in a TabItem</param>
            <param name="parent">The parent <see cref="T:System.Windows.DependencyObject"/></param>
            <returns>A tab item that wraps the supplied <paramref name="item"/></returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.TabControlRegionSyncBehavior.ClearContainerForItem(System.Windows.Controls.TabItem)">
            <summary>
            Undoes the effects of the <see cref="M:Microsoft.Practices.Prism.Regions.Behaviors.TabControlRegionSyncBehavior.PrepareContainerForItem(System.Object,System.Windows.DependencyObject)"/> method.
            </summary>
            <param name="tabItem">The container element for the item.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.TabControlRegionSyncBehavior.GetContainerForItem(System.Object,System.Windows.Controls.ItemCollection)">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <param name="item">The item to get the container for.</param>
            <param name="itemCollection">The parent's <see cref="T:System.Windows.Controls.ItemCollection"/>.</param>
            <returns>The element that is used to display the given item.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.Behaviors.TabControlRegionSyncBehavior.GetDataContext(System.Object)">
            <summary>
            Return the appropriate data context.  If the item is a FrameworkElement it cannot be a data context in Silverlight, so we use its data context.
            Otherwise, we just us the item as the data context.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.Prism.Regions.Behaviors.TabControlRegionSyncBehavior.HostControl">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> is attached to.
            </summary>
            <value>A <see cref="T:System.Windows.DependencyObject"/> that the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> is attached to.
            This is usually a <see cref="T:System.Windows.FrameworkElement"/> that is part of the tree.</value>
        </member>
        <member name="T:Microsoft.Practices.Prism.Regions.TabControlRegionAdapter">
            <summary>
            Adapter that creates a new <see cref="T:Microsoft.Practices.Prism.Regions.Region"/> and binds all
            the views to the adapted <see cref="T:System.Windows.Controls.TabControl"/>.
            </summary>
            <remarks>
            This adapter is needed on Silverlight because the <see cref="T:System.Windows.Controls.TabControl"/> doesn't 
            automatically create <see cref="T:System.Windows.Controls.TabItem"/>s when new items are added to 
            the <see cref="P:System.Windows.Controls.ItemsControl.Items"/> collection.
            </remarks>
        </member>
        <member name="F:Microsoft.Practices.Prism.Regions.TabControlRegionAdapter.ItemContainerStyleProperty">
            <summary>
            <see cref="T:System.Windows.Style"/> to set to the created <see cref="T:System.Windows.Controls.TabItem"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.TabControlRegionAdapter.#ctor(Microsoft.Practices.Prism.Regions.IRegionBehaviorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.Prism.Regions.TabControlRegionAdapter"/> class.
            </summary>
            <param name="regionBehaviorFactory">The factory used to create the region behaviors to attach to the created regions.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.TabControlRegionAdapter.GetItemContainerStyle(System.Windows.DependencyObject)">
            <summary>
            Gets the <see cref="F:Microsoft.Practices.Prism.Regions.TabControlRegionAdapter.ItemContainerStyleProperty"/> property value.
            </summary>
            <param name="target">Target object of the attached property.</param>
            <returns>Value of the <see cref="F:Microsoft.Practices.Prism.Regions.TabControlRegionAdapter.ItemContainerStyleProperty"/> property.</returns>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.TabControlRegionAdapter.SetItemContainerStyle(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>
            Sets the <see cref="F:Microsoft.Practices.Prism.Regions.TabControlRegionAdapter.ItemContainerStyleProperty"/> property value.
            </summary>
            <param name="target">Target object of the attached property.</param>
            <param name="value">Value to be set on the <see cref="F:Microsoft.Practices.Prism.Regions.TabControlRegionAdapter.ItemContainerStyleProperty"/> property.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.TabControlRegionAdapter.Adapt(Microsoft.Practices.Prism.Regions.IRegion,System.Windows.Controls.TabControl)">
            <summary>
            Adapts a <see cref="T:System.Windows.Controls.TabControl"/> to an <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/>.
            </summary>
            <param name="region">The new region being used.</param>
            <param name="regionTarget">The object to adapt.</param>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.TabControlRegionAdapter.AttachBehaviors(Microsoft.Practices.Prism.Regions.IRegion,System.Windows.Controls.TabControl)">
            <summary>
            Attach new behaviors.
            </summary>
            <param name="region">The region being used.</param>
            <param name="regionTarget">The object to adapt.</param>
            <remarks>
            This class attaches the base behaviors and also keeps the <see cref="P:System.Windows.Controls.TabControl.SelectedItem"/> 
            and the <see cref="P:Microsoft.Practices.Prism.Regions.IRegion.ActiveViews"/> in sync.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.Regions.TabControlRegionAdapter.CreateRegion">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Practices.Prism.Regions.Region"/>.
            </summary>
            <returns>A new instance of <see cref="T:Microsoft.Practices.Prism.Regions.Region"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.Prism.ViewModel.DataTemplateSelector">
            <summary>
            This custom ContentControl changes its ContentTemplate based on the content it is presenting.
            </summary>
            <remarks>
            In order to determine the template it must use for the new content, this control retrieves it from its
            resources using the name for the type of the new content as the key.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.ViewModel.DataTemplateSelector.OnContentChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property changes. 
            </summary>
            <param name="oldContent">The old value of the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property.</param><param name="newContent">The new value of the <see cref="P:System.Windows.Controls.ContentControl.Content"/> property.</param>
            <remarks>
            Will attempt to discover the <see cref="T:System.Windows.DataTemplate"/> from the <see cref="T:System.Windows.ResourceDictionary"/> by matching the type name of <paramref name="newContent"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.Prism.ViewModel.DataTemplateSelector.GetDefaultContentTemplate">
            <summary>
            Returns the default content template to use if not other content template can be located.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
