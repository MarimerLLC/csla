<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Csla.Validation</name>
    </assembly>
    <members>
        <member name="T:Csla.Security.AuthorizationRules">
            <summary>
            Add object level rules 
            </summary>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.AllowGet(System.Type,System.String[])">
            <summary>
            Specify the roles allowed to get (fetch)
            a given type of business object.
            </summary>
            <param name="objectType">Type of business object.</param>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.DenyGet(System.Type,System.String[])">
            <summary>
            Specify the roles not allowed to get (fetch)
            a given type of business object.
            </summary>
            <param name="objectType">Type of business object.</param>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.AllowEdit(System.Type,System.String[])">
            <summary>
            Specify the roles allowed to edit (save)
            a given type of business object.
            </summary>
            <param name="objectType">Type of business object.</param>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.DenyEdit(System.Type,System.String[])">
            <summary>
            Specify the roles not allowed to edit (save)
            a given type of business object.
            </summary>
            <param name="objectType">Type of business object.</param>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.AllowCreate(System.Type,System.String[])">
            <summary>
            Specify the roles allowed to create
            a given type of business object.
            </summary>
            <param name="objectType">Type of business object.</param>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.DenyCreate(System.Type,System.String[])">
            <summary>
            Specify the roles not allowed to create
            a given type of business object.
            </summary>
            <param name="objectType">Type of business object.</param>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.AllowDelete(System.Type,System.String[])">
            <summary>
            Specify the roles allowed to delete
            a given type of business object.
            </summary>
            <param name="objectType">Type of business object.</param>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.DenyDelete(System.Type,System.String[])">
            <summary>
            Specify the roles not allowed to delete
            a given type of business object.
            </summary>
            <param name="objectType">Type of business object.</param>
            <param name="roles">List of roles.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.CanCreateObject(System.Type)">
            <summary>
            Gets a value indicating whether the current user
            is allowed to create an instance of the business
            object.
            </summary>
            <param name="objectType">Type of business object.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.CanGetObject(System.Type)">
            <summary>
            Gets a value indicating whether the current user
            is allowed to get (fetch) an instance of the business
            object.
            </summary>
            <param name="objectType">Type of business object.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.CanEditObject(System.Type)">
            <summary>
            Gets a value indicating whether the current user
            is allowed to edit (save) an instance of the business
            object.
            </summary>
            <param name="objectType">Type of business object.</param>
        </member>
        <member name="M:Csla.Security.AuthorizationRules.CanDeleteObject(System.Type)">
            <summary>
            Gets a value indicating whether the current user
            is allowed to delete an instance of the business
            object.
            </summary>
            <param name="objectType">Type of business object.</param>
        </member>
        <member name="T:Csla.Validation.BusinessBase`1">
            <summary>
            Intermediate base class for BusinessBase
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Csla.Validation.BusinessBase`1.ValidationRules">
            <summary>
            ValidationRules for CSLA 3.x compatibility
            </summary>
        </member>
        <member name="P:Csla.Validation.BusinessBase`1.AuthorizationRules">
            <summary>
            AuthorizationRules for CSLA 3.x compatibility
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules">
            <summary>
            Implements common business rules.
            </summary>
        </member>
        <member name="M:Csla.Validation.CommonRules.StringRequired(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule ensuring a string value contains one or more
            characters.
            </summary>
            <param name="target">Object containing the data to validate</param>
            <param name="e">Arguments parameter specifying the name of the string
            property to validate</param>
            <returns><see langword="false" /> if the rule is broken</returns>
            <remarks>
            This implementation uses late binding, and will only work
            against string property values.
            </remarks>
        </member>
        <member name="M:Csla.Validation.CommonRules.StringMaxLength(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule ensuring a string value doesn't exceed
            a specified length.
            </summary>
            <param name="target">Object containing the data to validate</param>
            <param name="e">Arguments parameter specifying the name of the string
            property to validate</param>
            <returns><see langword="false" /> if the rule is broken</returns>
            <remarks>
            This implementation uses late binding, and will only work
            against string property values.
            </remarks>
        </member>
        <member name="M:Csla.Validation.CommonRules.StringMinLength(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule ensuring a string value has a
            minimum length.
            </summary>
            <param name="target">Object containing the data to validate</param>
            <param name="e">Arguments parameter specifying the name of the string
            property to validate</param>
            <returns><see langword="false" /> if the rule is broken</returns>
            <remarks>
            This implementation uses late binding, and will only work
            against string property values.
            </remarks>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMaxValue(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule ensuring an integer value doesn't exceed
            a specified value.
            </summary>
            <param name="target">Object containing the data to validate.</param>
            <param name="e">Arguments parameter specifying the name of the
            property to validate.</param>
            <returns><see langword="false"/> if the rule is broken.</returns>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMinValue(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule ensuring an integer value doesn't go below
            a specified value.
            </summary>
            <param name="target">Object containing the data to validate.</param>
            <param name="e">Arguments parameter specifying the name of the
            property to validate.</param>
            <returns><see langword="false"/> if the rule is broken.</returns>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxValue``1(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule ensuring that a numeric value
            doesn't exceed a specified maximum.
            </summary>
            <typeparam name="T">Type of the property to validate.</typeparam>
            <param name="target">Object containing value to validate.</param>
            <param name="e">Arguments variable specifying the
            name of the property to validate, along with the max
            allowed value.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinValue``1(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule ensuring that a numeric value
            doesn't exceed a specified minimum.
            </summary>
            <typeparam name="T">Type of the property to validate.</typeparam>
            <param name="target">Object containing value to validate.</param>
            <param name="e">Arguments variable specifying the
            name of the property to validate, along with the min
            allowed value.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExMatch(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule that checks to make sure a value
            matches a given regex pattern.
            </summary>
            <param name="target">Object containing the data to validate</param>
            <param name="e">RegExRuleArgs parameter specifying the name of the 
            property to validate and the regex pattern.</param>
            <returns>False if the rule is broken</returns>
            <remarks>
            This implementation uses late binding.
            </remarks>
        </member>
        <member name="M:Csla.Validation.CommonRules.CanRead(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule indicating whether the user is authorized
            to read the property value.
            </summary>
            <param name="target">Target object.</param>
            <param name="e">Rule arguments.</param>
            <remarks>
            Combine this property with short-circuiting to
            prevent evaluation of other rules in the case
            that the user isn't allowed to read the value.
            </remarks>
        </member>
        <member name="M:Csla.Validation.CommonRules.CanWrite(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule indicating whether the user is authorized
            to change the property value.
            </summary>
            <param name="target">Target object.</param>
            <param name="e">Rule arguments.</param>
            <remarks>
            Combine this property with short-circuiting to
            prevent evaluation of other rules in the case
            that the user isn't allowed to change the value.
            </remarks>
        </member>
        <member name="M:Csla.Validation.CommonRules.DataAnnotation(System.Object,Csla.Validation.RuleArgs)">
            <summary>
            Rule method that executes a rule contained in an 
            System.ComponentModel.DataAnnotations.ValidationAttribute
            object.
            </summary>
            <param name="target">
            Business object containing the value to validate.
            </param>
            <param name="e">
            DataAnnotationRuleArgs object.
            </param>
            <returns>True if the rule is satisfied, false if the rule fails.</returns>
        </member>
        <member name="T:Csla.Validation.CommonRules.MaxLengthRuleArgs">
            <summary>
            Custom <see cref="T:Csla.Validation.RuleArgs"/> object required by the
            <see cref="M:Csla.Validation.CommonRules.StringMaxLength(System.Object,Csla.Validation.RuleArgs)"/> rule method.
            </summary>
        </member>
        <member name="T:Csla.Validation.DecoratedRuleArgs">
            <summary>
            Object providing extra information to methods that
            implement business rules.
            </summary>
        </member>
        <member name="T:Csla.Validation.RuleArgs">
            <summary>
            Object providing extra information to methods that
            implement business rules. As imlemented in Csla 3.8.x so older style rules will compile. 
            </summary>
        </member>
        <member name="M:Csla.Validation.RuleArgs.#ctor(System.String)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
        </member>
        <member name="M:Csla.Validation.RuleArgs.#ctor(Csla.Core.IPropertyInfo)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyInfo">The PropertyInfo object for the property.</param>
        </member>
        <member name="M:Csla.Validation.RuleArgs.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
        </member>
        <member name="M:Csla.Validation.RuleArgs.#ctor(System.String,Csla.Rules.RuleSeverity)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleArgs.#ctor(Csla.Core.IPropertyInfo,Csla.Rules.RuleSeverity)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyInfo">The PropertyInfo for the property.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleArgs.#ctor(System.String,System.String,Csla.Rules.RuleSeverity)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleArgs.#ctor(System.String,Csla.Rules.RuleSeverity,System.Boolean)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleArgs.#ctor(Csla.Core.IPropertyInfo,Csla.Rules.RuleSeverity,System.Boolean)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyInfo">The PropertyInfo for the property.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleArgs.#ctor(System.String,System.String,Csla.Rules.RuleSeverity,System.Boolean)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleArgs.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="M:Csla.Validation.RuleArgs.GetPropertyName(Csla.Validation.RuleArgs)">
            <summary>
            Gets the property name from the RuleArgs
            object, using the friendly name if one
            is defined.
            </summary>
            <param name="e">Object from which to 
            extract the name.</param>
            <returns>
            The friendly property name if it exists,
            otherwise the property name itself.
            </returns>
        </member>
        <member name="P:Csla.Validation.RuleArgs.PropertyName">
            <summary>
            The name of the property to be validated.
            </summary>
        </member>
        <member name="P:Csla.Validation.RuleArgs.PropertyFriendlyName">
            <summary>
            Gets or sets a friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.
            </summary>
        </member>
        <member name="P:Csla.Validation.RuleArgs.Description">
            <summary>
            Set by the rule handler method to describe the broken
            rule.
            </summary>
            <value>A human-readable description of
            the broken rule.</value>
            <remarks>
            Setting this property only has an effect if
            the rule method returns <see langword="false" />.
            </remarks>
        </member>
        <member name="P:Csla.Validation.RuleArgs.Severity">
            <summary>
            Gets or sets the severity of the broken rule.
            </summary>
            <value>The severity of the broken rule.</value>
            <remarks>
            Setting this property only has an effect if
            the rule method returns <see langword="false" />.
            </remarks>
        </member>
        <member name="P:Csla.Validation.RuleArgs.StopProcessing">
            <summary>
            Gets or sets a value indicating whether this
            broken rule should stop the processing of subsequent
            rules for this property.
            </summary>
            <value><see langword="true" /> if no further
            rules should be process for this property.</value>
            <remarks>
            Setting this property only has an effect if
            the rule method returns <see langword="false" />.
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(Csla.Core.IPropertyInfo)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyInfo">The PropertyInfo for the property to be validated.</param>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,Csla.Rules.RuleSeverity)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(Csla.Core.IPropertyInfo,Csla.Rules.RuleSeverity)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyInfo">The PropertyInfo for the property to be validated.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,System.String,Csla.Rules.RuleSeverity)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,Csla.Rules.RuleSeverity,System.Boolean)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(Csla.Core.IPropertyInfo,Csla.Rules.RuleSeverity,System.Boolean)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyInfo">The PropertyInfo for the property to be validated.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,System.String,Csla.Rules.RuleSeverity,System.Boolean)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyInfo">The PropertyInfo for the property to be validated.</param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,Csla.Rules.RuleSeverity,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(Csla.Core.IPropertyInfo,Csla.Rules.RuleSeverity,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyInfo">The PropertyInfo for the property to be validated.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,System.String,Csla.Rules.RuleSeverity,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,Csla.Rules.RuleSeverity,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(Csla.Core.IPropertyInfo,Csla.Rules.RuleSeverity,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyInfo">The PropertyInfo for the property to be validated.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.#ctor(System.String,System.String,Csla.Rules.RuleSeverity,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Validation.DecoratedRuleArgs.ToString">
            <summary>
            Return a string representation of
            the object using the rule:// URI
            format.
            </summary>
        </member>
        <member name="P:Csla.Validation.DecoratedRuleArgs.Item(System.String)">
            <summary>
            Gets or sets an argument value for use
            by the rule method.
            </summary>
            <param name="key">The name under which the value is stored.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxLengthRuleArgs.#ctor(System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="maxLength">Max length of characters allowed.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxLengthRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">PropertyInfo for the property to validate.</param>
            <param name="maxLength">Max length of characters allowed.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxLengthRuleArgs.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="maxLength">Max length of characters allowed.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxLengthRuleArgs.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="maxLength">Max length of characters allowed.</param>
            <param name="format">Format string for the max length
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxLengthRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">PropertyInfo for the property to validate.</param>
            <param name="maxLength">Max length of characters allowed.</param>
            <param name="format">Format string for the max length
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxLengthRuleArgs.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="maxLength">Max length of characters allowed.</param>
            <param name="format">Format string for the max length
            value in the broken rule string.</param>
        </member>
        <member name="P:Csla.Validation.CommonRules.MaxLengthRuleArgs.MaxLength">
            <summary>
            Get the max length for the string.
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules.MinLengthRuleArgs">
            <summary>
            Custom <see cref="T:Csla.Validation.RuleArgs"/> object required by the
            <see cref="M:Csla.Validation.CommonRules.StringMinLength(System.Object,Csla.Validation.RuleArgs)"/> rule method.
            </summary>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinLengthRuleArgs.#ctor(System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="minLength">min length of characters allowed.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinLengthRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="minLength">min length of characters allowed.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinLengthRuleArgs.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="minLength">min length of characters allowed.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinLengthRuleArgs.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="minLength">min length of characters allowed.</param>
            <param name="format">Format string for the min length
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinLengthRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="minLength">min length of characters allowed.</param>
            <param name="format">Format string for the min length
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinLengthRuleArgs.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="minLength">min length of characters allowed.</param>
            <param name="format">Format string for the min length
            value in the broken rule string.</param>
        </member>
        <member name="P:Csla.Validation.CommonRules.MinLengthRuleArgs.MinLength">
            <summary>
            Get the min length for the string.
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules.IntegerMaxValueRuleArgs">
            <summary>
            Custom <see cref="T:Csla.Validation.RuleArgs"/> object required by the
            <see cref="M:Csla.Validation.CommonRules.IntegerMaxValue(System.Object,Csla.Validation.RuleArgs)"/> rule method.
            </summary>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMaxValueRuleArgs.#ctor(System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMaxValueRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMaxValueRuleArgs.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMaxValueRuleArgs.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
            <param name="format">Format string for the max value
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMaxValueRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
            <param name="format">Format string for the max value
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMaxValueRuleArgs.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
            <param name="format">Format string for the max value
            value in the broken rule string.</param>
        </member>
        <member name="P:Csla.Validation.CommonRules.IntegerMaxValueRuleArgs.MaxValue">
            <summary>
            Get the max value for the property.
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules.IntegerMinValueRuleArgs">
            <summary>
            Custom <see cref="T:Csla.Validation.RuleArgs"/> object required by the
            <see cref="M:Csla.Validation.CommonRules.IntegerMinValue(System.Object,Csla.Validation.RuleArgs)"/> rule method.
            </summary>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMinValueRuleArgs.#ctor(System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMinValueRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMinValueRuleArgs.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMinValueRuleArgs.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
            <param name="format">Format string for the min value
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMinValueRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
            <param name="format">Format string for the min value
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.IntegerMinValueRuleArgs.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
            <param name="format">Format string for the min value
            value in the broken rule string.</param>
        </member>
        <member name="P:Csla.Validation.CommonRules.IntegerMinValueRuleArgs.MinValue">
            <summary>
            Get the min value for the property.
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules.MaxValueRuleArgs`1">
            <summary>
            Custom <see cref="T:Csla.Validation.RuleArgs"/> object required by the
            <see cref="P:Csla.Validation.CommonRules.MaxValueRuleArgs`1.MaxValue"/> rule method.
            </summary>
            <typeparam name="T">Type of the property to validate.</typeparam>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxValueRuleArgs`1.#ctor(System.String,`0)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxValueRuleArgs`1.#ctor(Csla.Core.IPropertyInfo,`0)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxValueRuleArgs`1.#ctor(System.String,System.String,`0)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxValueRuleArgs`1.#ctor(System.String,`0,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
            <param name="format">Format string for the max value
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxValueRuleArgs`1.#ctor(Csla.Core.IPropertyInfo,`0,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
            <param name="format">Format string for the max value
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MaxValueRuleArgs`1.#ctor(System.String,System.String,`0,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
            <param name="format">Format string for the max value
            value in the broken rule string.</param>
        </member>
        <member name="P:Csla.Validation.CommonRules.MaxValueRuleArgs`1.MaxValue">
            <summary>
            Get the max value for the property.
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules.MinValueRuleArgs`1">
            <summary>
            Custom <see cref="T:Csla.Validation.RuleArgs"/> object required by the
            <see cref="P:Csla.Validation.CommonRules.MinValueRuleArgs`1.MinValue"/> rule method.
            </summary>
            <typeparam name="T">Type of the property to validate.</typeparam>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinValueRuleArgs`1.#ctor(System.String,`0)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinValueRuleArgs`1.#ctor(Csla.Core.IPropertyInfo,`0)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinValueRuleArgs`1.#ctor(System.String,System.String,`0)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinValueRuleArgs`1.#ctor(System.String,`0,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
            <param name="format">Format string for the min value
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinValueRuleArgs`1.#ctor(Csla.Core.IPropertyInfo,`0,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
            <param name="format">Format string for the min value
            value in the broken rule string.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.MinValueRuleArgs`1.#ctor(System.String,System.String,`0,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
            <param name="format">Format string for the min value
            value in the broken rule string.</param>
        </member>
        <member name="P:Csla.Validation.CommonRules.MinValueRuleArgs`1.MinValue">
            <summary>
            Get the min value for the property.
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules.RegExPatterns">
            <summary>
            List of built-in regex patterns.
            </summary>
        </member>
        <member name="F:Csla.Validation.CommonRules.RegExPatterns.SSN">
            <summary>
            US Social Security number pattern.
            </summary>
        </member>
        <member name="F:Csla.Validation.CommonRules.RegExPatterns.Email">
            <summary>
            Email address pattern.
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules.RegExRuleArgs">
            <summary>
            Custom <see cref="T:Csla.Validation.RuleArgs"/> object required by the
            <see cref="M:Csla.Validation.CommonRules.RegExMatch(System.Object,Csla.Validation.RuleArgs)"/> rule method.
            </summary>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,Csla.Validation.CommonRules.RegExPatterns)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="pattern">Built-in regex pattern to use.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(Csla.Core.IPropertyInfo,Csla.Validation.CommonRules.RegExPatterns)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="pattern">Built-in regex pattern to use.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,Csla.Validation.CommonRules.RegExPatterns)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="pattern">Built-in regex pattern to use.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="pattern">Custom regex pattern to use.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.String)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="pattern">Custom regex pattern to use.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="pattern">Custom regex pattern to use.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="regEx"><see cref="P:Csla.Validation.CommonRules.RegExRuleArgs.RegEx"/> object to use.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="regEx"><see cref="P:Csla.Validation.CommonRules.RegExRuleArgs.RegEx"/> object to use.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="regEx"><see cref="P:Csla.Validation.CommonRules.RegExRuleArgs.RegEx"/> object to use.</param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,Csla.Validation.CommonRules.RegExPatterns,Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="pattern">Built-in regex pattern to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(Csla.Core.IPropertyInfo,Csla.Validation.CommonRules.RegExPatterns,Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="pattern">Built-in regex pattern to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,Csla.Validation.CommonRules.RegExPatterns,Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="pattern">Built-in regex pattern to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="pattern">Custom regex pattern to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.String,Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="pattern">Custom regex pattern to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,System.String,Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="pattern">Custom regex pattern to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.Text.RegularExpressions.Regex,Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="regEx"><see cref="P:Csla.Validation.CommonRules.RegExRuleArgs.RegEx"/> object to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(Csla.Core.IPropertyInfo,System.Text.RegularExpressions.Regex,Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyInfo">Property to validate.</param>
            <param name="regEx"><see cref="P:Csla.Validation.CommonRules.RegExRuleArgs.RegEx"/> object to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,System.Text.RegularExpressions.Regex,Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="regEx"><see cref="P:Csla.Validation.CommonRules.RegExRuleArgs.RegEx"/> object to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.RegExRuleArgs.GetPattern(Csla.Validation.CommonRules.RegExPatterns)">
            <summary>
            Returns the specified built-in regex pattern.
            </summary>
            <param name="pattern">Pattern to return.</param>
        </member>
        <member name="P:Csla.Validation.CommonRules.RegExRuleArgs.RegEx">
            <summary>
            The <see cref="P:Csla.Validation.CommonRules.RegExRuleArgs.RegEx"/> object used to validate
            the property.
            </summary>
        </member>
        <member name="P:Csla.Validation.CommonRules.RegExRuleArgs.NullResult">
            <summary>
            Gets a value indicating whether a null value
            means the rule will return true or false.
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions">
            <summary>
            List of options for the NullResult
            property.
            </summary>
        </member>
        <member name="F:Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions.ReturnFalse">
            <summary>
            Indicates that a null value
            should always result in the 
            rule returning false.
            </summary>
        </member>
        <member name="F:Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions.ReturnTrue">
            <summary>
            Indicates that a null value
            should always result in the 
            rule returning true.
            </summary>
        </member>
        <member name="F:Csla.Validation.CommonRules.RegExRuleArgs.NullResultOptions.ConvertToEmptyString">
            <summary>
            Indicates that a null value
            should be converted to an
            empty string before the
            regular expression is
            evaluated.
            </summary>
        </member>
        <member name="T:Csla.Validation.CommonRules.DataAnnotationRuleArgs">
            <summary>
            Arguments provided to the DataAnnotation
            rule method
            </summary>
        </member>
        <member name="M:Csla.Validation.CommonRules.DataAnnotationRuleArgs.#ctor(System.String,System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="name">
            Name of the property to be validated.
            </param>
            <param name="attribute">
            System.ComponentModel.DataAnnotations.ValidationAttribute object
            containing the rule implementation.
            </param>
        </member>
        <member name="M:Csla.Validation.CommonRules.DataAnnotationRuleArgs.ToString">
            <summary>
            Gets a string representation of the object.
            </summary>
        </member>
        <member name="P:Csla.Validation.CommonRules.DataAnnotationRuleArgs.Attribute">
            <summary>
            The attribute containing the rule implementation.
            </summary>
        </member>
        <member name="T:Csla.Validation.ReadOnlyBase`1">
            <summary>
            Intermediate base class for ReadOnlyBase
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Csla.Validation.ReadOnlyBase`1.ValidationRules">
            <summary>
            ValidationRules for CSLA 3.x compatibility
            </summary>
        </member>
        <member name="P:Csla.Validation.ReadOnlyBase`1.AuthorizationRules">
            <summary>
            AuthorizationRules for CSLA 3.x compatibility
            </summary>
        </member>
        <member name="T:Csla.Validation.RuleHandler">
            <summary>
            The delegate definition for CSLA 3.8 rule handler
            </summary>
            <param name="target">Target object.</param>
            <param name="e">RuleArgs parameter.</param>
            <returns>false if broken, true if passed</returns>
        </member>
        <member name="T:Csla.Validation.RuleHandler`2">
            <summary>
            The delegate definition for CSLA 3.8 generic rule handler
            </summary>
            <param name="target">Target object.</param>
            <param name="e">RuleArgs parameter.</param>
            <returns>false if broken, true if passed</returns>
        </member>
        <member name="T:Csla.Validation.RuleExtensions">
            <summary>
            Helper class for wrapping old style (Csla 3.8x and earlier) rules with a lambda rule in Csla 4.x to simplify migration of older style apps.
            </summary>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AddRule``1(Csla.Rules.BusinessRules,Csla.Validation.RuleHandler{``0,Csla.Validation.RuleArgs},Csla.Core.IPropertyInfo,Csla.Validation.RuleArgs,System.Int32)">
            <summary>
            Adds a lambda property level rule to business rules.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="businessRules">Business rules instance.</param>
            <param name="ruleHandler">Rule method.</param>
            <param name="primaryProperty">Primary property.</param>
            <param name="ruleArgs">Rule args object.</param>
            <param name="priority">Priority.</param>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AddRule``1(Csla.Rules.BusinessRules,Csla.Validation.RuleHandler{``0,Csla.Validation.RuleArgs},Csla.Core.IPropertyInfo)">
            <summary>
            Adds a lambda property level rule to business rules.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="businessRules">Business rules.</param>
            <param name="ruleHandler">Rule method.</param>
            <param name="primaryProperty">Primary property.</param>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AddRule``1(Csla.Rules.BusinessRules,Csla.Validation.RuleHandler{``0,Csla.Validation.RuleArgs},Csla.Core.IPropertyInfo,System.Int32)">
            <summary>
            Adds a lambda property level rule to business rules.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="businessRules">Business rules.</param>
            <param name="ruleHandler">Rule method.</param>
            <param name="primaryProperty">Primary property.</param>
            <param name="priority">Priority.</param>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AddRule``1(Csla.Rules.BusinessRules,Csla.Validation.RuleHandler{``0,Csla.Validation.RuleArgs},System.String,System.Int32)">
            <summary>
            Adds a lambda property level rule to business rules.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="businessRules">Business rules</param>
            <param name="ruleHandler">Rule method</param>
            <param name="primaryPropertyName">Primary Property name</param>
            <param name="priority">Priority</param>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AddRule``1(Csla.Rules.BusinessRules,Csla.Validation.RuleHandler{``0,Csla.Validation.RuleArgs},Csla.Validation.RuleArgs)">
            <summary>
            Adds a lambda property level rule to business rules.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="businessRules">Business rules</param>
            <param name="ruleHandler">Rule method</param>
            <param name="args">RuleArgs argument.</param>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AddRule``1(Csla.Rules.BusinessRules,Csla.Validation.RuleHandler{``0,Csla.Validation.RuleArgs},Csla.Validation.RuleArgs,System.Int32)">
            <summary>
            Adds a lambda property level rule to business rules.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="businessRules">Business rules</param>
            <param name="ruleHandler">Rule method</param>
            <param name="args">RuleArgs argument.</param>
            <param name="priority">Priority</param>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AddRule``1(Csla.Rules.BusinessRules,Csla.Validation.RuleHandler{``0,Csla.Validation.RuleArgs},System.String)">
            <summary>
            Adds a lambda property level rule to business rules.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="businessRules">Business rules</param>
            <param name="ruleHandler">Rule method</param>
            <param name="primaryPropertyName">Name of the primary property.</param>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AddRule(Csla.Rules.BusinessRules,Csla.Validation.RuleHandler,Csla.Core.IPropertyInfo,Csla.Validation.RuleArgs,System.Int32)">
            <summary>
            Adds a lambda property level rule to business rules.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="ruleHandler">Rule method</param>
            <param name="primaryProperty">The primary property.</param>
            <param name="ruleArgs">The rule args object.</param>
            <param name="priority">Priority</param>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AddRule(Csla.Rules.BusinessRules,Csla.Validation.RuleHandler,Csla.Core.IPropertyInfo)">
            <summary>
            Adds a lambda property level rule to business rules.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="ruleHandler">Rule method</param>
            <param name="primaryProperty">The primary property.</param>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AddRule(Csla.Rules.BusinessRules,Csla.Validation.RuleHandler,Csla.Core.IPropertyInfo,System.Int32)">
            <summary>
            Adds a lambda property level rule to business rules.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="ruleHandler">Rule method</param>
            <param name="primaryProperty">The primary property.</param>
            <param name="priority">Priority</param>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AddRule(Csla.Rules.BusinessRules,Csla.Validation.RuleHandler,System.String,System.Int32)">
            <summary>
            Adds a lambda property level rule to business rules.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="ruleHandler">Rule method</param>
            <param name="primaryPropertyName">Primary Property name</param>
            <param name="priority">Priority</param>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AddRule(Csla.Rules.BusinessRules,Csla.Validation.RuleHandler,System.String)">
            <summary>
            Adds a lambda property level rule to business rules.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="ruleHandler">Rule method</param>
            <param name="primaryPropertyName">Primary Property name</param>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AddRule(Csla.Rules.BusinessRules,Csla.Validation.RuleHandler,Csla.Validation.RuleArgs)">
            <summary>
            Adds a lambda property level rule to business rules.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="ruleHandler">Rule method</param>
            <param name="args">RuleArgs argument.</param>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AddRule(Csla.Rules.BusinessRules,Csla.Validation.RuleHandler,Csla.Validation.RuleArgs,System.Int32)">
            <summary>
            Adds a lambda property level rule to business rules.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="ruleHandler">Rule method</param>
            <param name="args">RuleArgs argument.</param>
            <param name="priority">Priority</param>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AddDependentProperty(Csla.Rules.BusinessRules,Csla.Core.IPropertyInfo,Csla.Core.IPropertyInfo,System.Boolean)">
            <summary>
            Adds a dependency between two properties.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyInfo">The property.</param>
            <param name="dependentPropertyInfo">The dependent property.</param>
            <param name="isBidirectional">if set to <c>true</c> then dependency is bidirectional.</param>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AddDependentProperty(Csla.Rules.BusinessRules,Csla.Core.IPropertyInfo,Csla.Core.IPropertyInfo)">
            <summary>
            Adds a dependency between two properties from first property to second proerty
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyInfo">The property.</param>
            <param name="dependentPropertyInfo">The dependent property.</param>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AddDependentProperty(Csla.Rules.BusinessRules,System.String,System.String)">
            <summary>
            Adds a dependency between two properties from first property to second proerty
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyName">Name of the property.</param>
            <param name="dependentPropertyName">Name of the dependent property.</param>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AddDependentProperty(Csla.Rules.BusinessRules,System.String,System.String,System.Boolean)">
            <summary>
            Adds a dependency between two properties from first property to second proerty
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyName">Name of the property.</param>
            <param name="dependentPropertyName">Name of the dependent property.</param>
            <param name="isBidirectional">if set to <c>true</c> [is bidirectional].</param>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AllowRead(Csla.Rules.BusinessRules,Csla.Core.IPropertyInfo,System.String[])">
            <summary>
            Specify the roles allowed to read a given
            property.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyInfo">PropertyInfo for the property.</param>
            <param name="roles">List of roles granted read access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of allowed roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AllowRead(Csla.Rules.BusinessRules,System.String,System.String[])">
            <summary>
            Specify the roles allowed to read a given
            property.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyName">Name of the property.</param>
            <param name="roles">List of roles granted read access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of allowed roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.DenyRead(Csla.Rules.BusinessRules,Csla.Core.IPropertyInfo,System.String[])">
            <summary>
            Specify the roles denied read access to
            a given property.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyInfo">PropertyInfo for the property.</param>
            <param name="roles">List of roles denied read access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of denied roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.DenyRead(Csla.Rules.BusinessRules,System.String,System.String[])">
            <summary>
            Specify the roles denied read access to
            a given property.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyName">Name of the property.</param>
            <param name="roles">List of roles denied read access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of denied roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AllowWrite(Csla.Rules.BusinessRules,Csla.Core.IPropertyInfo,System.String[])">
            <summary>
            Specify the roles allowed to write a given
            property.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyInfo">PropertyInfo for the property.</param>
            <param name="roles">List of roles granted write access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of allowed roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AllowWrite(Csla.Rules.BusinessRules,System.String,System.String[])">
            <summary>
            Specify the roles allowed to write a given
            property.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyName">Name of the property.</param>
            <param name="roles">List of roles granted write access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of allowed roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.DenyWrite(Csla.Rules.BusinessRules,Csla.Core.IPropertyInfo,System.String[])">
            <summary>
            Specify the roles denied write access to
            a given property.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyInfo">PropertyInfo for the property.</param>
            <param name="roles">List of roles denied write access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of denied roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.DenyWrite(Csla.Rules.BusinessRules,System.String,System.String[])">
            <summary>
            Specify the roles denied write access to
            a given property.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyName">Name of the property.</param>
            <param name="roles">List of roles denied write access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of denied roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AllowExecute(Csla.Rules.BusinessRules,Csla.Core.IMemberInfo,System.String[])">
            <summary>
            Specify the roles allowed to execute a given
            method.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="memberInfo">The member info.</param>
            <param name="roles">List of roles granted execute access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of allowed roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.AllowExecute(Csla.Rules.BusinessRules,System.String,System.String[])">
            <summary>
            Specify the roles allowed to execute a given
            method.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="methodName">Name of the method.</param>
            <param name="roles">List of roles granted execute access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of allowed roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.DenyExecute(Csla.Rules.BusinessRules,Csla.Core.IMemberInfo,System.String[])">
            <summary>
            Specify the roles denied the right to execute
            a given method.
            </summary>
            <param name="businessRules">Business rules.</param>
            <param name="methodInfo">Method info for themethod.</param>
            <param name="roles">List of roles denied execute access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of denied roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.DenyExecute(Csla.Rules.BusinessRules,System.String,System.String[])">
            <summary>
            Specify the roles denied the right to execute
            a given method.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="methodName">Name of the method.</param>
            <param name="roles">List of roles denied execute access.</param>
            <remarks>
            This method may be called multiple times, with the roles in
            each call being added to the end of the list of denied roles.
            In other words, each call is cumulative, adding more roles
            to the list.
            </remarks>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.HasReadAllowedRoles(Csla.Rules.BusinessRules,System.String)">
            <summary>
            Indicates whether the property has a list
            of roles granted read access.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
              <c>true</c> if [has read allowed roles] [the specified business rules]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.IsReadAllowed(Csla.Rules.BusinessRules,System.String)">
            <summary>
            Indicates whether the current user as defined by
            <see cref="P:Csla.ApplicationContext.User"/>
            is explicitly allowed to read the property.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
              <c>true</c> if [is read allowed] [the specified business rules]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.HasReadDeniedRoles(Csla.Rules.BusinessRules,System.String)">
            <summary>
            Indicates whether the property has a list
            of roles denied read access.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
              <c>true</c> if [has read denied roles] [the specified business rules]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.IsReadDenied(Csla.Rules.BusinessRules,System.String)">
            <summary>
            Indicates whether the current user as defined by
            <see cref="P:Csla.ApplicationContext.User"/>
            is explicitly denied read access to the property.
            </summary>
            <param name="businessRules">Business rules list.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
              <c>true</c> if [is read denied] [the specified business rules]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.HasWriteAllowedRoles(Csla.Rules.BusinessRules,System.String)">
            <summary>
            Indicates whether the property has a list
            of roles granted write access.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
              <c>true</c> if [has write allowed roles] [the specified business rules]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.IsWriteAllowed(Csla.Rules.BusinessRules,System.String)">
            <summary>
            Indicates whether the current user as defined by
            <see cref="P:Csla.ApplicationContext.User"/>
            is explicitly allowed to set the property.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
              <c>true</c> if [is write allowed] [the specified business rules]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.HasWriteDeniedRoles(Csla.Rules.BusinessRules,System.String)">
            <summary>
            Indicates whether the property has a list
            of roles denied write access.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
              <c>true</c> if [has write denied roles] [the specified business rules]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.IsWriteDenied(Csla.Rules.BusinessRules,System.String)">
            <summary>
            Indicates whether the current user as defined by
            <see cref="P:Csla.ApplicationContext.User"/>
            is explicitly denied write access to the property.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
              <c>true</c> if [is write denied] [the specified business rules]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.HasExecuteAllowedRoles(Csla.Rules.BusinessRules,System.String)">
            <summary>
            Indicates whether the property has a list
            of roles granted execute access.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="methodName">Name of the method.</param>
            <returns>
              <c>true</c> if [has execute allowed roles] [the specified business rules]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.IsExecuteAllowed(Csla.Rules.BusinessRules,System.String)">
            <summary>
            Indicates whether the current user as defined by
            <see cref="P:Csla.ApplicationContext.User"/>
            is explicitly allowed to execute the method.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="methodName">Name of the method.</param>
            <returns>
              <c>true</c> if [is execute allowed] [the specified business rules]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.HasExecuteDeniedRoles(Csla.Rules.BusinessRules,System.String)">
            <summary>
            Indicates whether the property has a list
            of roles denied execute access.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="methodName">Name of the method.</param>
            <returns>
              <c>true</c> if [has execute denied roles] [the specified business rules]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Csla.Validation.RuleExtensions.IsExecuteDenied(Csla.Rules.BusinessRules,System.String)">
            <summary>
            Indicates whether the current user as defined by
            <see cref="P:Csla.ApplicationContext.User"/>
            is explicitly denied execute access to the method.
            </summary>
            <param name="businessRules">Business rules</param>
            <param name="methodName">Name of the method.</param>
            <returns>
              <c>true</c> if [is execute denied] [the specified business rules]; otherwise, <c>false</c>.
            </returns>
        </member>
    </members>
</doc>
