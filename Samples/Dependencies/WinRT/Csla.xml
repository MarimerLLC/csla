<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Csla</name>
    </assembly>
    <members>
        <member name="T:Csla.BusinessBindingListBase`2">
            <summary>
            This is the base class from which most business collections
            or lists will be derived.
            </summary>
            <typeparam name="T">Type of the business object being defined.</typeparam>
            <typeparam name="C">Type of the child objects contained in the list.</typeparam>
        </member>
        <member name="T:Csla.BusinessListBase`2">
            <summary>
            This is the base class from which most business collections
            or lists will be derived.
            </summary>
            <typeparam name="T">Type of the business object being defined.</typeparam>
            <typeparam name="C">Type of the child objects contained in the list.</typeparam>
        </member>
        <member name="T:Csla.Core.ExtendedBindingList`1">
            <summary>
            Extends BindingList of T by adding extra
            behaviors.
            </summary>
            <typeparam name="T">Type of item contained in list.</typeparam>
        </member>
        <member name="T:Csla.Core.MobileBindingList`1">
            <summary>
            Inherit from this base class to easily
            create a serializable list class.
            </summary>
            <typeparam name="T">
            Type of the items contained in the list.
            </typeparam>
        </member>
        <member name="T:Csla.Core.BindingList`1">
            <summary>
            Base collection class that supports serialization to/from
            a .NET BindingList.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Csla.Core.IBindingList">
            <summary>
            Defines a bindable collection
            object.
            </summary>
        </member>
        <member name="M:Csla.Core.IBindingList.AddNew">
            <summary>
            Adds a new item to the collection.
            </summary>
        </member>
        <member name="M:Csla.Core.BindingList`1.AddNew">
            <summary>
            Begins an asyncronous operation to
            add a new item to this collection.
            </summary>
        </member>
        <member name="M:Csla.Core.BindingList`1.OnAddedNew(`0)">
            <summary>
            Raises the AddedNew event.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Csla.Core.BindingList`1.AddNewCore">
            <summary>
            Override this method to start an asynchronous
            operation to create a new object that is added
            to the collection. You MUST call OnCoreAdded()
            when the asynchronous operation is complete.
            </summary>
        </member>
        <member name="M:Csla.Core.BindingList`1.OnCoreAdded(System.Object,Csla.DataPortalResult{`0})">
            <summary>
            Handler called when the async AddNewCore
            operation is complete. This method adds the
            new item to the collection and raises
            the AddedNew event.
            </summary>
            <param name="sender">
            Calling object.
            </param>
            <param name="e">
            Object containing the results of the asynchronous operation.
            </param>
        </member>
        <member name="M:Csla.Core.BindingList`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Csla.Core.BindingList`1.SupportsChangeNotificationCore">
            <summary>
            Gets a value indicating whether this object
            supports change notification.
            </summary>
        </member>
        <member name="P:Csla.Core.BindingList`1.AllowEdit">
            <summary>
            Gets or sets a value indicating whether data binding
            can automatically edit items in this collection.
            </summary>
        </member>
        <member name="P:Csla.Core.BindingList`1.AllowNew">
            <summary>
            Gets or sets a value indicating whether data binding
            can automatically add new items to this collection.
            </summary>
        </member>
        <member name="P:Csla.Core.BindingList`1.AllowRemove">
            <summary>
            Gets or sets a value indicating whether data binding
            can automatically remove items from this collection.
            </summary>
        </member>
        <member name="P:Csla.Core.BindingList`1.RaiseListChangedEvents">
            <summary>
            Gets or sets a value indicating whether the
            collection should raise changed events.
            </summary>
        </member>
        <member name="E:Csla.Core.BindingList`1.AddedNew">
            <summary>
            Event raised when a new object has been 
            added to the collection.
            </summary>
        </member>
        <member name="T:Csla.Serialization.Mobile.IMobileObject">
            <summary>
            Interface to be implemented by any object
            that supports serialization by the
            MobileFormatter.
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.IMobileObject.GetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Method called by MobileFormatter when an object
            should serialize its data. The data should be
            serialized into the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object to contain the serialized data.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.IMobileObject.GetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Method called by MobileFormatter when an object
            should serialize its child references. The data should be
            serialized into the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object to contain the serialized data.
            </param>
            <param name="formatter">
            Reference to the formatter performing the serialization.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.IMobileObject.SetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Method called by MobileFormatter when an object
            should be deserialized. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.IMobileObject.SetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Method called by MobileFormatter when an object
            should deserialize its child references. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
            <param name="formatter">
            Reference to the formatter performing the deserialization.
            </param>
        </member>
        <member name="M:Csla.Core.MobileBindingList`1.OnGetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to get custom field values
            from the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
        </member>
        <member name="M:Csla.Core.MobileBindingList`1.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to get custom child object
            values from the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="formatter">Reference to the MobileFormatter.</param>
        </member>
        <member name="M:Csla.Core.MobileBindingList`1.OnSetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to set custom field values
            into the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
        </member>
        <member name="M:Csla.Core.MobileBindingList`1.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to set custom child object
            values into the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="formatter">Reference to the MobileFormatter.</param>
        </member>
        <member name="T:Csla.Core.IExtendedBindingList">
            <summary>
            Extends <see cref="T:Csla.Core.IBindingList"/> by adding extra
            events.
            </summary>
        </member>
        <member name="E:Csla.Core.IExtendedBindingList.RemovingItem">
            <summary>
            Event indicating that an item is being
            removed from the list.
            </summary>
        </member>
        <member name="T:Csla.Core.INotifyBusy">
            <summary>
            Interface defining an object that notifies when it
            is busy executing an asynchronous operation.
            </summary>
        </member>
        <member name="T:Csla.Core.INotifyUnhandledAsyncException">
            <summary>
            Implemented by an object that perfoms asynchronous
            operations that may raise exceptions.
            </summary>
        </member>
        <member name="E:Csla.Core.INotifyUnhandledAsyncException.UnhandledAsyncException">
            <summary>
            Event indicating that an exception occurred during
            an asynchronous operation.
            </summary>
        </member>
        <member name="E:Csla.Core.INotifyBusy.BusyChanged">
            <summary>
            Event raised when the object's busy
            status changes.
            </summary>
        </member>
        <member name="P:Csla.Core.INotifyBusy.IsBusy">
            <summary>
            Gets a value indicating whether the object,
            or any of the object's child objects, are
            busy running an asynchronous operation.
            </summary>
        </member>
        <member name="P:Csla.Core.INotifyBusy.IsSelfBusy">
            <summary>
            Gets a value indicating whether the object
            is busy running an asynchronous operation.
            </summary>
        </member>
        <member name="T:Csla.Serialization.Mobile.ISerializationNotification">
            <summary>
            Interface defining callback methods used
            by the MobileFormatter.
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.ISerializationNotification.Deserialized">
            <summary>
            Method called on an object after deserialization
            is complete.
            </summary>
            <remarks>
            This method is called on all objects in an
            object graph after all the objects have been
            deserialized.
            </remarks>
        </member>
        <member name="T:Csla.Core.INotifyChildChanged">
            <summary>
            Implemented by classes that notify when 
            a child object has changed.
            </summary>
        </member>
        <member name="E:Csla.Core.INotifyChildChanged.ChildChanged">
            <summary>
            Event indictating that a child object
            has changed.
            </summary>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.OnRemovingItem(`0)">
            <summary>
            Raise the RemovingItem event.
            </summary>
            <param name="removedItem">
            A reference to the item that 
            is being removed.
            </param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.RemoveItem(System.Int32)">
            <summary>
            Remove the item at the
            specified index.
            </summary>
            <param name="index">
            The zero-based index of the item
            to remove.
            </param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a range of items to the list.
            </summary>
            <param name="range">List of items to add.</param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.InsertItem(System.Int32,`0)">
            <summary>
            Invoked when an item is inserted into
            the collection.
            </summary>
            <param name="index">Index of the item</param>
            <param name="item">Item that was inserted</param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.OnAddEventHooks(`0)">
            <summary>
            Invoked when events should be hooked for
            an added item.
            </summary>
            <param name="item">Item that was added</param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.OnRemoveEventHooks(`0)">
            <summary>
            Invoked when events should be unhooked for
            a removed item.
            </summary>
            <param name="item">Item that was removed</param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.OnDeserialized">
            <summary>
            This method is called on a newly deserialized object
            after deserialization is complete.
            </summary>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.OnBusyChanged(Csla.Core.BusyChangedEventArgs)">
            <summary>
            Raise the BusyChanged event.
            </summary>
            <param name="args">Event args</param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.OnBusyChanged(System.String,System.Boolean)">
            <summary>
            Raise the BusyChanged event.
            </summary>
            <param name="propertyName">Affected property</param>
            <param name="busy">New busy status</param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.OnUnhandledAsyncException(Csla.Core.ErrorEventArgs)">
            <summary>
            Raises the UnhandledAsyncException event.
            </summary>
            <param name="error">Exception that occurred</param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.OnUnhandledAsyncException(System.Object,System.Exception)">
            <summary>
            Raises the UnhandledAsyncException event.
            </summary>
            <param name="originalSender">Object that threw the original
            exception</param>
            <param name="error">Exception that occurred</param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.OnChildChanged(Csla.Core.ChildChangedEventArgs)">
            <summary>
            Raises the ChildChanged event, indicating that a child
            object has been changed.
            </summary>
            <param name="e">
            ChildChangedEventArgs object.
            </param>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.RaiseChildChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Creates a ChildChangedEventArgs and raises the event.
            </summary>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.Child_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles any PropertyChanged event from 
            a child object and echoes it up as
            a ChildChanged event.
            </summary>
        </member>
        <member name="M:Csla.Core.ExtendedBindingList`1.Child_Changed(System.Object,Csla.Core.ChildChangedEventArgs)">
            <summary>
            Handles any ChildChanged event from
            a child object and echoes it up as
            a ChildChanged event.
            </summary>
        </member>
        <member name="E:Csla.Core.ExtendedBindingList`1.RemovingItem">
            <summary>
            Implements a serialization-safe RemovingItem event.
            </summary>
        </member>
        <member name="E:Csla.Core.ExtendedBindingList`1.BusyChanged">
            <summary>
            Event raised when the busy status has changed.
            </summary>
        </member>
        <member name="P:Csla.Core.ExtendedBindingList`1.IsBusy">
            <summary>
            Gets a value indicating whether this object
            or any of its child objects is running an 
            async operation.
            </summary>
        </member>
        <member name="P:Csla.Core.ExtendedBindingList`1.IsSelfBusy">
            <summary>
            Gets a value indicating whether this object
            is running an async operation.
            </summary>
        </member>
        <member name="E:Csla.Core.ExtendedBindingList`1.UnhandledAsyncException">
            <summary>
            Event raised when an unhandled exception occurs during
            async processing.
            </summary>
        </member>
        <member name="E:Csla.Core.ExtendedBindingList`1.ChildChanged">
            <summary>
            Event raised when a child object has been changed.
            </summary>
        </member>
        <member name="P:Csla.Core.ExtendedBindingList`1.SuppressListChangedEvents">
            <summary>
            Use this object to suppress ListChangedEvents for an entire code block.
            May be nested in multiple levels for the same object.
            </summary>
        </member>
        <member name="T:Csla.Core.ExtendedBindingList`1.SuppressListChangedEventsClass`1">
            <summary>
            Handles the suppressing of raising ChangedEvents when altering the content of an ObservableBindingList.
            Will be instanciated by a factory property on the ObservableBindingList implementation.
            </summary>
            <typeparam name="TC">The type of the C.</typeparam>
        </member>
        <member name="T:Csla.Core.IEditableCollection">
            <summary>
            Defines the common methods required by all
            editable CSLA collection objects.
            </summary>
            <remarks>
            It is strongly recommended that the implementations
            of the methods in this interface be made Private
            so as to not clutter up the native interface of
            the collection objects.
            </remarks>
        </member>
        <member name="T:Csla.Core.IBusinessObject">
            <summary>
            This is the core interface implemented
            by all CSLA .NET base classes.
            </summary>
        </member>
        <member name="T:Csla.Core.ISupportUndo">
            <summary>
            Define the common methods used by the UI to 
            interact with n-level undo.
            </summary>
            <remarks>
            This interface is designed to help UI framework
            developers interact with editable business objects.
            The CSLA .NET editable base classes already
            implement this interface and the required n-level
            undo behaviors.
            </remarks>
        </member>
        <member name="M:Csla.Core.ISupportUndo.BeginEdit">
            <summary>
            Starts a nested edit on the object.
            </summary>
        </member>
        <member name="M:Csla.Core.ISupportUndo.CancelEdit">
            <summary>
            Cancels the current edit process, restoring the object's state to
            its previous values.
            </summary>
        </member>
        <member name="M:Csla.Core.ISupportUndo.ApplyEdit">
            <summary>
            Commits the current edit process.
            </summary>
        </member>
        <member name="T:Csla.Core.ITrackStatus">
            <summary>
            Defines the common properties required objects
            that track their own status.
            </summary>
        </member>
        <member name="P:Csla.Core.ITrackStatus.IsValid">
            <summary>
            Returns <see langword="true" /> if the object 
            and its child objects are currently valid, 
            <see langword="false" /> if the
            object or any of its child objects have broken 
            rules or are otherwise invalid.
            </summary>
            <remarks>
            <para>
            By default this property relies on the underling ValidationRules
            object to track whether any business rules are currently broken for this object.
            </para><para>
            You can override this property to provide more sophisticated
            implementations of the behavior. For instance, you should always override
            this method if your object has child objects, since the validity of this object
            is affected by the validity of all child objects.
            </para>
            </remarks>
            <returns>A value indicating if the object is currently valid.</returns>
        </member>
        <member name="P:Csla.Core.ITrackStatus.IsSelfValid">
            <summary>
            Returns <see langword="true" /> if the object is currently 
            valid, <see langword="false" /> if the
            object has broken rules or is otherwise invalid.
            </summary>
            <remarks>
            <para>
            By default this property relies on the underling ValidationRules
            object to track whether any business rules are currently broken for this object.
            </para><para>
            You can override this property to provide more sophisticated
            implementations of the behavior.
            </para>
            </remarks>
            <returns>A value indicating if the object is currently valid.</returns>
        </member>
        <member name="P:Csla.Core.ITrackStatus.IsDirty">
            <summary>
            Returns <see langword="true" /> if this object's 
            data, or any of its fields or child objects data, 
            has been changed.
            </summary>
            <remarks>
            <para>
            When an object's data is changed, CSLA .NET makes note of that change
            and considers the object to be 'dirty' or changed. This value is used to
            optimize data updates, since an unchanged object does not need to be
            updated into the database. All new objects are considered dirty. All objects
            marked for deletion are considered dirty.
            </para><para>
            Once an object's data has been saved to the database (inserted or updated)
            the dirty flag is cleared and the object is considered unchanged. Objects
            newly loaded from the database are also considered unchanged.
            </para>
            </remarks>
            <returns>A value indicating if this object's data has been changed.</returns>
        </member>
        <member name="P:Csla.Core.ITrackStatus.IsSelfDirty">
            <summary>
            Returns <see langword="true" /> if this object's data has been changed.
            </summary>
            <remarks>
            <para>
            When an object's data is changed, CSLA .NET makes note of that change
            and considers the object to be 'dirty' or changed. This value is used to
            optimize data updates, since an unchanged object does not need to be
            updated into the database. All new objects are considered dirty. All objects
            marked for deletion are considered dirty.
            </para><para>
            Once an object's data has been saved to the database (inserted or updated)
            the dirty flag is cleared and the object is considered unchanged. Objects
            newly loaded from the database are also considered unchanged.
            </para>
            </remarks>
            <returns>A value indicating if this object's data has been changed.</returns>
        </member>
        <member name="P:Csla.Core.ITrackStatus.IsDeleted">
            <summary>
            Returns <see langword="true" /> if this object is marked for deletion.
            </summary>
            <remarks>
            CSLA .NET supports both immediate and deferred deletion of objects. This
            property is part of the support for deferred deletion, where an object
            can be marked for deletion, but isn't actually deleted until the object
            is saved to the database. This property indicates whether or not the
            current object has been marked for deletion. If it is <see langword="true" />
            , the object will
            be deleted when it is saved to the database, otherwise it will be inserted
            or updated by the save operation.
            </remarks>
            <returns>A value indicating if this object is marked for deletion.</returns>
        </member>
        <member name="P:Csla.Core.ITrackStatus.IsNew">
            <summary>
            Returns <see langword="true" /> if this is a new object, 
            <see langword="false" /> if it is a pre-existing object.
            </summary>
            <remarks>
            An object is considered to be new if its primary identifying (key) value 
            doesn't correspond to data in the database. In other words, 
            if the data values in this particular
            object have not yet been saved to the database the object is considered to
            be new. Likewise, if the object's data has been deleted from the database
            then the object is considered to be new.
            </remarks>
            <returns>A value indicating if this object is new.</returns>
        </member>
        <member name="P:Csla.Core.ITrackStatus.IsSavable">
            <summary>
            Returns <see langword="true" /> if this object is both dirty and valid.
            </summary>
            <remarks>
            An object is considered dirty (changed) if 
            <see cref="P:Csla.BusinessBase.IsDirty" /> returns <see langword="true" />. It is
            considered valid if IsValid
            returns <see langword="true" />. The IsSavable property is
            a combination of these two properties. 
            </remarks>
            <returns>A value indicating if this object is both dirty and valid.</returns>
        </member>
        <member name="P:Csla.Core.ITrackStatus.IsChild">
            <summary>
            Returns <see langword="true" /> if this is a child object, 
            <see langword="false" /> if it is a root object.
            </summary>
            <remarks>
            An object should be marked as a child object unless it is the
            top most object (root object) in a business object graph.
            </remarks>
            <returns>A value indicating if this a child object.</returns>
        </member>
        <member name="M:Csla.Core.IEditableCollection.RemoveChild(Csla.Core.IEditableBusinessObject)">
            <summary>
            Removes the specified child from the parent
            collection.
            </summary>
            <param name="child">Child object to be removed.</param>
        </member>
        <member name="M:Csla.Core.IEditableCollection.SetParent(Csla.Core.IParent)">
            <summary>
            Used by BusinessListBase as a child object is 
            created to tell the child object about its
            parent.
            </summary>
            <param name="parent">A reference to the parent collection object.</param>
        </member>
        <member name="M:Csla.Core.IEditableCollection.GetDeletedList">
            <summary>
            Used by ObjectFactory to gain access to the
            list of deleted items contained in the collection.
            </summary>
        </member>
        <member name="T:Csla.Core.IUndoableObject">
            <summary>
            Defines the methods required to participate
            in n-level undo within the CSLA .NET framework.
            </summary>
            <remarks>
            This interface is used by Csla.Core.UndoableBase
            to initiate begin, cancel and apply edit operations.
            </remarks>
        </member>
        <member name="M:Csla.Core.IUndoableObject.CopyState(System.Int32,System.Boolean)">
            <summary>
            Copies the state of the object and places the copy
            onto the state stack.
            </summary>
            <param name="parentEditLevel">
            Parent object's edit level.
            </param>
            <param name="parentBindingEdit">
            Is the parent data bound?
            </param>
        </member>
        <member name="M:Csla.Core.IUndoableObject.UndoChanges(System.Int32,System.Boolean)">
            <summary>
            Restores the object's state to the most recently
            copied values from the state stack.
            </summary>
            <remarks>
            Restores the state of the object to its
            previous value by taking the data out of
            the stack and restoring it into the fields
            of the object.
            </remarks>
            <param name="parentEditLevel">
            Parent object's edit level.
            </param>
            <param name="parentBindingEdit">
            Is the parent data bound?
            </param>
        </member>
        <member name="M:Csla.Core.IUndoableObject.AcceptChanges(System.Int32,System.Boolean)">
            <summary>
            Accepts any changes made to the object since the last
            state copy was made.
            </summary>
            <remarks>
            The most recent state copy is removed from the state
            stack and discarded, thus committing any changes made
            to the object's state.
            </remarks>
            <param name="parentEditLevel">
            Parent object's edit level.
            </param>
            <param name="parentBindingEdit">
            Is the parent data bound?
            </param>
        </member>
        <member name="P:Csla.Core.IUndoableObject.EditLevel">
            <summary>
            Gets the current edit level of the object.
            </summary>
        </member>
        <member name="T:Csla.ICloneable">
            <summary>
            Defines a cloneable object.
            </summary>
        </member>
        <member name="M:Csla.ICloneable.Clone">
            <summary>
            Gets a clone of the object.
            </summary>
        </member>
        <member name="T:Csla.Core.ISavable">
            <summary>
            Specifies that the object can save
            itself.
            </summary>
        </member>
        <member name="M:Csla.Core.ISavable.SaveAsync">
            <summary>
            Saves the object to the database.
            </summary>
            <returns>A new object containing the saved values.</returns>
        </member>
        <member name="M:Csla.Core.ISavable.SaveAsync(System.Boolean)">
            <summary>
            Saves the object to the database.
            </summary>
            <returns>A new object containing the saved values.</returns>
            <param name="forceUpdate">true to force the save to be an update.</param>
        </member>
        <member name="M:Csla.Core.ISavable.BeginSave">
            <summary>
            Saves the object to the database asynchronously. The saved event will contain
            the new object when the save operation completes.
            </summary>
        </member>
        <member name="M:Csla.Core.ISavable.BeginSave(System.Object)">
            <summary>
            Saves the object to the database asynchronously. The saved event will contain
            the new object when the save operation completes.
            </summary>
            <param name="userState">
            User state object.
            </param>
        </member>
        <member name="M:Csla.Core.ISavable.SaveComplete(System.Object)">
            <summary>
            INTERNAL CSLA .NET USE ONLY.
            </summary>
            <param name="newObject">
            The new object returned as a result of the save.
            </param>
        </member>
        <member name="E:Csla.Core.ISavable.Saved">
            <summary>
            Event raised when an object has been saved.
            </summary>
        </member>
        <member name="T:Csla.Core.ISavable`1">
            <summary>
            Specifies that the object can save
            itself.
            </summary>
        </member>
        <member name="M:Csla.Core.ISavable`1.SaveAsync">
            <summary>
            Saves the object to the database.
            </summary>
            <returns>A new object containing the saved values.</returns>
        </member>
        <member name="M:Csla.Core.ISavable`1.SaveAsync(System.Boolean)">
            <summary>
            Saves the object to the database.
            </summary>
            <returns>A new object containing the saved values.</returns>
            <param name="forceUpdate">true to force the save to be an update.</param>
        </member>
        <member name="M:Csla.Core.ISavable`1.BeginSave">
            <summary>
            Saves the object to the database asynchronously. The saved event will contain
            the new object when the save operation completes.
            </summary>
        </member>
        <member name="M:Csla.Core.ISavable`1.BeginSave(System.Object)">
            <summary>
            Saves the object to the database asynchronously. The saved event will contain
            the new object when the save operation completes.
            </summary>
            <param name="userState">
            User state object.
            </param>
        </member>
        <member name="M:Csla.Core.ISavable`1.SaveComplete(`0)">
            <summary>
            INTERNAL CSLA .NET USE ONLY.
            </summary>
            <param name="newObject">
            The new object returned as a result of the save.
            </param>
        </member>
        <member name="E:Csla.Core.ISavable`1.Saved">
            <summary>
            Event raised when an object has been saved.
            </summary>
        </member>
        <member name="T:Csla.Core.IParent">
            <summary>
            Defines the interface that must be implemented
            by any business object that contains child
            objects.
            </summary>
        </member>
        <member name="M:Csla.Core.IParent.RemoveChild(Csla.Core.IEditableBusinessObject)">
            <summary>
            This method is called by a child object when it
            wants to be removed from the collection.
            </summary>
            <param name="child">The child object to remove.</param>
        </member>
        <member name="M:Csla.Core.IParent.ApplyEditChild(Csla.Core.IEditableBusinessObject)">
            <summary>
            Override this method to be notified when a child object's
            <see cref="M:Csla.Core.BusinessBase.ApplyEdit"/> method has
            completed.
            </summary>
            <param name="child">The child object that was edited.</param>
        </member>
        <member name="P:Csla.Core.IParent.Parent">
            <summary>
            Provide access to the parent reference for use
            in child object code.
            </summary>
            <remarks>
            This value will be Nothing for root objects.
            </remarks>
        </member>
        <member name="T:Csla.IBusinessListBase`1">
            <summary>
            This is the base class from which most business collections
            or lists will be derived.
            </summary>
            <typeparam name="C">Type of the child objects contained in the list.</typeparam>
        </member>
        <member name="M:Csla.BusinessListBase`2.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.Initialize">
            <summary>
            Override this method to set up event handlers so user
            code in a partial class can respond to events raised by
            generated code.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.GetClone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>A new object containing the exact data of the original object.</returns>
        </member>
        <member name="M:Csla.BusinessListBase`2.Clone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>A new object containing the exact data of the original object.</returns>
        </member>
        <member name="M:Csla.BusinessListBase`2.ContainsDeleted(`1)">
            <summary>
            Returns <see langword="true"/> if the internal deleted list
            contains the specified child object.
            </summary>
            <param name="item">Child object to check.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.BeginEdit">
            <summary>
            Starts a nested edit on the object.
            </summary>
            <remarks>
            <para>
            When this method is called the object takes a snapshot of
            its current state (the values of its variables). This snapshot
            can be restored by calling <see cref="M:Csla.BusinessListBase`2.CancelEdit"/>
            or committed by calling <see cref="M:Csla.BusinessListBase`2.ApplyEdit"/>.
            </para><para>
            This is a nested operation. Each call to BeginEdit adds a new
            snapshot of the object's state to a stack. You should ensure that 
            for each call to BeginEdit there is a corresponding call to either 
            CancelEdit or ApplyEdit to remove that snapshot from the stack.
            </para><para>
            See Chapters 2 and 3 for details on n-level undo and state stacking.
            </para><para>
            This method triggers the copying of all child object states.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.BusinessListBase`2.CancelEdit">
            <summary>
            Cancels the current edit process, restoring the object's state to
            its previous values.
            </summary>
            <remarks>
            Calling this method causes the most recently taken snapshot of the 
            object's state to be restored. This resets the object's values
            to the point of the last <see cref="M:Csla.BusinessListBase`2.BeginEdit"/>
            call.
            <para>
            This method triggers an undo in all child objects.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.BusinessListBase`2.ApplyEdit">
            <summary>
            Commits the current edit process.
            </summary>
            <remarks>
            Calling this method causes the most recently taken snapshot of the 
            object's state to be discarded, thus committing any changes made
            to the object's state since the last 
            <see cref="M:Csla.BusinessListBase`2.BeginEdit"/> call.
            <para>
            This method triggers an <see cref="M:Csla.Core.BusinessBase.ApplyEdit"/>
             in all child objects.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.BusinessListBase`2.EditChildComplete(Csla.Core.IEditableBusinessObject)">
            <summary>
            Override this method to be notified when a child object's
            <see cref="M:Csla.Core.BusinessBase.ApplyEdit"/> method has
            completed.
            </summary>
            <param name="child">The child object that was edited.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.AddNewCore">
            <summary>
            Override this method to create a new object that is added
            to the collection. 
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.Csla#Core#IEditableCollection#RemoveChild(Csla.Core.IEditableBusinessObject)">
            <summary>
            This method is called by a child object when it
            wants to be removed from the collection.
            </summary>
            <param name="child">The child object to remove.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.Csla#Core#IParent#RemoveChild(Csla.Core.IEditableBusinessObject)">
            <summary>
            This method is called by a child object when it
            wants to be removed from the collection.
            </summary>
            <param name="child">The child object to remove.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.InsertItem(System.Int32,`1)">
            <summary>
            Sets the edit level of the child object as it is added.
            </summary>
            <param name="index">Index of the item to insert.</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.RemoveItem(System.Int32)">
            <summary>
            Marks the child object for deletion and moves it to
            the collection of deleted objects.
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.SetItem(System.Int32,`1)">
            <summary>
            Replaces the item at the specified index with
            the specified item, first moving the original
            item to the deleted list.
            </summary>
            <param name="index">The zero-based index of the item to replace.</param>
            <param name="item">
            The new value for the item at the specified index. 
            The value can be null for reference types.
            </param>
            <remarks></remarks>
        </member>
        <member name="M:Csla.BusinessListBase`2.ClearItems">
            <summary>
            Clears the collection, moving all active
            items to the deleted list.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.OnGetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Method called by MobileFormatter when an object
            should serialize its data. The data should be
            serialized into the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object to contain the serialized data.
            </param>
        </member>
        <member name="M:Csla.BusinessListBase`2.OnSetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Method called by MobileFormatter when an object
            should be deserialized. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
        </member>
        <member name="M:Csla.BusinessListBase`2.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Method called by MobileFormatter when an object
            should serialize its child references. The data should be
            serialized into the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object to contain the serialized data.
            </param>
            <param name="formatter">
            Reference to the formatter performing the serialization.
            </param>
        </member>
        <member name="M:Csla.BusinessListBase`2.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Method called by MobileFormatter when an object
            should deserialize its child references. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
            <param name="formatter">
            Reference to the formatter performing the deserialization.
            </param>
        </member>
        <member name="M:Csla.BusinessListBase`2.MarkAsChild">
            <summary>
            Marks the object as being a child object.
            </summary>
            <remarks>
            <para>
            By default all business objects are 'parent' objects. This means
            that they can be directly retrieved and updated into the database.
            </para><para>
            We often also need child objects. These are objects which are contained
            within other objects. For instance, a parent Invoice object will contain
            child LineItem objects.
            </para><para>
            To create a child object, the MarkAsChild method must be called as the
            object is created. Please see Chapter 7 for details on the use of the
            MarkAsChild method.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.BusinessListBase`2.OnDeserialized">
            <summary>
            Reset parent references on deserialization.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.Child_Create">
            <summary>
            Initializes a new instance of the object
            with default values.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.Child_Update(System.Object[])">
            <summary>
            Saves all items in the list, automatically
            performing insert, update or delete operations
            as necessary.
            </summary>
            <param name="parameters">
            Optional parameters passed to child update
            methods.
            </param>
        </member>
        <member name="M:Csla.BusinessListBase`2.SaveAsync">
            <summary>
            Saves the object to the database.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.BeginSave">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.BeginSave(System.Object)">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.BeginSave(System.EventHandler{Csla.Core.SavedEventArgs})">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
            <param name="handler">
            Method called when the operation is complete.
            </param>
        </member>
        <member name="M:Csla.BusinessListBase`2.BeginSave(System.EventHandler{Csla.Core.SavedEventArgs},System.Object)">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
            <param name="handler">
            Method called when the operation is complete.
            </param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.DataPortal_Create">
            <summary>
            Override this method to load a new business object with default
            values from the database.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.DataPortal_Update">
            <summary>
            Override this method to allow update of a business
            object.
            </summary>
        </member>
        <member name="M:Csla.BusinessListBase`2.DataPortal_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.DataPortal_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.DataPortal_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.Child_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.Child_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.Child_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.OnSaved(`0,System.Exception,System.Object)">
            <summary>
            Raises the <see cref="E:Csla.BusinessListBase`2.Saved"/> event, indicating that the
            object has been saved, and providing a reference
            to the new object instance.
            </summary>
            <param name="newObject">The new object instance.</param>
            <param name="e">Execption that occurred during the operation.</param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.SetParent(Csla.Core.IParent)">
            <summary>
            Used by BusinessListBase as a child object is 
            created to tell the child object about its
            parent.
            </summary>
            <param name="parent">A reference to the parent collection object.</param>
        </member>
        <member name="M:Csla.BusinessListBase`2.Csla#Core#IEditableCollection#SetParent(Csla.Core.IParent)">
            <summary>
            Used by BusinessListBase as a child object is 
            created to tell the child object about its
            parent.
            </summary>
            <param name="parent">A reference to the parent collection object.</param>
        </member>
        <member name="P:Csla.BusinessListBase`2.DeletedList">
            <summary>
            A collection containing all child objects marked
            for deletion.
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.EditLevel">
            <summary>
            Returns the current edit level of the object.
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.IsChild">
            <summary>
            Indicates whether this collection object is a child object.
            </summary>
            <returns>True if this is a child object.</returns>
        </member>
        <member name="P:Csla.BusinessListBase`2.Csla#Core#ITrackStatus#IsSelfDirty">
            <summary>
            Gets a value indicating whether this object's data has been changed.
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.IsDirty">
            <summary>
            Gets a value indicating whether this object's data has been changed.
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.IsSelfValid">
            <summary>
            Gets a value indicating whether this object is currently in
            a valid state (has no broken validation rules).
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.IsValid">
            <summary>
            Gets a value indicating whether this object is currently in
            a valid state (has no broken validation rules).
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.IsSavable">
            <summary>
            Returns <see langword="true" /> if this object has changes, is valid,
            the user is authorized and the object is not busy.
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.IsBusy">
            <summary>
            Gets the busy status for this object and its child objects.
            </summary>
        </member>
        <member name="E:Csla.BusinessListBase`2.Saved">
            <summary>
            Event raised when an object has been saved.
            </summary>
        </member>
        <member name="P:Csla.BusinessListBase`2.Parent">
            <summary>
            Provide access to the parent reference for use
            in child object code.
            </summary>
            <remarks>
            This value will be Nothing for root objects.
            </remarks>
        </member>
        <member name="T:Csla.Core.AddedNewEventArgs`1">
            <summary>
            Object containing information about a
            newly added object.
            </summary>
            <typeparam name="T">
            Type of the object that was added.
            </typeparam>
        </member>
        <member name="M:Csla.Core.AddedNewEventArgs`1.#ctor">
            <summary>
            Creates a new instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Core.AddedNewEventArgs`1.#ctor(`0)">
            <summary>
            Creates a new instance of the object.
            </summary>
            <param name="newObject">
            The newly added object.
            </param>
        </member>
        <member name="P:Csla.Core.AddedNewEventArgs`1.NewObject">
            <summary>
            Gets a reference to the newly added
            object.
            </summary>
        </member>
        <member name="T:Csla.Core.BindableBase">
            <summary>
            This class implements INotifyPropertyChanged.
            </summary>
        </member>
        <member name="T:Csla.Core.MobileObject">
            <summary>
            Inherit from this base class to easily
            create a serializable class.
            </summary>
        </member>
        <member name="M:Csla.Core.MobileObject.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.Core.MobileObject.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to insert your child object
            references into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="M:Csla.Core.MobileObject.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.Core.MobileObject.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to retrieve your child object
            references from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="T:Csla.Core.INotifyPropertyChanging">
            <summary>
            Defines an object that raises the PropertyChanging
            event.
            </summary>
        </member>
        <member name="E:Csla.Core.INotifyPropertyChanging.PropertyChanging">
            <summary>
            Event indicating that a property is changing.
            </summary>
        </member>
        <member name="M:Csla.Core.BindableBase.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Core.BindableBase.OnIsDirtyChanged">
            <summary>
            Call this method to raise the PropertyChanged event
            for all object properties.
            </summary>
            <remarks>
            This method is for backward compatibility with
            CSLA .NET 1.x.
            </remarks>
        </member>
        <member name="M:Csla.Core.BindableBase.OnUnknownPropertyChanged">
            <summary>
            Call this method to raise the PropertyChanged event
            for all object properties.
            </summary>
            <remarks>
            This method is automatically called by MarkDirty. It
            actually raises PropertyChanged for an empty string,
            which tells data binding to refresh all properties.
            </remarks>
        </member>
        <member name="M:Csla.Core.BindableBase.OnPropertyChanged(System.String)">
            <summary>
            Call this method to raise the PropertyChanged event
            for a specific property.
            </summary>
            <param name="propertyName">Name of the property that
            is being changed.</param>
        </member>
        <member name="M:Csla.Core.BindableBase.OnPropertyChanged(Csla.Core.IPropertyInfo)">
            <summary>
            Call this method to raise the PropertyChanged event
            for a specific property.
            </summary>
            <param name="propertyInfo">The property info for the property that has changed.</param>
        </member>
        <member name="M:Csla.Core.BindableBase.OnPropertyChanging(System.String)">
            <summary>
            Raises the PropertyChanging event.
            </summary>
            <param name="propertyName">Name of the property that
            is being changed.</param>
            <remarks>
            This method may be called by properties in the business
            class to indicate the change that is about to occur 
            in a specific property.
            </remarks>
        </member>
        <member name="M:Csla.Core.BindableBase.OnPropertyChanging(Csla.Core.IPropertyInfo)">
            <summary>
            Raises the PropertyChanging event.
            </summary>
            <param name="propertyInfo">The property info for the property that has changed.</param>
            <remarks>
            This method may be called by properties in the business
            class to indicate the change that is about to occur 
            in a specific property.
            </remarks>
        </member>
        <member name="E:Csla.Core.BindableBase.PropertyChanged">
            <summary>
            Event raised when a property is changed.
            </summary>
        </member>
        <member name="E:Csla.Core.BindableBase.PropertyChanging">
            <summary>
            Event raised when a property is changing.
            </summary>
        </member>
        <member name="T:Csla.Core.ContextDictionary">
            <summary>
            Defines a counterpart to the .NET HybridDictionary
            that can be serialized by the MobileFormatter.
            </summary>
        </member>
        <member name="M:Csla.Core.ContextDictionary.Contains(System.String)">
            <summary>
            Gets a value indicating whether the
            dictionary contains a matching key value.
            </summary>
            <param name="key">Key value.</param>
        </member>
        <member name="T:Csla.Core.ICommandObject">
            <summary>
            This interface is implemented by all
            Command objects.
            </summary>
        </member>
        <member name="T:Csla.Core.IEditableBusinessObject">
            <summary>
            Defines the common methods required by all
            editable CSLA single objects.
            </summary>
            <remarks>
            It is strongly recommended that the implementations
            of the methods in this interface be made Private
            so as to not clutter up the native interface of
            the collection objects.
            </remarks>
        </member>
        <member name="M:Csla.Core.IEditableBusinessObject.DeleteChild">
            <summary>
            Called by a parent object to mark the child
            for deferred deletion.
            </summary>
        </member>
        <member name="M:Csla.Core.IEditableBusinessObject.SetParent(Csla.Core.IParent)">
            <summary>
            Used by BusinessListBase as a child object is 
            created to tell the child object about its
            parent.
            </summary>
            <param name="parent">A reference to the parent collection object.</param>
        </member>
        <member name="M:Csla.Core.IEditableBusinessObject.Delete">
            <summary>
            Marks the object for deletion. The object will be deleted as part of the
            next save operation.
            </summary>
        </member>
        <member name="P:Csla.Core.IEditableBusinessObject.EditLevelAdded">
            <summary>
            For internal use only!!
            </summary>
            <remarks>
            Altering this value will almost certainly
            break your code. This property is for use
            by the parent collection only!
            </remarks>
        </member>
        <member name="T:Csla.Core.IReadOnlyCollection">
            <summary>
            Interface implemented by all read-only collection
            classes.
            </summary>
        </member>
        <member name="T:Csla.Core.ISmartField">
            <summary>
            Defines members required for smart
            data types that understand the concept
            of being empty, and representing an
            empty value as an empty string.
            </summary>
        </member>
        <member name="P:Csla.Core.ISmartField.Text">
            <summary>
            Sets or gets the text representation
            of the value.
            </summary>
            <remarks>
            An empty string indicates an empty value.
            </remarks>
        </member>
        <member name="P:Csla.Core.ISmartField.IsEmpty">
            <summary>
            Gets a value indicating whether the
            field's value is empty.
            </summary>
        </member>
        <member name="T:Csla.Core.ObjectCloner">
            <summary>
            This class provides an implementation of a deep
            clone of a complete object graph. Objects are
            copied at the field level.
            </summary>
        </member>
        <member name="M:Csla.Core.ObjectCloner.Clone(System.Object)">
            <summary>
            Clones an object.
            </summary>
            <param name="obj">The object to clone.</param>
            <remarks>
            <para>The object to be cloned must be serializable.</para>
            <para>The serialization is performed using the formatter
            specified in the application's configuration file
            using the CslaSerializationFormatter key.</para>
            <para>The default is to use the BinaryFormatter.
            </para>. You may also choose to use the 
            NetDataContractSerializer provided as part of WCF.
            </remarks>
        </member>
        <member name="T:Csla.Core.PropertyChangingEventArgs">
            <summary>
            Arguments object containing information about
            a property changing.
            </summary>
        </member>
        <member name="M:Csla.Core.PropertyChangingEventArgs.#ctor(System.String)">
            <summary>
            Creates an instnace of the object.
            </summary>
            <param name="propertyName">
            Name of the property that is changing.
            </param>
        </member>
        <member name="P:Csla.Core.PropertyChangingEventArgs.PropertyName">
            <summary>
            Gets the name of the changing property.
            </summary>
        </member>
        <member name="T:Csla.Core.PropertyChangingEventHandler">
            <summary>
            Defines the method signature for the
            PropertyChanging event handler.
            </summary>
            <param name="sender">Object raising the event.</param>
            <param name="e">EventArgs object.</param>
        </member>
        <member name="T:Csla.Core.ReadOnlyBindingList`1">
            <summary>
            A readonly version of BindingList(Of T)
            </summary>
            <typeparam name="C">Type of item contained in the list.</typeparam>
            <remarks>
            This is a subclass of BindingList(Of T) that implements
            a readonly list, preventing adding and removing of items
            from the list. Use the IsReadOnly property
            to unlock the list for loading/unloading data.
            </remarks>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.ClearItems">
            <summary>
            Prevents clearing the collection.
            </summary>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.AddNewCore">
            <summary>
            Prevents insertion of items into the collection.
            </summary>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.InsertItem(System.Int32,`0)">
            <summary>
            Prevents insertion of items into the collection.
            </summary>
            <param name="index">Index at which to insert the item.</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index if the collection is
            not in readonly mode.
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the item at the specified index with the 
            specified item if the collection is not in
            readonly mode.
            </summary>
            <param name="index">Index of the item to replace.</param>
            <param name="item">New item for the list.</param>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.OnGetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Gets the state of the object for serialization.
            </summary>
            <param name="info">Serialization state</param>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.OnSetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Sets the state of the object from serialization.
            </summary>
            <param name="info">Serialization state</param>
        </member>
        <member name="M:Csla.Core.ReadOnlyBindingList`1.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Serializes any child objects.
            </summary>
            <param name="info">Serialization state</param>
            <param name="formatter">Serializer instance</param>
        </member>
        <member name="P:Csla.Core.ReadOnlyBindingList`1.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the list is readonly.
            </summary>
            <remarks>
            Subclasses can set this value to unlock the collection
            in order to alter the collection's data.
            </remarks>
            <value>True indicates that the list is readonly.</value>
        </member>
        <member name="P:Csla.Core.ReadOnlyBindingList`1.IsReadOnlyCore">
            <summary>
            Gets or sets a value indicating whether
            the list is readonly.
            </summary>
        </member>
        <member name="P:Csla.Core.ReadOnlyBindingList`1.IsBusy">
            <summary>
            Gets a value indicating whether this
            object or any child object is currently
            executing an async operation.
            </summary>
        </member>
        <member name="T:Csla.Core.RemovingItemEventArgs">
            <summary>
            Contains event data for the RemovingItem
            event.
            </summary>
        </member>
        <member name="M:Csla.Core.RemovingItemEventArgs.#ctor(System.Object)">
            <summary>
            Create an instance of the object.
            </summary>
            <param name="removingItem">
            A reference to the item that was 
            removed from the list.
            </param>
        </member>
        <member name="P:Csla.Core.RemovingItemEventArgs.RemovingItem">
            <summary>
            Gets a reference to the item that was
            removed from the list.
            </summary>
        </member>
        <member name="T:Csla.Core.SavedEventArgs">
            <summary>
            Event arguments containing a reference
            to the new object that was returned
            as a result of the Save() operation.
            </summary>
        </member>
        <member name="M:Csla.Core.SavedEventArgs.#ctor(System.Object,System.Exception,System.Object)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="newObject">
            The object that was returned as a
            result of the Save() operation.
            </param>
            <param name="error">Error returned as
            a result of the save operation.</param>
            <param name="userState">User state object.</param>
        </member>
        <member name="P:Csla.Core.SavedEventArgs.NewObject">
            <summary>
            Gets the object that was returned
            as a result of the Save() operation.
            </summary>
        </member>
        <member name="P:Csla.Core.SavedEventArgs.Error">
            <summary>
            Gets the exception that occurred
            during the save (if any).
            </summary>
        </member>
        <member name="P:Csla.Core.SavedEventArgs.UserState">
            <summary>
            Gets the user state object.
            </summary>
        </member>
        <member name="T:Csla.Core.UndoableBase">
            <summary>
            Implements n-level undo capabilities as
            described in Chapters 2 and 3.
            </summary>
        </member>
        <member name="M:Csla.Core.UndoableBase.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Core.UndoableBase.CopyingState">
            <summary>
            This method is invoked before the CopyState
            operation begins.
            </summary>
        </member>
        <member name="M:Csla.Core.UndoableBase.CopyStateComplete">
            <summary>
            This method is invoked after the CopyState
            operation is complete.
            </summary>
        </member>
        <member name="M:Csla.Core.UndoableBase.CopyState(System.Int32)">
            <summary>
            Copies the state of the object and places the copy
            onto the state stack.
            </summary>
            <param name="parentEditLevel">Parent edit level.</param>
        </member>
        <member name="M:Csla.Core.UndoableBase.OnCopyState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Invoked when a subclass should copy its state
            onto the state stack.
            </summary>
            <param name="state">State stack.</param>
        </member>
        <member name="M:Csla.Core.UndoableBase.UndoChangesComplete">
            <summary>
            This method is invoked before the UndoChanges
            operation begins.
            </summary>
        </member>
        <member name="M:Csla.Core.UndoableBase.UndoingChanges">
            <summary>
            This method is invoked after the UndoChanges
            operation is complete.
            </summary>
        </member>
        <member name="M:Csla.Core.UndoableBase.UndoChanges(System.Int32)">
            <summary>
            Restores the object's state to the most recently
            copied values from the state stack.
            </summary>
            <remarks>
            Restores the state of the object to its
            previous value by taking the data out of
            the stack and restoring it into the fields
            of the object.
            </remarks>
            <param name="parentEditLevel">Parent edit level</param>
        </member>
        <member name="M:Csla.Core.UndoableBase.OnUndoChanges(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            This method is invoked when an undo operation
            begins.
            </summary>
            <param name="state">Serialization state</param>
        </member>
        <member name="M:Csla.Core.UndoableBase.AcceptingChanges">
            <summary>
            This method is invoked before the AcceptChanges
            operation begins.
            </summary>
        </member>
        <member name="M:Csla.Core.UndoableBase.AcceptChangesComplete">
            <summary>
            This method is invoked after the AcceptChanges
            operation is complete.
            </summary>
        </member>
        <member name="M:Csla.Core.UndoableBase.AcceptChanges(System.Int32)">
            <summary>
            Accepts any changes made to the object since the last
            state copy was made.
            </summary>
            <remarks>
            The most recent state copy is removed from the state
            stack and discarded, thus committing any changes made
            to the object's state.
            </remarks>
            <param name="parentEditLevel">Parent edit level</param>
        </member>
        <member name="M:Csla.Core.UndoableBase.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Gets the state of the object for serialization.
            </summary>
            <param name="info">Serialization state</param>
            <param name="mode">Serialization mode</param>
        </member>
        <member name="M:Csla.Core.UndoableBase.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Sets the state of the object from serialization.
            </summary>
            <param name="info">Serialization state</param>
            <param name="mode">Serialization mode</param>
        </member>
        <member name="P:Csla.Core.UndoableBase.BindingEdit">
            <summary>
            Gets or sets a value indicating whether n-level undo
            was invoked through IEditableObject. FOR INTERNAL
            CSLA .NET USE ONLY!
            </summary>
        </member>
        <member name="P:Csla.Core.UndoableBase.EditLevel">
            <summary>
            Returns the current edit level of the object.
            </summary>
        </member>
        <member name="T:Csla.Core.UndoException">
            <summary>
            Exception indicating a problem with the
            use of the n-level undo feature in
            CSLA .NET.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Core.UndoException.#ctor(System.String)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Text describing the exception.</param>
        </member>
        <member name="M:Csla.Core.UndoException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Text describing the exception.</param>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="T:Csla.DynamicBindingListBase`1">
            <summary>
            This is the base class from which collections
            of editable root business objects should be
            derived.
            </summary>
            <typeparam name="T">
            Type of editable root object to contain within
            the collection.
            </typeparam>
            <remarks>
            <para>
            Your subclass should implement a factory method
            and should override or overload
            DataPortal_Fetch() to implement data retrieval.
            </para><para>
            Saving (inserts or updates) of items in the collection
            should be handled through the SaveItem() method on
            the collection. 
            </para><para>
            Removing an item from the collection
            through Remove() or RemoveAt() causes immediate deletion
            of the object, by calling the object's Delete() and
            Save() methods.
            </para>
            </remarks>
        </member>
        <member name="T:Csla.DynamicListBase`1">
            <summary>
            This is the base class from which collections
            of editable root business objects should be
            derived.
            </summary>
            <typeparam name="T">
            Type of editable root object to contain within
            the collection.
            </typeparam>
            <remarks>
            <para>
            Your subclass should implement a factory method
            and should override or overload
            DataPortal_Fetch() to implement data retrieval.
            </para><para>
            Saving (inserts or updates) of items in the collection
            should be handled through the SaveItem() method on
            the collection. 
            </para><para>
            Removing an item from the collection
            through Remove() or RemoveAt() causes immediate deletion
            of the object, by calling the object's Delete() and
            Save() methods.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.DynamicListBase`1.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.DynamicListBase`1.Initialize">
            <summary>
            Override this method to set up event handlers so user
            code in a partial class can respond to events raised by
            generated code.
            </summary>
        </member>
        <member name="M:Csla.DynamicListBase`1.OnSaved(`0,System.Exception)">
            <summary>
            Raises the Saved event.
            </summary>
            <param name="newObject">Object returned as a result
            of the save operation.</param>
            <param name="error">Exception returned as a result
            of the save operation.</param>
        </member>
        <member name="M:Csla.DynamicListBase`1.SaveItemAsync(`0)">
            <summary>
            Saves the specified item in the list.
            </summary>
            <param name="item">Item to be saved.</param>
        </member>
        <member name="M:Csla.DynamicListBase`1.SaveItemAsync(System.Int32)">
            <summary>
            Saves the specified item in the list.
            </summary>
            <param name="index">Index of item to be saved.</param>
        </member>
        <member name="M:Csla.DynamicListBase`1.SaveItemAsync(System.Int32,System.Boolean)">
            <summary>
            Saves the specified item in the list.
            </summary>
            <param name="index">Index of item to be saved.</param>
            <param name="delete">true if the item should be deleted.</param>
        </member>
        <member name="M:Csla.DynamicListBase`1.SaveItem(`0)">
            <summary>
            Saves the specified item in the list.
            </summary>
            <param name="item">
            Reference to the item to be saved.
            </param>
            <remarks>
            This method properly saves the child item,
            by making sure the item in the collection
            is properly replaced by the result of the
            Save() method call.
            </remarks>
        </member>
        <member name="M:Csla.DynamicListBase`1.SaveItem(System.Int32)">
            <summary>
            Saves the specified item in the list.
            </summary>
            <param name="index">
            Index of the item to be saved.
            </param>
            <remarks>
            This method properly saves the child item,
            by making sure the item in the collection
            is properly replaced by the result of the
            Save() method call.
            </remarks>
        </member>
        <member name="M:Csla.DynamicListBase`1.AddNewCore">
            <summary>
            Adds a new item to the list.
            Uses ProcyModes.LocalOnly as default. 
            Override in your own class to use other ProxyModes
            </summary>
        </member>
        <member name="M:Csla.DynamicListBase`1.InsertItem(System.Int32,`0)">
            <summary>
            Gives the new object a parent reference to this
            list.
            </summary>
            <param name="index">Index at which to insert the item.</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:Csla.DynamicListBase`1.RemoveItem(System.Int32)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="index">Index of the item
            to be removed.</param>
        </member>
        <member name="M:Csla.DynamicListBase`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces item in the list.
            </summary>
            <param name="index">Index of the item
            that was replaced.</param>
            <param name="item">New item.</param>
        </member>
        <member name="M:Csla.DynamicListBase`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event.
            </summary>
            <param name="e">Event args object</param>
        </member>
        <member name="M:Csla.DynamicListBase`1.OnDeserialized">
            <summary>
            Set parent reference.
            </summary>
        </member>
        <member name="M:Csla.DynamicListBase`1.DataPortal_Fetch(System.Object)">
            <summary>
            Override this method to allow retrieval of an existing business
            object based on data in the database.
            </summary>
            <param name="criteria">An object containing criteria values to identify the object.</param>
        </member>
        <member name="M:Csla.DynamicListBase`1.DataPortal_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.DynamicListBase`1.DataPortal_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.DynamicListBase`1.DataPortal_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="M:Csla.DynamicListBase`1.ToArray">
            <summary>
            Get an array containing all items in the list.
            </summary>
        </member>
        <member name="E:Csla.DynamicListBase`1.Saved">
            <summary>
            Event raised when an object in the list has been saved.
            </summary>
        </member>
        <member name="P:Csla.DynamicListBase`1.RaiseReplaceEvents">
            <summary>
            Gets or sets a value indicating whether the Replace
            event should be raised when OnCollectionChanged() is
            called.
            </summary>
            <remarks>
            There's a bug in DataGridDataConnection that throws
            an exception on the replace action. By default we
            disable raising the replace event to avoid that bug, 
            but some other datagrid controls require the event.
            </remarks>
        </member>
        <member name="P:Csla.DynamicListBase`1.SupportsChangeNotificationCore">
            <summary>
            Gets a value indicating whether this collection
            supports change notification (always returns true).
            </summary>
        </member>
        <member name="P:Csla.DynamicListBase`1.IsBusy">
            <summary>
            Gets a value indicating whether this object
            or any child object is currently executing
            an async operation.
            </summary>
        </member>
        <member name="T:Csla.NotUndoableAttribute">
            <summary>
            Marks a field to indicate that the value should not 
            be copied as part of the undo process.
            </summary>
            <remarks>
            Marking a variable with this attribute will cause the n-level
            undo process to ignore that variable's value. The value will
            not be included in a snapshot when BeginEdit is called, nor
            will it be restored when CancelEdit is called.
            </remarks>
        </member>
        <member name="T:Csla.PropertyLoadException">
            <summary>
            Exception indicating a failure to
            set a property's field.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Csla.PropertyLoadException.#ctor(System.String)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Text describing the exception.</param>
        </member>
        <member name="M:Csla.PropertyLoadException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Text describing the exception.</param>
            <param name="ex">Inner exception.</param>
        </member>
        <member name="T:Csla.ReadOnlyBindingListBase`2">
            <summary>
            This is the base class from which readonly collections
            of readonly objects should be derived.
            </summary>
            <typeparam name="T">Type of the list class.</typeparam>
            <typeparam name="C">Type of child objects contained in the list.</typeparam>
        </member>
        <member name="T:Csla.ReadOnlyListBase`2">
            <summary>
            This is the base class from which readonly collections
            of readonly objects should be derived.
            </summary>
            <typeparam name="T">Type of the list class.</typeparam>
            <typeparam name="C">Type of child objects contained in the list.</typeparam>
        </member>
        <member name="T:Csla.IReadOnlyListBase`1">
            <summary>
            This is the base class from which readonly collections
            of readonly objects should be derived.
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.Initialize">
            <summary>
            Override this method to set up event handlers so user
            code in a partial class can respond to events raised by
            generated code.
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.GetClone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>A new object containing the exact data of the original object.</returns>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.Clone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>
            A new object containing the exact data of the original object.
            </returns>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.ToArray">
            <summary>
            Get an array containing all items in the list.
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.DataPortal_Fetch(System.Object)">
            <summary>
            Override this method to allow retrieval of an existing business
            object based on data in the database.
            </summary>
            <param name="criteria">An object containing criteria values to identify the object.</param>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.DataPortal_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.DataPortal_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.DataPortal_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.Child_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.Child_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.ReadOnlyListBase`2.Child_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="T:Csla.Serialization.NonSerializedAttribute">
            <summary>
            Indicates that a field should not be
            serialized by the MobileFormatter.
            </summary>
        </member>
        <member name="T:Csla.Serialization.SerializableAttribute">
            <summary>
            Indicates that an object may be
            serialized by the MobileFormatter.
            </summary>
        </member>
        <member name="T:Csla.SmartDate">
            <summary>
            Provides a date data type that understands the concept
            of an empty date value.
            </summary>
            <remarks>
            See Chapter 5 for a full discussion of the need for this
            data type and the design choices behind it.
            </remarks>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.Boolean)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="emptyIsMin">Indicates whether an empty date is the min or max date value.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(Csla.SmartDate.EmptyValue)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.DateTime)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <remarks>
            The SmartDate created will use the min possible
            date to represent an empty date.
            </remarks>
            <param name="value">The initial value of the object.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.DateTime,System.Boolean)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="value">The initial value of the object.</param>
            <param name="emptyIsMin">Indicates whether an empty date is the min or max date value.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.DateTime,Csla.SmartDate.EmptyValue)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="value">The initial value of the object.</param>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.DateTime,Csla.SmartDate.EmptyValue,System.DateTimeKind)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="value">The initial value of the object.</param>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
            <param name="kind">One of the DateTimeKind values.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.Nullable{System.DateTime})">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <remarks>
            The SmartDate created will use the min possible
            date to represent an empty date.
            </remarks>
            <param name="value">The initial value of the object.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="value">The initial value of the object.</param>
            <param name="emptyIsMin">Indicates whether an empty date is the min or max date value.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.Nullable{System.DateTime},Csla.SmartDate.EmptyValue)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="value">The initial value of the object.</param>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.DateTimeOffset)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <remarks>
            <para>
            The SmartDate created will use the min possible
            date to represent an empty date.
            </para><para>
            SmartDate maintains the date value as a DateTime,
            so the provided DateTimeOffset is converted to a
            DateTime in this constructor. You should be aware
            that this can lead to a loss of precision in
            some cases.
            </para>
            </remarks>
            <param name="value">The initial value of the object.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.DateTimeOffset,System.Boolean)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="value">The initial value of the object.</param>
            <param name="emptyIsMin">Indicates whether an empty date is the min or max date value.</param>
            <remarks>
            SmartDate maintains the date value as a DateTime,
            so the provided DateTimeOffset is converted to a
            DateTime in this constructor. You should be aware
            that this can lead to a loss of precision in
            some cases.
            </remarks>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.DateTimeOffset,Csla.SmartDate.EmptyValue)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="value">The initial value of the object.</param>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
            <remarks>
            SmartDate maintains the date value as a DateTime,
            so the provided DateTimeOffset is converted to a
            DateTime in this constructor. You should be aware
            that this can lead to a loss of precision in
            some cases.
            </remarks>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.String)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <remarks>
            The SmartDate created will use the min possible
            date to represent an empty date.
            </remarks>
            <param name="value">The initial value of the object (as text).</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="value">The initial value of the object (as text).</param>
            <param name="emptyIsMin">Indicates whether an empty date is the min or max date value.</param>
        </member>
        <member name="M:Csla.SmartDate.#ctor(System.String,Csla.SmartDate.EmptyValue)">
            <summary>
            Creates a new SmartDate object.
            </summary>
            <param name="value">The initial value of the object (as text).</param>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
        </member>
        <member name="M:Csla.SmartDate.SetDefaultFormatString(System.String)">
            <summary>
            Sets the global default format string used by all new
            SmartDate values going forward.
            </summary>
            <remarks>
            The default global format string is "d" unless this
            method is called to change that value. Existing SmartDate
            values are unaffected by this method, only SmartDate
            values created after calling this method are affected.
            </remarks>
            <param name="formatString">
            The format string should follow the requirements for the
            .NET System.String.Format statement.
            </param>
        </member>
        <member name="M:Csla.SmartDate.ToDateTimeOffset">
            <summary>
            Gets the value as a DateTimeOffset.
            </summary>
        </member>
        <member name="M:Csla.SmartDate.ToNullableDate">
            <summary>
            Gets the value as a DateTime?.
            </summary>
        </member>
        <member name="M:Csla.SmartDate.ToString">
            <summary>
            Returns a text representation of the date value.
            </summary>
        </member>
        <member name="M:Csla.SmartDate.ToString(System.String)">
            <summary>
            Returns a text representation of the date value.
            </summary>
            <param name="format">
            A standard .NET format string.
            </param>
        </member>
        <member name="M:Csla.SmartDate.Equals(System.Object)">
            <summary>
            Compares this object to another <see cref="T:Csla.SmartDate"/>
            for equality.
            </summary>
            <param name="obj">Object to compare for equality.</param>
        </member>
        <member name="M:Csla.SmartDate.GetHashCode">
            <summary>
            Returns a hash code for this object.
            </summary>
        </member>
        <member name="M:Csla.SmartDate.Parse(System.String)">
            <summary>
            Converts a string value into a SmartDate.
            </summary>
            <param name="value">String containing the date value.</param>
            <returns>A new SmartDate containing the date value.</returns>
            <remarks>
            EmptyIsMin will default to <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:Csla.SmartDate.Parse(System.String,Csla.SmartDate.EmptyValue)">
            <summary>
            Converts a string value into a SmartDate.
            </summary>
            <param name="value">String containing the date value.</param>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
            <returns>A new SmartDate containing the date value.</returns>
        </member>
        <member name="M:Csla.SmartDate.Parse(System.String,System.Boolean)">
            <summary>
            Converts a string value into a SmartDate.
            </summary>
            <param name="value">String containing the date value.</param>
            <param name="emptyIsMin">Indicates whether an empty date is the min or max date value.</param>
            <returns>A new SmartDate containing the date value.</returns>
        </member>
        <member name="M:Csla.SmartDate.TryParse(System.String,Csla.SmartDate@)">
            <summary>
            Converts a string value into a SmartDate.
            </summary>
            <param name="value">String containing the date value.</param>
            <param name="result">The resulting SmartDate value if the parse was successful.</param>
            <returns>A value indicating if the parse was successful.</returns>
        </member>
        <member name="M:Csla.SmartDate.TryParse(System.String,Csla.SmartDate.EmptyValue,Csla.SmartDate@)">
            <summary>
            Converts a string value into a SmartDate.
            </summary>
            <param name="value">String containing the date value.</param>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
            <param name="result">The resulting SmartDate value if the parse was successful.</param>
            <returns>A value indicating if the parse was successful.</returns>
        </member>
        <member name="M:Csla.SmartDate.StringToDate(System.String)">
            <summary>
            Converts a text date representation into a Date value.
            </summary>
            <remarks>
            An empty string is assumed to represent an empty date. An empty date
            is returned as the MinValue of the Date datatype.
            </remarks>
            <param name="value">The text representation of the date.</param>
            <returns>A Date value.</returns>
        </member>
        <member name="M:Csla.SmartDate.StringToDate(System.String,System.Boolean)">
            <summary>
            Converts a text date representation into a Date value.
            </summary>
            <remarks>
            An empty string is assumed to represent an empty date. An empty date
            is returned as the MinValue or MaxValue of the Date datatype depending
            on the EmptyIsMin parameter.
            </remarks>
            <param name="value">The text representation of the date.</param>
            <param name="emptyIsMin">Indicates whether an empty date is the min or max date value.</param>
            <returns>A Date value.</returns>
        </member>
        <member name="M:Csla.SmartDate.StringToDate(System.String,Csla.SmartDate.EmptyValue)">
            <summary>
            Converts a text date representation into a Date value.
            </summary>
            <remarks>
            An empty string is assumed to represent an empty date. An empty date
            is returned as the MinValue or MaxValue of the Date datatype depending
            on the EmptyIsMin parameter.
            </remarks>
            <param name="value">The text representation of the date.</param>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
            <returns>A Date value.</returns>
        </member>
        <member name="M:Csla.SmartDate.DateToString(System.DateTime,System.String)">
            <summary>
            Converts a date value into a text representation.
            </summary>
            <remarks>
            The date is considered empty if it matches the min value for
            the Date datatype. If the date is empty, this
            method returns an empty string. Otherwise it returns the date
            value formatted based on the FormatString parameter.
            </remarks>
            <param name="value">The date value to convert.</param>
            <param name="formatString">The format string used to format the date into text.</param>
            <returns>Text representation of the date value.</returns>
        </member>
        <member name="M:Csla.SmartDate.DateToString(System.DateTime,System.String,System.Boolean)">
            <summary>
            Converts a date value into a text representation.
            </summary>
            <remarks>
            Whether the date value is considered empty is determined by
            the EmptyIsMin parameter value. If the date is empty, this
            method returns an empty string. Otherwise it returns the date
            value formatted based on the FormatString parameter.
            </remarks>
            <param name="value">The date value to convert.</param>
            <param name="formatString">The format string used to format the date into text.</param>
            <param name="emptyIsMin">Indicates whether an empty date is the min or max date value.</param>
            <returns>Text representation of the date value.</returns>
        </member>
        <member name="M:Csla.SmartDate.DateToString(System.DateTime,System.String,Csla.SmartDate.EmptyValue)">
            <summary>
            Converts a date value into a text representation.
            </summary>
            <remarks>
            Whether the date value is considered empty is determined by
            the EmptyIsMin parameter value. If the date is empty, this
            method returns an empty string. Otherwise it returns the date
            value formatted based on the FormatString parameter.
            </remarks>
            <param name="value">The date value to convert.</param>
            <param name="formatString">The format string used to format the date into text.</param>
            <param name="emptyValue">Indicates whether an empty date is the min or max date value.</param>
            <returns>Text representation of the date value.</returns>
        </member>
        <member name="M:Csla.SmartDate.CompareTo(Csla.SmartDate)">
            <summary>
            Compares one SmartDate to another.
            </summary>
            <remarks>
            This method works the same as the DateTime.CompareTo method
            on the Date datetype, with the exception that it
            understands the concept of empty date values.
            </remarks>
            <param name="value">The date to which we are being compared.</param>
            <returns>A value indicating if the comparison date is less than, equal to or greater than this date.</returns>
        </member>
        <member name="M:Csla.SmartDate.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares one SmartDate to another.
            </summary>
            <remarks>
            This method works the same as the DateTime.CompareTo method
            on the Date datetype, with the exception that it
            understands the concept of empty date values.
            </remarks>
            <param name="value">The date to which we are being compared.</param>
            <returns>A value indicating if the comparison date is less than, equal to or greater than this date.</returns>
        </member>
        <member name="M:Csla.SmartDate.CompareTo(System.String)">
            <summary>
            Compares a SmartDate to a text date value.
            </summary>
            <param name="value">The date to which we are being compared.</param>
            <returns>A value indicating if the comparison date is less than, equal to or greater than this date.</returns>
        </member>
        <member name="M:Csla.SmartDate.CompareTo(System.DateTimeOffset)">
            <summary>
            Compares a SmartDate to a date value.
            </summary>
            <param name="value">The date to which we are being compared.</param>
            <returns>A value indicating if the comparison date is less than, equal to or greater than this date.</returns>
            <remarks>
            SmartDate maintains the date value as a DateTime,
            so the provided DateTimeOffset is converted to a
            DateTime for this comparison. You should be aware
            that this can lead to a loss of precision in
            some cases.
            </remarks>
        </member>
        <member name="M:Csla.SmartDate.CompareTo(System.DateTime)">
            <summary>
            Compares a SmartDate to a date value.
            </summary>
            <param name="value">The date to which we are being compared.</param>
            <returns>A value indicating if the comparison date is less than, equal to or greater than this date.</returns>
        </member>
        <member name="M:Csla.SmartDate.Add(System.TimeSpan)">
            <summary>
            Adds a TimeSpan onto the object.
            </summary>
            <param name="value">Span to add to the date.</param>
        </member>
        <member name="M:Csla.SmartDate.Subtract(System.TimeSpan)">
            <summary>
            Subtracts a TimeSpan from the object.
            </summary>
            <param name="value">Span to subtract from the date.</param>
        </member>
        <member name="M:Csla.SmartDate.Subtract(System.DateTimeOffset)">
            <summary>
            Subtracts a DateTimeOffset from the object.
            </summary>
            <param name="value">DateTimeOffset to subtract from the date.</param>
            <remarks>
            SmartDate maintains the date value as a DateTime,
            so the provided DateTimeOffset is converted to a
            DateTime for this comparison. You should be aware
            that this can lead to a loss of precision in
            some cases.
            </remarks>
        </member>
        <member name="M:Csla.SmartDate.Subtract(System.DateTime)">
            <summary>
            Subtracts a DateTime from the object.
            </summary>
            <param name="value">Date to subtract from the date.</param>
        </member>
        <member name="M:Csla.SmartDate.op_Equality(Csla.SmartDate,Csla.SmartDate)">
            <summary>
            Equality operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_Inequality(Csla.SmartDate,Csla.SmartDate)">
            <summary>
            Inequality operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_Implicit(Csla.SmartDate)~System.String">
            <summary>
            Convert a SmartDate to a String.
            </summary>
            <param name="obj1">SmartDate value.</param>
        </member>
        <member name="M:Csla.SmartDate.op_Implicit(Csla.SmartDate)~System.DateTime">
            <summary>
            Convert a SmartDate to a DateTime.
            </summary>
            <param name="obj1">SmartDate value.</param>
        </member>
        <member name="M:Csla.SmartDate.op_Implicit(Csla.SmartDate)~System.Nullable{System.DateTime}">
            <summary>
            Convert a SmartDate to a nullable DateTime.
            </summary>
            <param name="obj1">SmartDate value.</param>
        </member>
        <member name="M:Csla.SmartDate.op_Implicit(Csla.SmartDate)~System.DateTimeOffset">
            <summary>
            Convert a SmartDate to a DateTimeOffset.
            </summary>
            <param name="obj1">SmartDate value.</param>
        </member>
        <member name="M:Csla.SmartDate.op_Explicit(System.String)~Csla.SmartDate">
            <summary>
            Convert a value to a SmartDate.
            </summary>
            <param name="dateValue">Value to convert.</param>
        </member>
        <member name="M:Csla.SmartDate.op_Implicit(System.DateTime)~Csla.SmartDate">
            <summary>
            Convert a value to a SmartDate.
            </summary>
            <param name="dateValue">Value to convert.</param>
        </member>
        <member name="M:Csla.SmartDate.op_Implicit(System.Nullable{System.DateTime})~Csla.SmartDate">
            <summary>
            Convert a value to a SmartDate.
            </summary>
            <param name="dateValue">Value to convert.</param>
        </member>
        <member name="M:Csla.SmartDate.op_Explicit(System.DateTimeOffset)~Csla.SmartDate">
            <summary>
            Convert a value to a SmartDate.
            </summary>
            <param name="dateValue">Value to convert.</param>
        </member>
        <member name="M:Csla.SmartDate.op_Equality(Csla.SmartDate,System.DateTime)">
            <summary>
            Equality operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_Inequality(Csla.SmartDate,System.DateTime)">
            <summary>
            Inequality operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_Equality(Csla.SmartDate,System.String)">
            <summary>
            Equality operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_Inequality(Csla.SmartDate,System.String)">
            <summary>
            Inequality operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_Addition(Csla.SmartDate,System.TimeSpan)">
            <summary>
            Addition operator
            </summary>
            <param name="start">Original date/time</param>
            <param name="span">Span to add</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_Subtraction(Csla.SmartDate,System.TimeSpan)">
            <summary>
            Subtraction operator
            </summary>
            <param name="start">Original date/time</param>
            <param name="span">Span to subtract</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_Subtraction(Csla.SmartDate,Csla.SmartDate)">
            <summary>
            Subtraction operator
            </summary>
            <param name="start">Original date/time</param>
            <param name="finish">Second date/time</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_GreaterThan(Csla.SmartDate,Csla.SmartDate)">
            <summary>
            Greater than operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_LessThan(Csla.SmartDate,Csla.SmartDate)">
            <summary>
            Less than operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_GreaterThan(Csla.SmartDate,System.DateTime)">
            <summary>
            Greater than operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_LessThan(Csla.SmartDate,System.DateTime)">
            <summary>
            Less than operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_GreaterThan(Csla.SmartDate,System.String)">
            <summary>
            Greater than operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_LessThan(Csla.SmartDate,System.String)">
            <summary>
            Less than operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_GreaterThanOrEqual(Csla.SmartDate,Csla.SmartDate)">
            <summary>
            Greater than or equals operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_LessThanOrEqual(Csla.SmartDate,Csla.SmartDate)">
            <summary>
            Less than or equals operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_GreaterThanOrEqual(Csla.SmartDate,System.DateTime)">
            <summary>
            Greater than or equals operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_LessThanOrEqual(Csla.SmartDate,System.DateTime)">
            <summary>
            Less than or equals operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_GreaterThanOrEqual(Csla.SmartDate,System.String)">
            <summary>
            Greater than or equals operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="M:Csla.SmartDate.op_LessThanOrEqual(Csla.SmartDate,System.String)">
            <summary>
            Less than or equals operator
            </summary>
            <param name="obj1">First object</param>
            <param name="obj2">Second object</param>
            <returns></returns>
        </member>
        <member name="P:Csla.SmartDate.FormatString">
            <summary>
            Gets or sets the format string used to format a date
            value when it is returned as text.
            </summary>
            <remarks>
            The format string should follow the requirements for the
            .NET System.String.Format statement.
            </remarks>
            <value>A format string.</value>
        </member>
        <member name="P:Csla.SmartDate.Text">
            <summary>
            Gets or sets the date value.
            </summary>
            <remarks>
            <para>
            This property can be used to set the date value by passing a
            text representation of the date. Any text date representation
            that can be parsed by the .NET runtime is valid.
            </para><para>
            When the date value is retrieved via this property, the text
            is formatted by using the format specified by the 
            <see cref="P:Csla.SmartDate.FormatString"/> property. The default is the
            short date format (d).
            </para>
            </remarks>
        </member>
        <member name="P:Csla.SmartDate.Date">
            <summary>
            Gets or sets the date value.
            </summary>
        </member>
        <member name="P:Csla.SmartDate.IsEmpty">
            <summary>
            Gets a value indicating whether this object contains an empty date.
            </summary>
        </member>
        <member name="P:Csla.SmartDate.EmptyIsMin">
            <summary>
            Gets a value indicating whether an empty date is the 
            min or max possible date value.
            </summary>
            <remarks>
            Whether an empty date is considered to be the smallest or largest possible
            date is only important for comparison operations. This allows you to
            compare an empty date with a real date and get a meaningful result.
            </remarks>
        </member>
        <member name="P:Csla.SmartDate.CustomParser">
            <summary>
            Gets or sets the custom parser.
            
            The CustomParser is called first in TryStringToDate to allow custom parsing.
            The parser method must return null if unable to parse and allow SmartDate to try default parsing. 
            </summary>
            <value>
            The custom parser.
            </value>
        </member>
        <member name="T:Csla.SmartDate.EmptyValue">
            <summary>
            Indicates the empty value of a
            SmartDate.
            </summary>
        </member>
        <member name="F:Csla.SmartDate.EmptyValue.MinDate">
            <summary>
            Indicates that an empty SmartDate
            is the smallest date.
            </summary>
        </member>
        <member name="F:Csla.SmartDate.EmptyValue.MaxDate">
            <summary>
            Indicates that an empty SmartDate
            is the largest date.
            </summary>
        </member>
        <member name="T:Csla.Utilities">
            <summary>
            Contains utility methods used by the
            CSLA .NET framework.
            </summary>
        </member>
        <member name="M:Csla.Utilities.IsNumeric(System.Object)">
            <summary>
            Determines whether the specified
            value can be converted to a valid number.
            </summary>
        </member>
        <member name="M:Csla.Utilities.CallByName(System.Object,System.String,Csla.CallType,System.Object[])">
            <summary>
            Allows late bound invocation of
            properties and methods.
            </summary>
            <param name="target">Object implementing the property or method.</param>
            <param name="methodName">Name of the property or method.</param>
            <param name="callType">Specifies how to invoke the property or method.</param>
            <param name="args">List of arguments to pass to the method.</param>
            <returns>The result of the property or method invocation.</returns>
        </member>
        <member name="M:Csla.Utilities.GetPropertyType(System.Type)">
            <summary>
            Returns a property's type, dealing with
            Nullable(Of T) if necessary.
            </summary>
            <param name="propertyType">Type of the
            property as returned by reflection.</param>
        </member>
        <member name="M:Csla.Utilities.GetChildItemType(System.Type)">
            <summary>
            Returns the type of child object
            contained in a collection or list.
            </summary>
            <param name="listType">Type of the list.</param>
        </member>
        <member name="M:Csla.Utilities.CoerceValue(System.Type,System.Type,System.Object,System.Object)">
            <summary>
            Attempts to coerce a value of one type into
            a value of a different type.
            </summary>
            <param name="desiredType">
            Type to which the value should be coerced.
            </param>
            <param name="valueType">
            Original type of the value.
            </param>
            <param name="oldValue">
            The previous value (if any) being replaced by
            the new coerced value.
            </param>
            <param name="value">
            The value to coerce.
            </param>
            <remarks>
            <para>
            If the desired type is a primitive type or Decimal, 
            empty string and null values will result in a 0 
            or equivalent.
            </para>
            <para>
            If the desired type is a Nullable type, empty string
            and null values will result in a null result.
            </para>
            <para>
            If the desired type is an enum the value's ToString()
            result is parsed to convert into the enum value.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Utilities.CoerceValue``1(System.Type,System.Object,System.Object)">
            <summary>
            Attempts to coerce a value of one type into
            a value of a different type.
            </summary>
            <typeparam name="D">
            Type to which the value should be coerced.
            </typeparam>
            <param name="valueType">
            Original type of the value.
            </param>
            <param name="oldValue">
            The previous value (if any) being replaced by
            the new coerced value.
            </param>
            <param name="value">
            The value to coerce.
            </param>
            <remarks>
            <para>
            If the desired type is a primitive type or Decimal, 
            empty string and null values will result in a 0 
            or equivalent.
            </para>
            <para>
            If the desired type is a Nullable type, empty string
            and null values will result in a null result.
            </para>
            <para>
            If the desired type is an enum the value's ToString()
            result is parsed to convert into the enum value.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Utilities.ToErrorInfo(System.Exception)">
            <summary>
            Converts an Exception into a
            WcfErrorInfo object.
            </summary>
            <param name="ex">Exception object</param>
        </member>
        <member name="M:Csla.Utilities.EscapeDataString(System.String)">
            <summary>
            Escpaes a string according to RFC 2396. This is meant as a replacement for the missing Uri.EscapeDataString
            method in silverlight.
            </summary>
            <param name="data">The string to escape.</param>
            <returns>An escaped version of data.</returns>
            <remarks>
            For linked files calling Uri.EscapeDataString you can use the following C# code snippet 
            to ensure platform compatibility:
            
            #if SILVERLIGHT
            using Uri = Csla.Utilities;
            #endif
            </remarks>
        </member>
        <member name="T:Csla.CallType">
            <summary>
            Valid options for calling a property or method
            via the <see cref="M:Csla.Utilities.CallByName(System.Object,System.String,Csla.CallType,System.Object[])"/> method.
            </summary>
        </member>
        <member name="F:Csla.CallType.Get">
            <summary>
            Gets a value from a property.
            </summary>
        </member>
        <member name="F:Csla.CallType.Let">
            <summary>
            Sets a value into a property.
            </summary>
        </member>
        <member name="F:Csla.CallType.Method">
            <summary>
            Invokes a method.
            </summary>
        </member>
        <member name="F:Csla.CallType.Set">
            <summary>
            Sets a value into a property.
            </summary>
        </member>
        <member name="T:Csla.ApplicationContext">
            <summary>
            Provides consistent context information between the client
            and server DataPortal objects. 
            </summary>
        </member>
        <member name="F:Csla.ApplicationContext.DefaultRuleSet">
            <summary>
            The default RuleSet name 
            </summary>
        </member>
        <member name="M:Csla.ApplicationContext.Clear">
            <summary>
            Clears all context collections.
            </summary>
        </member>
        <member name="M:Csla.ApplicationContext.SetLogicalExecutionLocation(Csla.ApplicationContext.LogicalExecutionLocations)">
            <summary>
            Set logical execution location
            </summary>
            <param name="location">Location to set context to</param>
        </member>
        <member name="P:Csla.ApplicationContext.ContextManager">
            <summary>
            Gets the context manager responsible
            for storing user and context information for
            the application.
            </summary>
            <remarks>
            Ïf WebContextManager is not null and IsValid then WebContextManager is returned,
            else default ContextManager is returned. 
            This behaviour is to support background threads in web applications and return
            to use WebContextManager when completed. 
            </remarks>
        </member>
        <member name="P:Csla.ApplicationContext.User">
            <summary>
            Get or set the current <see cref="T:System.Security.Principal.IPrincipal"/>
            object representing the user's identity.
            </summary>
            <remarks>
            This is discussed in Chapter 5. When running
            under IIS the HttpContext.Current.User value
            is used, otherwise the current Thread.CurrentPrincipal
            value is used.
            </remarks>
        </member>
        <member name="P:Csla.ApplicationContext.LocalContext">
            <summary>
            Returns the application-specific context data that
            is local to the current AppDomain.
            </summary>
            <remarks>
            <para>
            The return value is a HybridDictionary. If one does
            not already exist, and empty one is created and returned.
            </para><para>
            Note that data in this context is NOT transferred to and from
            the client and server.
            </para>
            </remarks>
        </member>
        <member name="P:Csla.ApplicationContext.ClientContext">
            <summary>
            Returns the application-specific context data provided
            by the client.
            </summary>
            <remarks>
            <para>
            The return value is a HybridDictionary. If one does
            not already exist, and empty one is created and returned.
            </para><para>
            Note that data in this context is transferred from
            the client to the server. No data is transferred from
            the server to the client.
            </para><para>
            This property is thread safe in a Windows client
            setting and on an application server. It is not guaranteed
            to be thread safe within the context of an ASP.NET
            client setting (i.e. in your ASP.NET UI).
            </para>
            </remarks>
        </member>
        <member name="P:Csla.ApplicationContext.GlobalContext">
            <summary>
            Returns the application-specific context data shared
            on both client and server.
            </summary>
            <remarks>
            <para>
            The return value is a HybridDictionary. If one does
            not already exist, and empty one is created and returned.
            </para><para>
            Note that data in this context is transferred to and from
            the client and server. Any objects or data in this context
            will be transferred bi-directionally across the network.
            </para>
            </remarks>
        </member>
        <member name="P:Csla.ApplicationContext.DataPortalActivator">
            <summary>
            Gets or sets an instance of the IDataPortalActivator provider.
            </summary>
        </member>
        <member name="P:Csla.ApplicationContext.DataPortalUrlString">
            <summary>
            Gets or sets the data portal URL string.
            If not set on Get will read CslaDataPortalUrl from config file. 
            </summary>
            <value>The data portal URL string.</value>
        </member>
        <member name="P:Csla.ApplicationContext.DataPortalUrl">
            <summary>
            Returns the URL for the DataPortal server.
            </summary>
            <value></value>
            <returns></returns>
            <remarks>
            This value is read from the application configuration
            file with the key value "CslaDataPortalUrl". 
            </remarks>
        </member>
        <member name="P:Csla.ApplicationContext.DataPortalProxyFactory">
            <summary>
             Gets or sets the full type name (or 'Default') of
             the data portal proxy factory object to be used to get 
             the DataPortalProxy instance to use when
             communicating with the data portal server.
             </summary>
             <value>Fully qualified assembly/type name of the proxy factory class
             or 'Default'.</value>
             <returns></returns>
             <remarks>
             <para>
             If this value is empty or null, a new value is read from the 
             application configuration file with the key value 
             "CslaDataPortalProxyFactory".
             </para><para>
             The proxy class must implement Csla.DataPortalClient.IDataPortalProxyFactory.
             </para><para>
             The value "Defaukt" is a shortcut for using the default 
             Csla.DataPortalClient.DefaultPortalProxyFactory  implementation.
             </para>
             </remarks>
        </member>
        <member name="P:Csla.ApplicationContext.AuthenticationType">
            <summary>
            Returns the authentication type being used by the
            CSLA .NET framework.
            </summary>
            <value></value>
            <returns></returns>
            <remarks>
            This value is read from the application configuration
            file with the key value "CslaAuthentication". The value
            "Windows" indicates CSLA .NET should use Windows integrated
            (or AD) security. Any other value indicates the use of
            custom security derived from CslaPrincipal.
            </remarks>
        </member>
        <member name="P:Csla.ApplicationContext.DataPortalProxy">
            <summary>
            Gets or sets the full type name (or 'Local') of
            the data portal proxy object to be used when
            communicating with the data portal server.
            </summary>
            <value>Fully qualified assembly/type name of the proxy class
            or 'Local'.</value>
            <returns></returns>
            <remarks>
            <para>
            If this value is empty or null, a new value is read from the 
            application configuration file with the key value 
            "CslaDataPortalProxy".
            </para><para>
            The proxy class must implement Csla.Server.IDataPortalServer.
            </para><para>
            The value "Local" is a shortcut to running the DataPortal
            "server" in the client process.
            </para>
            </remarks>
        </member>
        <member name="P:Csla.ApplicationContext.IsInRoleProvider">
            <summary>
            Gets a qualified name for a method that implements
            the IsInRole() behavior used for authorization.
            </summary>
            <returns>
            Returns a value in the form
            "Namespace.Class, Assembly, MethodName".
            </returns>
            <remarks>
            The default is to use a simple IsInRole() call against
            the current principal. If another method is supplied
            it must conform to the IsInRoleProvider delegate.
            </remarks>
        </member>
        <member name="P:Csla.ApplicationContext.AutoCloneOnUpdate">
            <summary>
            Gets a value indicating whether objects should be
            automatically cloned by the data portal Update()
            method when using a local data portal configuration.
            </summary>
        </member>
        <member name="P:Csla.ApplicationContext.DataPortalReturnObjectOnException">
            <summary>
            Gets or sets a value indicating whether the
            server-side business object should be returned to
            the client as part of the DataPortalException
            (default is false).
            </summary>
        </member>
        <member name="P:Csla.ApplicationContext.SerializationFormatter">
            <summary>
            Gets the serialization formatter type used by CSLA .NET
            for all explicit object serialization (such as cloning,
            n-level undo, etc).
            </summary>
        </member>
        <member name="P:Csla.ApplicationContext.PropertyChangedMode">
            <summary>
            Gets or sets a value specifying how CSLA .NET should
            raise PropertyChanged events.
            </summary>
        </member>
        <member name="P:Csla.ApplicationContext.ExecutionLocation">
            <summary>
            Returns a value indicating whether the application code
            is currently executing on the client or server.
            </summary>
        </member>
        <member name="P:Csla.ApplicationContext.RuleSet">
            <summary>
            Gets or sets the RuleSet name to use for static HasPermission calls.
            </summary>
            <value>The rule set.</value>
        </member>
        <member name="P:Csla.ApplicationContext.LogicalExecutionLocation">
            <summary>
            Return Logical Execution Location - Client or Server
            This is applicable to Local mode as well
            </summary>
        </member>
        <member name="T:Csla.ApplicationContext.ExecutionLocations">
            <summary>
            Enum representing the locations code can execute.
            </summary>
        </member>
        <member name="F:Csla.ApplicationContext.ExecutionLocations.Client">
            <summary>
            The code is executing on the client.
            </summary>
        </member>
        <member name="F:Csla.ApplicationContext.ExecutionLocations.Server">
            <summary>
            The code is executing on the application server.
            </summary>
        </member>
        <member name="F:Csla.ApplicationContext.ExecutionLocations.MobileClient">
            <summary>
            The code is executing on the Silverlight client.
            </summary>
        </member>
        <member name="T:Csla.ApplicationContext.SerializationFormatters">
            <summary>
            Enum representing the serialization formatters
            supported by CSLA .NET.
            </summary>
        </member>
        <member name="F:Csla.ApplicationContext.SerializationFormatters.MobileFormatter">
            <summary>
            Use the CSLA .NET MobileFormatter
            </summary>
        </member>
        <member name="T:Csla.ApplicationContext.PropertyChangedModes">
            <summary>
            Enum representing the way in which CSLA .NET
            should raise PropertyChanged events.
            </summary>
        </member>
        <member name="F:Csla.ApplicationContext.PropertyChangedModes.Windows">
            <summary>
            Raise PropertyChanged events as required
            by Windows Forms data binding.
            </summary>
        </member>
        <member name="F:Csla.ApplicationContext.PropertyChangedModes.Xaml">
            <summary>
            Raise PropertyChanged events as required
            by XAML data binding in WPF.
            </summary>
        </member>
        <member name="T:Csla.ApplicationContext.LogicalExecutionLocations">
            <summary>
            Enum representing the logical execution location
            The setting is set to server when server is execting
            a CRUD opertion, otherwise the setting is always client
            </summary>
        </member>
        <member name="F:Csla.ApplicationContext.LogicalExecutionLocations.Client">
            <summary>
            The code is executing on the client.
            </summary>
        </member>
        <member name="F:Csla.ApplicationContext.LogicalExecutionLocations.Server">
            <summary>
            The code is executing on the server.  This includes
            Local mode execution
            </summary>
        </member>
        <member name="T:Csla.Core.IContextManager">
            <summary>
            Defines the interface for an application 
            context manager type.
            </summary>
        </member>
        <member name="M:Csla.Core.IContextManager.GetUser">
            <summary>
            Gets the current principal.
            </summary>
        </member>
        <member name="M:Csla.Core.IContextManager.SetUser(System.Security.Principal.IPrincipal)">
            <summary>
            Sets the current principal.
            </summary>
            <param name="principal">Principal object.</param>
        </member>
        <member name="M:Csla.Core.IContextManager.GetLocalContext">
            <summary>
            Gets the local context.
            </summary>
        </member>
        <member name="M:Csla.Core.IContextManager.SetLocalContext(Csla.Core.ContextDictionary)">
            <summary>
            Sets the local context.
            </summary>
            <param name="localContext">Local context.</param>
        </member>
        <member name="M:Csla.Core.IContextManager.GetClientContext">
            <summary>
            Gets the client context.
            </summary>
        </member>
        <member name="M:Csla.Core.IContextManager.SetClientContext(Csla.Core.ContextDictionary)">
            <summary>
            Sets the client context.
            </summary>
            <param name="clientContext">Client context.</param>
        </member>
        <member name="M:Csla.Core.IContextManager.GetGlobalContext">
            <summary>
            Gets the global context.
            </summary>
        </member>
        <member name="M:Csla.Core.IContextManager.SetGlobalContext(Csla.Core.ContextDictionary)">
            <summary>
            Sets the global context.
            </summary>
            <param name="globalContext">Global context.</param>
        </member>
        <member name="P:Csla.Core.IContextManager.IsValid">
            <summary>
            Gets a value indicating whether this
            context manager is valid for use in
            the current environment.
            </summary>
        </member>
        <member name="T:Csla.BusinessBase`1">
            <summary>
            This is the base class from which most business objects
            will be derived.
            </summary>
            <remarks>
            <para>
            This class is the core of the CSLA .NET framework. To create
            a business object, inherit from this class.
            </para><para>
            Please refer to 'Expert C# 2008 Business Objects' for
            full details on the use of this base class to create business
            objects.
            </para>
            </remarks>
            <typeparam name="T">Type of the business object being defined.</typeparam>
        </member>
        <member name="T:Csla.Core.BusinessBase">
            <summary>
            This is the non-generic base class from which most
            business objects will be derived.
            </summary>
        </member>
        <member name="T:Csla.Security.IAuthorizeReadWrite">
            <summary>
            Defines the authorization interface through which an
            object can indicate which properties the current
            user can read and write.
            </summary>
        </member>
        <member name="M:Csla.Security.IAuthorizeReadWrite.CanWriteProperty(System.String)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to write the
            to the specified property.
            </summary>
            <returns><see langword="true" /> if write is allowed.</returns>
            <param name="propertyName">Name of the property to write.</param>
        </member>
        <member name="M:Csla.Security.IAuthorizeReadWrite.CanWriteProperty(Csla.Core.IPropertyInfo)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to write the
            to the specified property.
            </summary>
            <returns><see langword="true" /> if write is allowed.</returns>
            <param name="property">Property to write.</param>
        </member>
        <member name="M:Csla.Security.IAuthorizeReadWrite.CanReadProperty(System.String)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            specified property.
            </summary>
            <returns><see langword="true" /> if read is allowed.</returns>
            <param name="propertyName">Name of the property to read.</param>
        </member>
        <member name="M:Csla.Security.IAuthorizeReadWrite.CanReadProperty(Csla.Core.IPropertyInfo)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            specified property.
            </summary>
            <returns><see langword="true" /> if read is allowed.</returns>
            <param name="property">Property to read.</param>
        </member>
        <member name="M:Csla.Security.IAuthorizeReadWrite.CanExecuteMethod(System.String)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to execute 
            the specified method.
            </summary>
            <returns><see langword="true" /> if execute is allowed.</returns>
            <param name="methodName">Name of the method to execute.</param>
        </member>
        <member name="M:Csla.Security.IAuthorizeReadWrite.CanExecuteMethod(Csla.Core.IMemberInfo)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to execute 
            the specified method.
            </summary>
            <returns><see langword="true" /> if execute is allowed.</returns>
            <param name="method">Method to execute.</param>
        </member>
        <member name="T:Csla.Rules.IHostRules">
            <summary>
            Defines the interaction between the rules engine and
            a business object that hosts the rules.
            </summary>
        </member>
        <member name="M:Csla.Rules.IHostRules.RuleStart(Csla.Core.IPropertyInfo)">
            <summary>
            Indicates that a rule has started processing.
            </summary>
            <param name="property">Property for rule.</param>
        </member>
        <member name="M:Csla.Rules.IHostRules.RuleComplete(Csla.Core.IPropertyInfo)">
            <summary>
            Indicates that a rule has finished processing.
            </summary>
            <param name="property">Property for rule.</param>
        </member>
        <member name="M:Csla.Rules.IHostRules.RuleComplete(System.String)">
            <summary>
            Indicates that a rule has finished processing.
            </summary>
            <param name="property">Property for rule.</param>
        </member>
        <member name="M:Csla.Rules.IHostRules.AllRulesComplete">
            <summary>
            Indicates that all rules have finished processing.
            </summary>
        </member>
        <member name="T:Csla.Core.ICheckRules">
            <summary>
            Defines the common methods for any business object which exposes means
            to supress and check business rules.
            </summary>
        </member>
        <member name="M:Csla.Core.ICheckRules.SuppressRuleChecking">
            <summary>
            Sets value indicating no rule methods will be invoked.
            </summary>
        </member>
        <member name="M:Csla.Core.ICheckRules.ResumeRuleChecking">
            <summary>
            Resets value indicating all rule methods will be invoked.
            </summary>
        </member>
        <member name="M:Csla.Core.ICheckRules.CheckRules">
            <summary>
            Invokes all rules for the business type.
            </summary>
        </member>
        <member name="M:Csla.Core.ICheckRules.GetBrokenRules">
            <summary>
            Gets the broken rules collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.Core.BusinessBase.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.Initialize">
            <summary>
            Override this method to set up event handlers so user
            code in a partial class can respond to events raised by
            generated code.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetParent(Csla.Core.IParent)">
            <summary>
            Used by BusinessListBase as a child object is 
            created to tell the child object about its
            parent.
            </summary>
            <param name="parent">A reference to the parent collection object.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.MarkNew">
            <summary>
            Marks the object as being a new object. This also marks the object
            as being dirty and ensures that it is not marked for deletion.
            </summary>
            <remarks>
            <para>
            Newly created objects are marked new by default. You should call
            this method in the implementation of DataPortal_Update when the
            object is deleted (due to being marked for deletion) to indicate
            that the object no longer reflects data in the database.
            </para><para>
            If you override this method, make sure to call the base
            implementation after executing your new code.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.MarkOld">
            <summary>
            Marks the object as being an old (not new) object. This also
            marks the object as being unchanged (not dirty).
            </summary>
            <remarks>
            <para>
            You should call this method in the implementation of
            DataPortal_Fetch to indicate that an existing object has been
            successfully retrieved from the database.
            </para><para>
            You should call this method in the implementation of 
            DataPortal_Update to indicate that a new object has been successfully
            inserted into the database.
            </para><para>
            If you override this method, make sure to call the base
            implementation after executing your new code.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.MarkDeleted">
            <summary>
            Marks an object for deletion. This also marks the object
            as being dirty.
            </summary>
            <remarks>
            You should call this method in your business logic in the
            case that you want to have the object deleted when it is
            saved to the database.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.MarkDirty">
            <summary>
            Marks an object as being dirty, or changed.
            </summary>
            <remarks>
            <para>
            You should call this method in your business logic any time
            the object's internal data changes. Any time any instance
            variable changes within the object, this method should be called
            to tell CSLA .NET that the object's data has been changed.
            </para><para>
            Marking an object as dirty does two things. First it ensures
            that CSLA .NET will properly save the object as appropriate. Second,
            it causes CSLA .NET to tell Windows Forms data binding that the
            object's data has changed so any bound controls will update to
            reflect the new values.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.MarkDirty(System.Boolean)">
            <summary>
            Marks an object as being dirty, or changed.
            </summary>
            <param name="suppressEvent">
            <see langword="true" /> to supress the PropertyChanged event that is otherwise
            raised to indicate that the object's state has changed.
            </param>
        </member>
        <member name="M:Csla.Core.BusinessBase.PropertyHasChanged(Csla.Core.IPropertyInfo)">
            <summary>
            Performs processing required when a property
            has changed.
            </summary>
            <param name="property">Property that
            has changed.</param>
            <remarks>
            This method calls CheckRules(propertyName), MarkDirty and
            OnPropertyChanged(propertyName). MarkDirty is called such
            that no event is raised for IsDirty, so only the specific
            property changed event for the current property is raised.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.MetaPropertyHasChanged(System.String)">
            <summary>
            Raises OnPropertyChanged for meta properties (IsXYZ) when PropertyChangedMode is not Windows
            </summary>
            <param name="name">meta property name that has cchanged.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.CheckPropertyRules(Csla.Core.IPropertyInfo)">
            <summary>
            Check rules for the property and notifies UI of properties that may have changed.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.CheckObjectRules">
            <summary>
            Check object rules and notifies UI of properties that may have changed. 
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.MarkClean">
            <summary>
            Forces the object's IsDirty flag to <see langword="false" />.
            </summary>
            <remarks>
            This method is normally called automatically and is
            not intended to be called manually.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanReadProperty(Csla.Core.IPropertyInfo)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            calling property.
            </summary>
            <param name="property">Property to check.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanReadProperty(Csla.Core.IPropertyInfo,System.Boolean)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            calling property.
            </summary>
            <returns><see langword="true" /> if read is allowed.</returns>
            <param name="property">Property to read.</param>
            <param name="throwOnFalse">Indicates whether a negative
            result should cause an exception.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanReadProperty(System.String)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            specified property.
            </summary>
            <param name="propertyName">Name of the property to read.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanReadProperty(System.String,System.Boolean)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            specified property.
            </summary>
            <param name="propertyName">Name of the property to read.</param>
            <param name="throwOnFalse">Indicates whether a negative
            result should cause an exception.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanWriteProperty(Csla.Core.IPropertyInfo)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to write the
            specified property.
            </summary>
            <param name="property">Property to write.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanWriteProperty(Csla.Core.IPropertyInfo,System.Boolean)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to write the
            calling property.
            </summary>
            <returns><see langword="true" /> if write is allowed.</returns>
            <param name="property">Property to write.</param>
            <param name="throwOnFalse">Indicates whether a negative
            result should cause an exception.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanWriteProperty(System.String)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to write the
            specified property.
            </summary>
            <param name="propertyName">Name of the property to write.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanWriteProperty(System.String,System.Boolean)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to write the
            specified property.
            </summary>
            <param name="propertyName">Name of the property to write.</param>
            <param name="throwOnFalse">Indicates whether a negative
            result should cause an exception.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanExecuteMethod(Csla.Core.IMemberInfo)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to execute
            the specified method.
            </summary>
            <param name="method">Method to execute.</param>
            <returns><see langword="true" /> if execute is allowed.</returns>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanExecuteMethod(Csla.Core.IMemberInfo,System.Boolean)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to execute
            the specified method.
            </summary>
            <returns><see langword="true" /> if execute is allowed.</returns>
            <param name="method">Method to execute.</param>
            <param name="throwOnFalse">Indicates whether a negative
            result should cause an exception.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.CanExecuteMethod(System.String)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to execute
            the specified method.
            </summary>
            <param name="methodName">Name of the method to execute.</param>
            <returns><see langword="true" /> if execute is allowed.</returns>
        </member>
        <member name="M:Csla.Core.BusinessBase.System#ComponentModel#IEditableObject#BeginEdit">
            <summary>
            Allow data binding to start a nested edit on the object.
            </summary>
            <remarks>
            Data binding may call this method many times. Only the first
            call should be honored, so we have extra code to detect this
            and do nothing for subsquent calls.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.System#ComponentModel#IEditableObject#CancelEdit">
            <summary>
            Allow data binding to cancel the current edit.
            </summary>
            <remarks>
            Data binding may call this method many times. Only the first
            call to either IEditableObject.CancelEdit or 
            IEditableObject.EndEdit
            should be honored. We include extra code to detect this and do
            nothing for subsequent calls.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.System#ComponentModel#IEditableObject#EndEdit">
            <summary>
            Allow data binding to apply the current edit.
            </summary>
            <remarks>
            Data binding may call this method many times. Only the first
            call to either IEditableObject.EndEdit or 
            IEditableObject.CancelEdit
            should be honored. We include extra code to detect this and do
            nothing for subsequent calls.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.BeginEdit">
            <summary>
            Starts a nested edit on the object.
            </summary>
            <remarks>
            <para>
            When this method is called the object takes a snapshot of
            its current state (the values of its variables). This snapshot
            can be restored by calling CancelEdit
            or committed by calling ApplyEdit.
            </para><para>
            This is a nested operation. Each call to BeginEdit adds a new
            snapshot of the object's state to a stack. You should ensure that 
            for each call to BeginEdit there is a corresponding call to either 
            CancelEdit or ApplyEdit to remove that snapshot from the stack.
            </para><para>
            See Chapters 2 and 3 for details on n-level undo and state stacking.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.CancelEdit">
            <summary>
            Cancels the current edit process, restoring the object's state to
            its previous values.
            </summary>
            <remarks>
            Calling this method causes the most recently taken snapshot of the 
            object's state to be restored. This resets the object's values
            to the point of the last BeginEdit call.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.UndoChangesComplete">
            <summary>
            Called when an undo operation has completed.
            </summary>
            <remarks> 
            This method resets the object as a result of
            deserialization and raises PropertyChanged events
            to notify data binding that the object has changed.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.ApplyEdit">
            <summary>
            Commits the current edit process.
            </summary>
            <remarks>
            Calling this method causes the most recently taken snapshot of the 
            object's state to be discarded, thus committing any changes made
            to the object's state since the last BeginEdit call.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.AcceptChangesComplete">
            <summary>
            Notifies the parent object (if any) that this
            child object's edits have been accepted.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.MarkAsChild">
            <summary>
            Marks the object as being a child object.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.Delete">
            <summary>
            Marks the object for deletion. The object will be deleted as part of the
            next save operation.
            </summary>
            <remarks>
            <para>
            CSLA .NET supports both immediate and deferred deletion of objects. This
            method is part of the support for deferred deletion, where an object
            can be marked for deletion, but isn't actually deleted until the object
            is saved to the database. This method is called by the UI developer to
            mark the object for deletion.
            </para><para>
            To 'undelete' an object, use n-level undo as discussed in Chapters 2 and 3.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.DeleteChild">
            <summary>
            Called by a parent object to mark the child
            for deferred deletion.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetClone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>
            A new object containing the exact data of the original object.
            </returns>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnValidationComplete">
            <summary>
            Raises the ValidationComplete event.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetRegisteredRules">
            <summary>
            Gets the registered rules. Only for unit testing and not visible to code. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.Core.BusinessBase.AddBusinessRules">
            <summary>
            Override this method in your business class to
            be notified when you need to set up shared 
            business rules.
            </summary>
            <remarks>
            This method is automatically called by CSLA .NET
            when your object should associate per-type 
            validation rules with its properties.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.DataPortal_Create">
            <summary>
            Override this method to load a new business object with default
            values from the database.
            </summary>
            <remarks>
            Normally you will overload this method to accept a strongly-typed
            criteria parameter, rather than overriding the method with a
            loosely-typed criteria parameter.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.DataPortal_Insert">
            <summary>
            Override this method to allow insertion of a business
            object.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.DataPortal_Update">
            <summary>
            Override this method to allow update of a business
            object.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.DataPortal_DeleteSelf">
            <summary>
            Override this method to allow deferred deletion of a business object.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.DataPortal_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.DataPortal_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.DataPortal_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.Child_Create">
            <summary>
            Override this method to load a new business object with default
            values from the database.
            </summary>
            <remarks>
            Normally you will overload this method to accept a strongly-typed
            criteria parameter, rather than overriding the method with a
            loosely-typed criteria parameter.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.Child_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.Child_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.Child_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method is called on a newly deserialized object
            after deserialization is complete.
            </summary>
            <param name="context">Serialization context object.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.AddEventHooks(Csla.Core.IBusinessObject)">
            <summary>
            For internal use.
            </summary>
            <param name="child">Child object.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnAddEventHooks(Csla.Core.IBusinessObject)">
            <summary>
            Hook child object events.
            </summary>
            <param name="child">Child object.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.RemoveEventHooks(Csla.Core.IBusinessObject)">
            <summary>
            For internal use only.
            </summary>
            <param name="child">Child object.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnRemoveEventHooks(Csla.Core.IBusinessObject)">
            <summary>
            Unhook child object events.
            </summary>
            <param name="child">Child object.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.RegisterMethod(System.Type,Csla.Core.IMemberInfo)">
            <summary>
            Indicates that the specified method belongs
            to the type.
            </summary>
            <param name="objectType">
            Type of object to which the method belongs.
            </param>
            <param name="info">
            IMemberInfo object for the property.
            </param>
            <returns>
            The provided IMemberInfo object.
            </returns>
        </member>
        <member name="M:Csla.Core.BusinessBase.RegisterMethod(System.Type,System.String)">
            <summary>
            Indicates that the specified method belongs
            to the type.
            </summary>
            <param name="objectType">
            Type of object to which the method belongs.
            </param>
            <param name="methodName">
            Name of the method.
            </param>
            <returns>
            The provided IMemberInfo object.
            </returns>
        </member>
        <member name="M:Csla.Core.BusinessBase.RegisterProperty``1(System.Type,Csla.PropertyInfo{``0})">
            <summary>
            Indicates that the specified property belongs
            to the type.
            </summary>
            <typeparam name="P">
            Type of property.
            </typeparam>
            <param name="objectType">
            Type of object to which the property belongs.
            </param>
            <param name="info">
            PropertyInfo object for the property.
            </param>
            <returns>
            The provided IPropertyInfo object.
            </returns>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetProperty``1(System.String,``0,``0)">
            <summary>
            Gets a property's value, first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyName">
            The name of the property.</param>
            <param name="defaultValue">
            Value to be returned if the user is not
            authorized to read the property.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetProperty``1(System.String,``0,``0,Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value, first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyName">
            The name of the property.</param>
            <param name="defaultValue">
            Value to be returned if the user is not
            authorized to read the property.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetProperty``1(Csla.PropertyInfo{``0},``0)">
            <summary>
            Gets a property's value, first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetProperty``1(Csla.PropertyInfo{``0},``0,``0,Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value, first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="defaultValue">
            Value to be returned if the user is not
            authorized to read the property.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetPropertyConvert``2(Csla.PropertyInfo{``0},``0)">
            <summary>
            Gets a property's value as 
            a specified type, first checking authorization.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetPropertyConvert``2(Csla.PropertyInfo{``0},``0,Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value as a specified type, 
            first checking authorization.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetProperty``1(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's managed field value, 
            first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetPropertyConvert``2(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's value from the list of 
            managed field values, first checking authorization,
            and converting the value to an appropriate type.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetPropertyConvert``2(Csla.PropertyInfo{``0},Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value from the list of 
            managed field values, first checking authorization,
            and converting the value to an appropriate type.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetProperty``1(Csla.PropertyInfo{``0},Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value as a specified type, 
            first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetProperty(Csla.Core.IPropertyInfo)">
            <summary>
            Gets a property's value as a specified type.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetProperty``1(Csla.Core.IPropertyInfo)">
            <summary>
            Gets a property's managed field value, 
            first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.ReadPropertyConvert``2(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's value from the list of 
            managed field values, converting the 
            value to an appropriate type.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.ReadProperty``1(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's value as a specified type.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.ReadProperty(Csla.Core.IPropertyInfo)">
            <summary>
            Gets a property's value.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetProperty``1(Csla.PropertyInfo{``0},``0@,``0)">
            <summary>
            Sets a property's backing field with the supplied
            value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <param name="field">
            A reference to the backing field for the property.</param>
            <param name="newValue">
            The new value for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to change the property, this
            overload throws a SecurityException.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetProperty``1(System.String,``0@,``0)">
            <summary>
            Sets a property's backing field with the supplied
            value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <param name="field">
            A reference to the backing field for the property.</param>
            <param name="newValue">
            The new value for the property.</param>
            <param name="propertyName">
            The name of the property.</param>
            <remarks>
            If the user is not authorized to change the property, this
            overload throws a SecurityException.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetPropertyConvert``2(Csla.PropertyInfo{``0},``0@,``1)">
            <summary>
            Sets a property's backing field with the 
            supplied value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <typeparam name="P">
            Type of the field being set.
            </typeparam>
            <typeparam name="V">
            Type of the value provided to the field.
            </typeparam>
            <param name="field">
            A reference to the backing field for the property.</param>
            <param name="newValue">
            The new value for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to change the property, this
            overload throws a SecurityException.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetPropertyConvert``2(Csla.PropertyInfo{``0},``0@,``1,Csla.Security.NoAccessBehavior)">
            <summary>
            Sets a property's backing field with the 
            supplied value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <typeparam name="P">
            Type of the field being set.
            </typeparam>
            <typeparam name="V">
            Type of the value provided to the field.
            </typeparam>
            <param name="field">
            A reference to the backing field for the property.</param>
            <param name="newValue">
            The new value for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to change this property.</param>
            <remarks>
            If the field value is of type string, any incoming
            null values are converted to string.Empty.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetProperty``1(System.String,``0@,``0,Csla.Security.NoAccessBehavior)">
            <summary>
            Sets a property's backing field with the supplied
            value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <param name="field">
            A reference to the backing field for the property.</param>
            <param name="newValue">
            The new value for the property.</param>
            <param name="propertyName">
            The name of the property.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to change this property.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetPropertyConvert``2(System.String,``0@,``1,Csla.Security.NoAccessBehavior)">
            <summary>
            Sets a property's backing field with the 
            supplied value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <typeparam name="P">
            Type of the field being set.
            </typeparam>
            <typeparam name="V">
            Type of the value provided to the field.
            </typeparam>
            <param name="field">
            A reference to the backing field for the property.</param>
            <param name="newValue">
            The new value for the property.</param>
            <param name="propertyName">
            The name of the property.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to change this property.</param>
            <remarks>
            If the field value is of type string, any incoming
            null values are converted to string.Empty.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetProperty``1(Csla.PropertyInfo{``0},``0)">
            <summary>
            Sets a property's managed field with the 
            supplied value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <typeparam name="P">Property type.</typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            If the user is not authorized to change the property, this
            overload throws a SecurityException.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetPropertyConvert``2(Csla.PropertyInfo{``0},``1)">
            <summary>
            Sets a property's managed field with the 
            supplied value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            If the user is not authorized to change the property, this
            overload throws a SecurityException.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetPropertyConvert``2(Csla.PropertyInfo{``0},``1,Csla.Security.NoAccessBehavior)">
            <summary>
            Sets a property's managed field with the 
            supplied value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to change this property.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetProperty``1(Csla.PropertyInfo{``0},``0,Csla.Security.NoAccessBehavior)">
            <summary>
            Sets a property's managed field with the 
            supplied value, first checking authorization, and then
            calling PropertyHasChanged if the value does change.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to change this property.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetProperty(Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            Sets a property's managed field with the 
            supplied value, and then
            calls PropertyHasChanged if the value does change.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            If the user is not authorized to change the 
            property a SecurityException is thrown.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.SetProperty``1(Csla.Core.IPropertyInfo,``0)">
            <summary>
            Sets a property's managed field with the 
            supplied value, and then
            calls PropertyHasChanged if the value does change.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            If the user is not authorized to change the 
            property a SecurityException is thrown.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.LoadPropertyConvert``2(Csla.PropertyInfo{``0},``1)">
            <summary>
            Loads a property's managed field with the 
            supplied value.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.LoadProperty``1(Csla.PropertyInfo{``0},``0)">
            <summary>
            Loads a property's managed field with the 
            supplied value.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.LoadPropertyMarkDirty``1(Csla.PropertyInfo{``0},``0)">
            <summary>
            Loads a property's managed field with the 
            supplied value and mark field as dirty if value is modified.
            </summary> 
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.ValuesDiffer``1(Csla.PropertyInfo{``0},``0,``0)">
            <summary>
            Check if old and new values are different.
            </summary>
            <typeparam name="P"></typeparam>
            <param name="propertyInfo">The property info.</param>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Core.BusinessBase.LoadPropertyMarkDirty(Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            Loads a property's managed field with the 
            supplied value.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.LoadProperty(Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            Loads a property's managed field with the 
            supplied value.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.Core.BusinessBase.ResetChildEditLevel(System.Object)">
            <summary>
            Makes sure that a child object is set up properly
            to be a child of this object.
            </summary>
            <param name="newValue">Potential child object</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.LoadPropertyAsync``1(Csla.PropertyInfo{``0},System.Threading.Tasks.Task{``0})">
            <summary>
            Load a property from an async method. 
            </summary>
            <typeparam name="R"></typeparam>
            <param name="property"></param>
            <param name="factory"></param>
        </member>
        <member name="M:Csla.Core.BusinessBase.MarkBusy">
            <summary>
            Mark the object as busy (it is
            running an async operation).
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.MarkIdle">
            <summary>
            Mark the object as not busy (it is
            not running an async operation).
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnBusyChanged(Csla.Core.BusyChangedEventArgs)">
            <summary>
            Raise the BusyChanged event.
            </summary>
            <param name="args">Event args.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.IsPropertyBusy(Csla.Core.IPropertyInfo)">
            <summary>
            Gets a value indicating whether a
            specific property is busy (has a
            currently executing async rule).
            </summary>
            <param name="property">
            Property to check.
            </param>
        </member>
        <member name="M:Csla.Core.BusinessBase.IsPropertyBusy(System.String)">
            <summary>
            Gets a value indicating whether a
            specific property is busy (has a
            currently executing async rule).
            </summary>
            <param name="propertyName">
            Name of the property.
            </param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnUnhandledAsyncException(Csla.Core.ErrorEventArgs)">
            <summary>
            Raises the UnhandledAsyncException event.
            </summary>
            <param name="error">Args parameter.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnUnhandledAsyncException(System.Object,System.Exception)">
            <summary>
            Raises the UnhandledAsyncException event.
            </summary>
            <param name="originalSender">Original sender of
            the event.</param>
            <param name="error">Exception object.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnChildChanged(Csla.Core.ChildChangedEventArgs)">
            <summary>
            Raises the ChildChanged event, indicating that a child
            object has been changed.
            </summary>
            <param name="e">
            ChildChangedEventArgs object.
            </param>
        </member>
        <member name="M:Csla.Core.BusinessBase.RaiseChildChanged(Csla.Core.ChildChangedEventArgs)">
            <summary>
            Creates a ChildChangedEventArgs and raises the event.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.RaiseChildChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Creates a ChildChangedEventArgs and raises the event.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.RaiseChildChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Creates a ChildChangedEventArgs and raises the event.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.Child_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles any PropertyChanged event from 
            a child object and echoes it up as
            a ChildChanged event.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.Child_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles any CollectionChanged event
            from a child list and echoes it up as
            a ChildChanged event.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.Child_Changed(System.Object,Csla.Core.ChildChangedEventArgs)">
            <summary>
            Handles any ChildChanged event from
            a child object and echoes it up as
            a ChildChanged event.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.EditChildComplete(Csla.Core.IEditableBusinessObject)">
            <summary>
            Override this method to be notified when a child object's
            <see cref="M:Csla.Core.BusinessBase.ApplyEdit"/> method has
            completed.
            </summary>
            <param name="child">The child object that was edited.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to insert your child object
            references into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to retrieve your child object
            references from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnCopyState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Copy object state.
            </summary>
            <param name="state">Serialization state.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnUndoChanges(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Undo object state.
            </summary>
            <param name="state">Serialization state.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.AcceptingChanges">
            <summary>
            Accept object state.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnErrorsChanged(System.ComponentModel.DataErrorsChangedEventArgs)">
            <summary>
            Raises the ErrorsChanged event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnPropertyChanged(System.String)">
            <summary>
            Call this method to raise the PropertyChanged event
            for a specific property.
            </summary>
            <param name="propertyName">Name of the property that
            is being changed.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.OnUnknownPropertyChanged">
            <summary>
            Call this method to raise the PropertyChanged event
            for all object properties.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.Csla#Core#ICheckRules#SuppressRuleChecking">
            <summary>
            Sets value indicating no rule methods will be invoked.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.Csla#Core#ICheckRules#ResumeRuleChecking">
            <summary>
            Resets value indicating all rule methods will be invoked.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.Csla#Core#ICheckRules#CheckRules">
            <summary>
            Invokes all rules for the business object.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.GetBrokenRules">
            <summary>
            Gets the broken rules for this object
            </summary>
        </member>
        <member name="P:Csla.Core.BusinessBase.Parent">
            <summary>
            Provide access to the parent reference for use
            in child object code.
            </summary>
            <remarks>
            This value will be Nothing for root objects.
            </remarks>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsNew">
            <summary>
            Returns <see langword="true" /> if this is a new object, 
            <see langword="false" /> if it is a pre-existing object.
            </summary>
            <remarks>
            An object is considered to be new if its primary identifying (key) value 
            doesn't correspond to data in the database. In other words, 
            if the data values in this particular
            object have not yet been saved to the database the object is considered to
            be new. Likewise, if the object's data has been deleted from the database
            then the object is considered to be new.
            </remarks>
            <returns>A value indicating if this object is new.</returns>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsDeleted">
            <summary>
            Returns <see langword="true" /> if this object is marked for deletion.
            </summary>
            <remarks>
            CSLA .NET supports both immediate and deferred deletion of objects. This
            property is part of the support for deferred deletion, where an object
            can be marked for deletion, but isn't actually deleted until the object
            is saved to the database. This property indicates whether or not the
            current object has been marked for deletion. If it is <see langword="true" />
            , the object will
            be deleted when it is saved to the database, otherwise it will be inserted
            or updated by the save operation.
            </remarks>
            <returns>A value indicating if this object is marked for deletion.</returns>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsDirty">
            <summary>
            Returns <see langword="true" /> if this object's 
            data, or any of its fields or child objects data, 
            has been changed.
            </summary>
            <remarks>
            <para>
            When an object's data is changed, CSLA .NET makes note of that change
            and considers the object to be 'dirty' or changed. This value is used to
            optimize data updates, since an unchanged object does not need to be
            updated into the database. All new objects are considered dirty. All objects
            marked for deletion are considered dirty.
            </para><para>
            Once an object's data has been saved to the database (inserted or updated)
            the dirty flag is cleared and the object is considered unchanged. Objects
            newly loaded from the database are also considered unchanged.
            </para>
            </remarks>
            <returns>A value indicating if this object's data has been changed.</returns>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsSelfDirty">
            <summary>
            Returns <see langword="true" /> if this object's data has been changed.
            </summary>
            <remarks>
            <para>
            When an object's data is changed, CSLA .NET makes note of that change
            and considers the object to be 'dirty' or changed. This value is used to
            optimize data updates, since an unchanged object does not need to be
            updated into the database. All new objects are considered dirty. All objects
            marked for deletion are considered dirty.
            </para><para>
            Once an object's data has been saved to the database (inserted or updated)
            the dirty flag is cleared and the object is considered unchanged. Objects
            newly loaded from the database are also considered unchanged.
            </para>
            </remarks>
            <returns>A value indicating if this object's data has been changed.</returns>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsSavable">
            <summary>
            Returns <see langword="true" /> if this object is both dirty and valid.
            </summary>
            <remarks>
            An object is considered dirty (changed) if 
            <see cref="P:Csla.BusinessBase.IsDirty" /> returns <see langword="true" />. It is
            considered valid if IsValid
            returns <see langword="true" />. The IsSavable property is
            a combination of these two properties. 
            </remarks>
            <returns>A value indicating if this object is both dirty and valid.</returns>
        </member>
        <member name="P:Csla.Core.BusinessBase.DisableIEditableObject">
            <summary>
            Gets or sets a value indicating whether the
            IEditableObject interface methods should
            be disabled for this object.
            </summary>
            <value>Defaults to False, indicating that
            the IEditableObject methods will behave
            normally.</value>
            <remarks>
            If you disable the IEditableObject methods
            then Windows Forms data binding will no longer
            automatically call BeginEdit, CancelEdit or
            ApplyEdit on your object, and you will have
            to call these methods manually to get proper
            n-level undo behavior.
            </remarks>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsChild">
            <summary>
            Returns <see langword="true" /> if this is a child (non-root) object.
            </summary>
        </member>
        <member name="P:Csla.Core.BusinessBase.EditLevelAdded">
            <summary>
            Gets or sets the current edit level of the
            object.
            </summary>
            <remarks>
            Allow the collection object to use the
            edit level as needed.
            </remarks>
        </member>
        <member name="E:Csla.Core.BusinessBase.ValidationComplete">
            <summary>
            Event raised when validation is complete.
            </summary>
        </member>
        <member name="P:Csla.Core.BusinessBase.BusinessRules">
            <summary>
            Provides access to the broken rules functionality.
            </summary>
            <remarks>
            This property is used within your business logic so you can
            easily call the AddRule() method to associate business
            rules with your object's properties.
            </remarks>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsValid">
            <summary>
            Returns <see langword="true" /> if the object 
            and its child objects are currently valid, 
            <see langword="false" /> if the
            object or any of its child objects have broken 
            rules or are otherwise invalid.
            </summary>
            <remarks>
            <para>
            By default this property relies on the underling BusinessRules
            object to track whether any business rules are currently broken for this object.
            </para><para>
            You can override this property to provide more sophisticated
            implementations of the behavior. For instance, you should always override
            this method if your object has child objects, since the validity of this object
            is affected by the validity of all child objects.
            </para>
            </remarks>
            <returns>A value indicating if the object is currently valid.</returns>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsSelfValid">
            <summary>
            Returns <see langword="true" /> if the object is currently 
            valid, <see langword="false" /> if the
            object has broken rules or is otherwise invalid.
            </summary>
            <remarks>
            <para>
            By default this property relies on the underling BusinessRules
            object to track whether any business rules are currently broken for this object.
            </para><para>
            You can override this property to provide more sophisticated
            implementations of the behavior. 
            </para>
            </remarks>
            <returns>A value indicating if the object is currently valid.</returns>
        </member>
        <member name="P:Csla.Core.BusinessBase.BrokenRulesCollection">
            <summary>
            Provides access to the readonly collection of broken business rules
            for this object.
            </summary>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsBusy">
            <summary>
            Gets a value indicating if this
            object or its child objects are
            busy.
            </summary>
        </member>
        <member name="P:Csla.Core.BusinessBase.IsSelfBusy">
            <summary>
            Gets a value indicating if this
            object is busy.
            </summary>
        </member>
        <member name="E:Csla.Core.BusinessBase.BusyChanged">
            <summary>
            Event indicating that the IsBusy property has changed.
            </summary>
        </member>
        <member name="E:Csla.Core.BusinessBase.UnhandledAsyncException">
            <summary>
            Event indicating that an exception occurred during
            the processing of an async operation.
            </summary>
        </member>
        <member name="E:Csla.Core.BusinessBase.ChildChanged">
            <summary>
            Event raised when a child object has been changed.
            </summary>
        </member>
        <member name="P:Csla.Core.BusinessBase.FieldManager">
            <summary>
            Gets the PropertyManager object for this
            business object.
            </summary>
        </member>
        <member name="P:Csla.Core.BusinessBase.BypassPropertyChecks">
            <summary>
            By wrapping this property inside Using block
            you can set property values on current business object
            without raising PropertyChanged events
            and checking user rights.
            </summary>
        </member>
        <member name="E:Csla.Core.BusinessBase.ErrorsChanged">
            <summary>
            Event raised when error information has changed.
            </summary>
        </member>
        <member name="T:Csla.Core.BusinessBase.BypassPropertyChecksObject">
            <summary>
            Class that allows setting of property values on 
            current business object
            without raising PropertyChanged events
            and checking user rights.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.BypassPropertyChecksObject.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:Csla.Core.BusinessBase.BypassPropertyChecksObject.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="dispose">Dispose flag.</param>
        </member>
        <member name="M:Csla.Core.BusinessBase.BypassPropertyChecksObject.GetManager(Csla.Core.BusinessBase)">
            <summary>
            Gets the BypassPropertyChecks object.
            </summary>
            <param name="businessObject">The business object.</param>
            <returns></returns>
        </member>
        <member name="P:Csla.Core.BusinessBase.BypassPropertyChecksObject.RefCount">
            <summary>
            Gets the current reference count for this
            object.
            </summary>
        </member>
        <member name="T:Csla.IBusinessBase">
            <summary>
            Consolidated interface of public elements from the
            BusinessBase type.
            </summary>
        </member>
        <member name="M:Csla.BusinessBase`1.GetIdValue">
            <summary>
            Override this method to return a unique identifying
            value for this object.
            </summary>
        </member>
        <member name="M:Csla.BusinessBase`1.ToString">
            <summary>
            Returns a text representation of this object by
            returning the <see cref="M:Csla.BusinessBase`1.GetIdValue"/> value
            in text form.
            </summary>
        </member>
        <member name="M:Csla.BusinessBase`1.Clone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>
            A new object containing the exact data of the original object.
            </returns>
        </member>
        <member name="M:Csla.BusinessBase`1.Save">
            <summary>
            Saves the object to the database.
            </summary>
            <remarks>
            <para>
            Calling this method starts the save operation, causing the object
            to be inserted, updated or deleted within the database based on the
            object's current state.
            </para><para>
            If <see cref="P:Csla.Core.BusinessBase.IsDeleted"/> is <see langword="true"/>
            the object will be deleted. Otherwise, if <see cref="P:Csla.Core.BusinessBase.IsNew"/> 
            is <see langword="true"/> the object will be inserted. 
            Otherwise the object's data will be updated in the database.
            </para><para>
            All this is contingent on <see cref="P:Csla.Core.BusinessBase.IsDirty"/>. If
            this value is <see langword="false"/>, no data operation occurs. 
            It is also contingent on <see cref="P:Csla.Core.BusinessBase.IsValid"/>. 
            If this value is <see langword="false"/> an
            exception will be thrown to indicate that the UI attempted to save an
            invalid object.
            </para><para>
            It is important to note that this method returns a new version of the
            business object that contains any data updated during the save operation.
            You MUST update all object references to use this new version of the
            business object in order to have access to the correct object data.
            </para><para>
            You can override this method to add your own custom behaviors to the save
            operation. For instance, you may add some security checks to make sure
            the user can save the object. If all security checks pass, you would then
            invoke the base Save method via <c>base.Save()</c>.
            </para>
            </remarks>
            <returns>A new object containing the saved values.</returns>
        </member>
        <member name="M:Csla.BusinessBase`1.SaveAsync">
            <summary>
            Saves the object to the database.
            </summary>
        </member>
        <member name="M:Csla.BusinessBase`1.SaveAsync(System.Boolean)">
            <summary>
            Saves the object to the database.
            </summary>
            <param name="forceUpdate">
            If <see langword="true"/>, triggers overriding IsNew and IsDirty. 
            If <see langword="false"/> then it is the same as calling Save().
            </param>
        </member>
        <member name="M:Csla.BusinessBase`1.SaveAsync(System.Boolean,System.Object,System.Boolean)">
            <summary>
            Saves the object to the database.
            </summary>
            <param name="forceUpdate">
            If <see langword="true"/>, triggers overriding IsNew and IsDirty. 
            If <see langword="false"/> then it is the same as calling Save().
            </param>
            <param name="userState">User state data.</param>
            <param name="isSync">True if the save operation should be synchronous.</param>
        </member>
        <member name="M:Csla.BusinessBase`1.Save(System.Boolean)">
            <summary>
            Saves the object to the database, forcing
            IsNew to <see langword="false"/> and IsDirty to True.
            </summary>
            <param name="forceUpdate">
            If <see langword="true"/>, triggers overriding IsNew and IsDirty. 
            If <see langword="false"/> then it is the same as calling Save().
            </param>
            <returns>A new object containing the saved values.</returns>
            <remarks>
            This overload is designed for use in web applications
            when implementing the Update method in your 
            data wrapper object.
            </remarks>
        </member>
        <member name="M:Csla.BusinessBase`1.BeginSave">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
        </member>
        <member name="M:Csla.BusinessBase`1.BeginSave(System.Object)">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
            <param name="userState">User state data.</param>
        </member>
        <member name="M:Csla.BusinessBase`1.BeginSave(System.EventHandler{Csla.Core.SavedEventArgs})">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
            <param name="handler">
            Method called when the operation is complete.
            </param>
        </member>
        <member name="M:Csla.BusinessBase`1.BeginSave(System.Boolean,System.EventHandler{Csla.Core.SavedEventArgs},System.Object)">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
            <param name="forceUpdate">
            If <see langword="true"/>, triggers overriding IsNew and IsDirty. 
            If <see langword="false"/> then it is the same as calling Save().
            </param>
            <param name="handler">
            Method called when the operation is complete.
            </param>
            <param name="userState">User state data.</param>
        </member>
        <member name="M:Csla.BusinessBase`1.BeginSave(System.Boolean)">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
            <param name="forceUpdate">
            If <see langword="true"/>, triggers overriding IsNew and IsDirty. 
            If <see langword="false"/> then it is the same as calling Save().
            </param>
            <remarks>
            This overload is designed for use in web applications
            when implementing the Update method in your 
            data wrapper object.
            </remarks>
        </member>
        <member name="M:Csla.BusinessBase`1.BeginSave(System.Boolean,System.EventHandler{Csla.Core.SavedEventArgs})">
            <summary>
            Starts an async operation to save the object to the database.
            </summary>
            <param name="forceUpdate">
            If <see langword="true"/>, triggers overriding IsNew and IsDirty. 
            If <see langword="false"/> then it is the same as calling Save().
            </param>
            <param name="handler">
            Delegate reference to a callback handler that will
            be invoked when the async operation is complete.
            </param>
            <remarks>
            This overload is designed for use in web applications
            when implementing the Update method in your 
            data wrapper object.
            </remarks>
        </member>
        <member name="M:Csla.BusinessBase`1.BeginSave(System.EventHandler{Csla.Core.SavedEventArgs},System.Object)">
            <summary>
            Saves the object to the database, forcing
            IsNew to <see langword="false"/> and IsDirty to True.
            </summary>
            <param name="handler">
            Delegate reference to a callback handler that will
            be invoked when the async operation is complete.
            </param>
            <param name="userState">User state data.</param>
            <remarks>
            This overload is designed for use in web applications
            when implementing the Update method in your 
            data wrapper object.
            </remarks>
        </member>
        <member name="M:Csla.BusinessBase`1.OnSaved(`0,System.Exception,System.Object)">
            <summary>
            Raises the Saved event, indicating that the
            object has been saved, and providing a reference
            to the new object instance.
            </summary>
            <param name="newObject">The new object instance.</param>
            <param name="e">Exception that occurred during operation.</param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.BusinessBase`1.RegisterProperty``1(Csla.PropertyInfo{``0})">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">
            Type of property.
            </typeparam>
            <param name="info">
            PropertyInfo object for the property.
            </param>
            <returns>
            The provided IPropertyInfo object.
            </returns>
        </member>
        <member name="M:Csla.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <returns></returns>
        </member>
        <member name="M:Csla.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Csla.RelationshipTypes)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="relationship">Relationship with
            referenced object.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <returns></returns>
        </member>
        <member name="M:Csla.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,Csla.RelationshipTypes)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <param name="relationship">Relationship with
            referenced object.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,``0)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <param name="defaultValue">Default Value for the property</param>
            <returns></returns>
        </member>
        <member name="M:Csla.BusinessBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,``0,Csla.RelationshipTypes)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <param name="defaultValue">Default Value for the property</param>
            <param name="relationship">Relationship with
            referenced object.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.BusinessBase`1.RegisterMethod(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Registers a method for use in Authorization.
            </summary>
            <param name="methodLambdaExpression">The method lambda expression.</param>
            <returns></returns>
        </member>
        <member name="E:Csla.BusinessBase`1.Saved">
            <summary>
            Event raised when an object has been saved.
            </summary>
        </member>
        <member name="T:Csla.Core.FieldManager.FieldData`1">
            <summary>
            Contains a field value and related metadata.
            </summary>
            <typeparam name="T">Type of field value contained.</typeparam>
        </member>
        <member name="T:Csla.Core.FieldManager.IFieldData`1">
            <summary>
            Defines the members required by a field
            data storage object.
            </summary>
        </member>
        <member name="T:Csla.Core.FieldManager.IFieldData">
            <summary>
            Defines the members required by a field
            data storage object.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.IFieldData.MarkClean">
            <summary>
            Marks the field as unchanged.
            </summary>
        </member>
        <member name="P:Csla.Core.FieldManager.IFieldData.Name">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="P:Csla.Core.FieldManager.IFieldData.Value">
            <summary>
            Gets or sets the field value.
            </summary>
            <value>The value of the field.</value>
            <returns>The value of the field.</returns>
        </member>
        <member name="P:Csla.Core.FieldManager.IFieldData`1.Value">
            <summary>
            Gets or sets the field value.
            </summary>
            <value>The value of the field.</value>
            <returns>The value of the field.</returns>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldData`1.#ctor(System.String)">
            <summary>
            Creates a new instance of the object.
            </summary>
            <param name="name">
            Name of the field.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldData`1.MarkClean">
            <summary>
            Marks the field as unchanged.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldData`1.OnUnhandledAsyncException(Csla.Core.ErrorEventArgs)">
            <summary>
            Raises the UnhandledAsyncException event.
            </summary>
            <param name="error">Exception that occurred on the background thread.</param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldData`1.OnUnhandledAsyncException(System.Object,System.Exception)">
            <summary>
            Raises the UnhandledAsyncException event.
            </summary>
            <param name="originalSender">Original source of the event.</param>
            <param name="error">Exception that occurred on the background thread.</param>
        </member>
        <member name="P:Csla.Core.FieldManager.FieldData`1.Name">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="P:Csla.Core.FieldManager.FieldData`1.Value">
            <summary>
            Gets or sets the value of the field.
            </summary>
        </member>
        <member name="P:Csla.Core.FieldManager.FieldData`1.IsSelfDirty">
            <summary>
            Gets a value indicating whether the field
            has been changed.
            </summary>
        </member>
        <member name="P:Csla.Core.FieldManager.FieldData`1.IsDirty">
            <summary>
            Gets a value indicating whether the field
            has been changed.
            </summary>
        </member>
        <member name="P:Csla.Core.FieldManager.FieldData`1.IsValid">
            <summary>
            Gets a value indicating whether this field
            is considered valid.
            </summary>
        </member>
        <member name="P:Csla.Core.FieldManager.FieldData`1.IsBusy">
            <summary>
            Gets a value indicating whether this object or
            any of its child objects are busy.
            </summary>
        </member>
        <member name="E:Csla.Core.FieldManager.FieldData`1.UnhandledAsyncException">
            <summary>
            Event indicating that an exception occurred on
            a background thread.
            </summary>
        </member>
        <member name="T:Csla.Core.FieldManager.FieldDataManager">
            <summary>
            Manages properties and property data for
            a business object.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.SetPropertyList(System.Type)">
            <summary>
            Called when parent object is deserialized to
            restore property list.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.SetParent(Csla.Core.BusinessBase)">
            <summary>
            Called by parent to set the back-reference.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.GetRegisteredProperties">
            <summary>
            Returns a copy of the property list for
            the business object. Returns
            null if there are no properties registered
            for this object.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.GetRegisteredProperty(System.String)">
            <summary>
            Returns the IPropertyInfo object corresponding to the
            property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the
            property name doesn't correspond to a registered property.</exception>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.GetFieldData(Csla.Core.IPropertyInfo)">
            <summary>
            Gets the <see cref="T:Csla.Core.FieldManager.IFieldData"/> object
            for a specific field.
            </summary>
            <param name="propertyInfo">
            The property corresponding to the field.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.SetFieldData(Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            Sets the value for a specific field.
            </summary>
            <param name="prop">
            The property corresponding to the field.
            </param>
            <param name="value">
            Value to store for field.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.SetFieldData``1(Csla.Core.IPropertyInfo,``0)">
            <summary>
            Sets the value for a specific field.
            </summary>
            <typeparam name="P">
            Type of field value.
            </typeparam>
            <param name="prop">
            The property corresponding to the field.
            </param>
            <param name="value">
            Value to store for field.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.LoadFieldData(Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            Sets the value for a specific field without
            marking the field as dirty.
            </summary>
            <param name="prop">
            The property corresponding to the field.
            </param>
            <param name="value">
            Value to store for field.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.LoadFieldData``1(Csla.Core.IPropertyInfo,``0)">
            <summary>
            Sets the value for a specific field without
            marking the field as dirty.
            </summary>
            <typeparam name="P">
            Type of field value.
            </typeparam>
            <param name="prop">
            The property corresponding to the field.
            </param>
            <param name="value">
            Value to store for field.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.RemoveField(Csla.Core.IPropertyInfo)">
            <summary>
            Removes the value for a specific field.
            The <see cref="T:Csla.Core.FieldManager.IFieldData"/> object is
            not removed, only the contained field value.
            </summary>
            <param name="prop">
            The property corresponding to the field.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.FieldExists(Csla.Core.IPropertyInfo)">
            <summary>
            Returns a value indicating whether an
            <see cref="T:Csla.Core.FieldManager.IFieldData"/> entry exists
            for the specified property.
            </summary>
            <param name="propertyInfo">
            The property corresponding to the field.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.IsFieldDirty(Csla.Core.IPropertyInfo)">
            <summary>
            Gets a value indicating whether the specified field
            has been changed.
            </summary>
            <param name="propertyInfo">
            The property corresponding to the field.
            </param>
            <returns>True if the field has been changed.</returns>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.IsValid">
            <summary>
            Returns a value indicating whether all
            fields are valid.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.IsDirty">
            <summary>
            Returns a value indicating whether any
            fields are dirty.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.MarkClean">
            <summary>
            Marks all fields as clean
            (not dirty).
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.GetChildren">
            <summary>
            Returns a list of all child objects
            contained in the list of fields.
            </summary>
            <remarks>
            This method returns a list of actual child
            objects, not a list of
            <see cref="T:Csla.Core.FieldManager.IFieldData"/> container objects.
            </remarks>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.UpdateChildren(System.Object[])">
            <summary>
            Invokes the data portal to update
            all child objects contained in 
            the list of fields.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Serializes child objects.
            </summary>
            <param name="info">Serialization state</param>
            <param name="formatter">Serializer instance</param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Deserializes child objects.
            </summary>
            <param name="info">Serialization state</param>
            <param name="formatter">Serializer instance</param>
        </member>
        <member name="M:Csla.Core.FieldManager.FieldDataManager.ForceStaticFieldInit(System.Type)">
            <summary>
            Forces initialization of the static fields declared
            by a type, and any of its base class types.
            </summary>
            <param name="type">Type of object to initialize.</param>
        </member>
        <member name="P:Csla.Core.FieldManager.FieldDataManager.HasFields">
            <summary>
            Gets a value indicating whether there
            are any managed fields available.
            </summary>
        </member>
        <member name="P:Csla.Core.FieldManager.FieldDataManager.EditLevel">
            <summary>
            Gets the current edit level of the object.
            </summary>
        </member>
        <member name="T:Csla.Core.FieldManager.PropertyInfoFactory">
            <summary>
            Creates the factory object that
            creates PropertyInfo objects.
            </summary>
        </member>
        <member name="P:Csla.Core.FieldManager.PropertyInfoFactory.Factory">
            <summary>
            Gets or sets the factory object that
            creates PropertyInfo objects.
            </summary>
        </member>
        <member name="T:Csla.Core.FieldManager.PropertyComparer">
            <summary>
            Compare to propertyinfo x with y for sorting
            </summary>
        </member>
        <member name="T:Csla.Core.FieldManager.PropertyInfoManager">
            <summary>
            Manages the PropertyInfo data for business object types.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.PropertyInfoManager.RegisterProperty``1(System.Type,Csla.PropertyInfo{``0})">
            <summary>
            Indicates that the specified property belongs
            to the type.
            </summary>
            <typeparam name="T">
            Type of property.
            </typeparam>
            <param name="objectType">
            Type of object to which the property belongs.
            </param>
            <param name="info">
            PropertyInfo object for the property.
            </param>
            <returns>
            The provided IPropertyInfo object.
            </returns>
        </member>
        <member name="M:Csla.Core.FieldManager.PropertyInfoManager.GetRegisteredProperties(System.Type)">
            <summary>
            Returns a copy of the property list for
            a given business object type. Returns
            null if there are no properties registered
            for the type.
            </summary>
            <param name="objectType">
            The business object type.
            </param>
            <remarks>
            Registered property information is only available after at least one instannce
            of the object type has been created within the current AppDomain.
            </remarks>
        </member>
        <member name="T:Csla.CommandBase`1">
            <summary>
            This is the base class from which command 
            objects will be derived.
            </summary>
            <remarks>
            <para>
            Command objects allow the execution of arbitrary server-side
            functionality. Most often, this involves the invocation of
            a stored procedure in the database, but can involve any other
            type of stateless, atomic call to the server instead.
            </para><para>
            To implement a command object, inherit from CommandBase and
            override the DataPortal_Execute method. In this method you can
            implement any server-side code as required.
            </para><para>
            To pass data to/from the server, use instance variables within
            the command object itself. The command object is instantiated on
            the client, and is passed by value to the server where the 
            DataPortal_Execute method is invoked. The command object is then
            returned to the client by value.
            </para>
            </remarks>
        </member>
        <member name="T:Csla.Core.ManagedObjectBase">
            <summary>
            Base class for an object that is serializable
            using MobileFormatter.
            </summary>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.RegisterProperty``1(System.Type,Csla.PropertyInfo{``0})">
            <summary>
            Indicates that the specified property belongs
            to the type.
            </summary>
            <typeparam name="P">
            Type of property.
            </typeparam>
            <param name="objectType">
            Type of object to which the property belongs.
            </param>
            <param name="info">
            PropertyInfo object for the property.
            </param>
            <returns>
            The provided IPropertyInfo object.
            </returns>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.RegisterProperty``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="T">Type of object to which the property belongs.</typeparam>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <returns>The provided IPropertyInfo object.</returns>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.RegisterProperty``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <returns>The provided IPropertyInfo object.</returns>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.RegisterProperty``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,``1)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="T">Type of Target</typeparam>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <param name="defaultValue">Default Value for the property</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.ReadPropertyConvert``2(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's value from the list of 
            managed field values, converting the 
            value to an appropriate type.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.ReadProperty``1(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's value as a specified type.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.ReadProperty(Csla.Core.IPropertyInfo)">
            <summary>
            Gets a property's value as a specified type.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.LoadPropertyConvert``2(Csla.PropertyInfo{``0},``1)">
            <summary>
            Loads a property's managed field with the 
            supplied value calling PropertyHasChanged 
            if the value does change.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.LoadProperty``1(Csla.PropertyInfo{``0},``0)">
            <summary>
            Loads a property's managed field with the 
            supplied value calling PropertyHasChanged 
            if the value does change.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.LoadProperty(Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            Loads a property's managed field with the 
            supplied value calling PropertyHasChanged 
            if the value does change.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.LoadPropertyMarkDirty(Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            Loads the property vith new value and mark field dirty if value is changed.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <param name="newValue">The new value.</param>
            <returns>[true] if changed, else [false] </returns>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">Name of the changed property.</param>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.OnPropertyChanged(Csla.Core.IPropertyInfo)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyInfo">The property info object for the changed property.</param>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to manually retrieve child
            object data from the serializations stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="formatter">Reference to the MobileFormatter.</param>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to manually serialize child
            objects into the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="formatter">Reference to the MobileFormatter.</param>
        </member>
        <member name="M:Csla.Core.ManagedObjectBase.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method is called on a newly deserialized object
            after deserialization is complete.
            </summary>
            <param name="context">Serialization context object.</param>
        </member>
        <member name="P:Csla.Core.ManagedObjectBase.FieldManager">
            <summary>
            Gets a reference to the field mananger
            for this object.
            </summary>
        </member>
        <member name="E:Csla.Core.ManagedObjectBase.PropertyChanged">
            <summary>
            Event raised when a property has changed.
            </summary>
        </member>
        <member name="T:Csla.ICommandBase">
            <summary>
            This is the base class from which command 
            objects will be derived.
            </summary>
        </member>
        <member name="M:Csla.CommandBase`1.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.CommandBase`1.Initialize">
            <summary>
            Override this method to set up event handlers so user
            code in a partial class can respond to events raised by
            generated code.
            </summary>
        </member>
        <member name="M:Csla.CommandBase`1.DataPortal_Execute">
            <summary>
            Override this method to implement any server-side code
            that is to be run when the command is executed.
            </summary>
        </member>
        <member name="M:Csla.CommandBase`1.DataPortal_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.CommandBase`1.DataPortal_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.CommandBase`1.DataPortal_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during server-side processing.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during processing.</param>
        </member>
        <member name="M:Csla.CommandBase`1.GetClone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>
            A new object containing the exact data of the original object.
            </returns>
        </member>
        <member name="M:Csla.CommandBase`1.Clone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>
            A new object containing the exact data of the original object.
            </returns>
        </member>
        <member name="M:Csla.CommandBase`1.RegisterProperty``1(Csla.PropertyInfo{``0})">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">
            Type of property.
            </typeparam>
            <param name="info">
            PropertyInfo object for the property.
            </param>
            <returns>
            The provided IPropertyInfo object.
            </returns>
        </member>
        <member name="M:Csla.CommandBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <returns></returns>
        </member>
        <member name="M:Csla.CommandBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Csla.RelationshipTypes)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="relationship">Relationship with
            referenced object.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.CommandBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <returns></returns>
        </member>
        <member name="M:Csla.CommandBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,Csla.RelationshipTypes)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <param name="relationship">Relationship with
            referenced object.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.CommandBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,``0)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <param name="defaultValue">Default Value for the property</param>
            <returns></returns>
        </member>
        <member name="M:Csla.CommandBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,``0,Csla.RelationshipTypes)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <param name="defaultValue">Default Value for the property</param>
            <param name="relationship">Relationship with
            referenced object.</param>
            <returns></returns>
        </member>
        <member name="T:Csla.Core.FieldManager.DefaultPropertyInfoFactory">
            <summary>
            Creates PropertyInfo objects.
            </summary>
        </member>
        <member name="T:Csla.Core.IPropertyInfoFactory">
            <summary>
            Defines the interface for a factory object
            that creates IPropertyInfo objects.
            </summary>
        </member>
        <member name="M:Csla.Core.IPropertyInfoFactory.Create``1(System.Type,System.String)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
        </member>
        <member name="M:Csla.Core.IPropertyInfoFactory.Create``1(System.Type,System.String,System.String)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
        </member>
        <member name="M:Csla.Core.IPropertyInfoFactory.Create``1(System.Type,System.String,System.String,Csla.RelationshipTypes)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
            <param name="relationship">Relationship with
            referenced object.</param>
        </member>
        <member name="M:Csla.Core.IPropertyInfoFactory.Create``1(System.Type,System.String,System.String,``0)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
            <param name="defaultValue">
            Default value for the property.
            </param>
        </member>
        <member name="M:Csla.Core.IPropertyInfoFactory.Create``1(System.Type,System.String,System.String,``0,Csla.RelationshipTypes)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
            <param name="defaultValue">
            Default value for the property.
            </param>
            <param name="relationship">Relationship with
            referenced object.</param>
        </member>
        <member name="M:Csla.Core.FieldManager.DefaultPropertyInfoFactory.Create``1(System.Type,System.String)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
        </member>
        <member name="M:Csla.Core.FieldManager.DefaultPropertyInfoFactory.Create``1(System.Type,System.String,System.String)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.DefaultPropertyInfoFactory.Create``1(System.Type,System.String,System.String,Csla.RelationshipTypes)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
            <param name="relationship">Relationship with
            referenced object.</param>
        </member>
        <member name="M:Csla.Core.FieldManager.DefaultPropertyInfoFactory.Create``1(System.Type,System.String,System.String,``0)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
            <param name="defaultValue">
            Default value for the property.
            </param>
        </member>
        <member name="M:Csla.Core.FieldManager.DefaultPropertyInfoFactory.Create``1(System.Type,System.String,System.String,``0,Csla.RelationshipTypes)">
            <summary>
            Creates a new instance of PropertyInfo.
            </summary>
            <param name="containingType">
            Type of business class that contains the property
            declaration.
            </param>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
            <param name="defaultValue">
            Default value for the property.
            </param>
            <param name="relationship">Relationship with
            referenced object.</param>
        </member>
        <member name="M:Csla.Core.FieldManager.DefaultPropertyInfoFactory.GetFriendlyNameFromAttributes(System.Type,System.String)">
            <summary>
            Looks at the passed in type and trys to resolve the friendly name via DataAnnotations or the ComponentModel attribute.
            
            Note: This code should not throw any exceptions because the property must exist!
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name of the property.</param>
            <returns>Returns the display name or the property name.</returns>
        </member>
        <member name="T:Csla.Core.IMemberInfo">
            <summary>
            Maintains metadata about a method or property.
            </summary>
        </member>
        <member name="P:Csla.Core.IMemberInfo.Name">
            <summary>
            Gets the member name value.
            </summary>
        </member>
        <member name="T:Csla.Core.IObservableBindingList">
            <summary>
            Defines additional elements for an
            ObservableCollection as required by
            CSLA .NET.
            </summary>
        </member>
        <member name="M:Csla.Core.IObservableBindingList.AddNew">
            <summary>
            Creates and adds a new item to the collection.
            </summary>
        </member>
        <member name="E:Csla.Core.IObservableBindingList.RemovingItem">
            <summary>
            Event indicating that an item is being
            removed from the list.
            </summary>
        </member>
        <member name="T:Csla.Core.IReadOnlyObject">
            <summary>
            Specifies that the object is a readonly
            business object.
            </summary>
        </member>
        <member name="M:Csla.Core.IReadOnlyObject.CanReadProperty(System.String)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            calling property.
            </summary>
            <param name="propertyName">Name of the property to read.</param>
        </member>
        <member name="T:Csla.Core.LoadManager.AsyncLoadException">
            <summary>
            Exception class to add the PropertyInfo and better nmessage to an async exception
            </summary>
        </member>
        <member name="M:Csla.Core.LoadManager.AsyncLoadException.#ctor(Csla.Core.IPropertyInfo,System.String,System.Exception)">
            <summary>
            Constructor for AsyncLoadException
            </summary>
            <param name="property">the IPropertyInfo that desccribes the property</param>
            <param name="message">Clear text message for user</param>
            <param name="ex">the actual exception</param>
        </member>
        <member name="P:Csla.Core.LoadManager.AsyncLoadException.Property">
            <summary>
            The property that Async LazyLoad failed on.  
            </summary>
            <value>
            The property.
            </value>
        </member>
        <member name="T:Csla.IDataPortalResult">
            <summary>
            IDataPortalResult defines the results of DataPortal operation
            </summary>
        </member>
        <member name="P:Csla.IDataPortalResult.Object">
            <summary>
            Gets the resulting object.
            </summary>
        </member>
        <member name="P:Csla.IDataPortalResult.Error">
            <summary>
            Gets any resulting error information.
            </summary>
        </member>
        <member name="P:Csla.IDataPortalResult.UserState">
            <summary>
            Gets the user state, pass through object
            </summary>
            <value>
            The user state.
            </value>
        </member>
        <member name="T:Csla.Core.LoadManager.TaskLoader`1">
            <summary>
            Wraps async loading by Task&gt;T&lt; from DataPortal.XYZAsync methods
            </summary>
        </member>
        <member name="T:Csla.Core.MobileObservableCollection`1">
            <summary>
            Inherit from this base class to easily
            create a serializable list class.
            </summary>
            <typeparam name="T">
            Type of the items contained in the list.
            </typeparam>
        </member>
        <member name="M:Csla.Core.MobileObservableCollection`1.OnGetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to get custom field values
            from the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
        </member>
        <member name="M:Csla.Core.MobileObservableCollection`1.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to get custom child object
            values from the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="formatter">Reference to the MobileFormatter.</param>
        </member>
        <member name="M:Csla.Core.MobileObservableCollection`1.OnSetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to set custom field values
            into the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
        </member>
        <member name="M:Csla.Core.MobileObservableCollection`1.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to set custom child object
            values into the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="formatter">Reference to the MobileFormatter.</param>
        </member>
        <member name="T:Csla.Core.ObservableBindingList`1">
            <summary>
            Extends ObservableCollection with behaviors required
            by CSLA .NET collections.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.AddNew">
            <summary>
            Adds a new item to this collection.
            </summary>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.OnRemovingItem(`0)">
            <summary>
            Raise the RemovingItem event.
            </summary>
            <param name="removedItem">
            A reference to the item that 
            is being removed.
            </param>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.RemoveItem(System.Int32)">
            <summary>
            Remove the item at the
            specified index.
            </summary>
            <param name="index">
            The zero-based index of the item
            to remove.
            </param>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a range of items to the list.
            </summary>
            <param name="range">List of items to add.</param>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.OnBusyChanged(Csla.Core.BusyChangedEventArgs)">
            <summary>
            Override this method to be notified when the
            IsBusy property has changed.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.OnBusyChanged(System.String,System.Boolean)">
            <summary>
            Raises the BusyChanged event for a specific property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="busy">New busy value.</param>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.OnUnhandledAsyncException(Csla.Core.ErrorEventArgs)">
            <summary>
            Method invoked when an unhandled async exception has
            occurred.
            </summary>
            <param name="error">Event arguments.</param>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.OnUnhandledAsyncException(System.Object,System.Exception)">
            <summary>
            Raises the UnhandledAsyncException event.
            </summary>
            <param name="originalSender">Original sender of event.</param>
            <param name="error">Exception that occurred.</param>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.InsertItem(System.Int32,`0)">
            <summary>
            Invoked when an item is inserted into the list.
            </summary>
            <param name="index">Index of new item.</param>
            <param name="item">Reference to new item.</param>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.OnAddEventHooks(`0)">
            <summary>
            Method invoked when events are hooked for a child
            object.
            </summary>
            <param name="item">Reference to child object.</param>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.OnRemoveEventHooks(`0)">
            <summary>
            Method invoked when events are unhooked for a child
            object.
            </summary>
            <param name="item">Reference to child object.</param>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.OnDeserialized">
            <summary>
            This method is called on a newly deserialized object
            after deserialization is complete.
            </summary>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.OnChildChanged(Csla.Core.ChildChangedEventArgs)">
            <summary>
            Raises the ChildChanged event, indicating that a child
            object has been changed.
            </summary>
            <param name="e">
            ChildChangedEventArgs object.
            </param>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.RaiseChildChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Creates a ChildChangedEventArgs and raises the event.
            </summary>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.Child_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles any PropertyChanged event from 
            a child object and echoes it up as
            a ChildChanged event.
            </summary>
            <param name="sender">Object that raised the event.</param>
            <param name="e">Property changed args.</param>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.Child_Changed(System.Object,Csla.Core.ChildChangedEventArgs)">
            <summary>
            Handles any ChildChanged event from
            a child object and echoes it up as
            a ChildChanged event.
            </summary>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.OnAddedNew(`0)">
            <summary>
            Raises the AddedNew event.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.AddNewCore">
            <summary>
            Override this method to create a new object that is added
            to the collection. 
            </summary>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.OnGetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to get custom field values
            from the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
        </member>
        <member name="M:Csla.Core.ObservableBindingList`1.OnSetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to set custom field values
            into the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
        </member>
        <member name="P:Csla.Core.ObservableBindingList`1.SupportsChangeNotificationCore">
            <summary>
            Gets a value indicating whether this object
            supports change notification.
            </summary>
        </member>
        <member name="P:Csla.Core.ObservableBindingList`1.AllowEdit">
            <summary>
            Gets or sets a value indicating whether data binding
            can automatically edit items in this collection.
            </summary>
        </member>
        <member name="P:Csla.Core.ObservableBindingList`1.AllowNew">
            <summary>
            Gets or sets a value indicating whether data binding
            can automatically add new items to this collection.
            </summary>
        </member>
        <member name="P:Csla.Core.ObservableBindingList`1.AllowRemove">
            <summary>
            Gets or sets a value indicating whether data binding
            can automatically remove items from this collection.
            </summary>
        </member>
        <member name="P:Csla.Core.ObservableBindingList`1.RaiseListChangedEvents">
            <summary>
            Gets or sets a value indicating whether the
            collection should raise changed events.
            </summary>
        </member>
        <member name="E:Csla.Core.ObservableBindingList`1.RemovingItem">
            <summary>
            Implements a serialization-safe RemovingItem event.
            </summary>
        </member>
        <member name="E:Csla.Core.ObservableBindingList`1.BusyChanged">
            <summary>
            Event indicating that the busy status of the
            object has changed.
            </summary>
        </member>
        <member name="P:Csla.Core.ObservableBindingList`1.IsBusy">
            <summary>
            Gets the busy status for this object and its child objects.
            </summary>
        </member>
        <member name="P:Csla.Core.ObservableBindingList`1.IsSelfBusy">
            <summary>
            Gets the busy status for this object.
            </summary>
        </member>
        <member name="E:Csla.Core.ObservableBindingList`1.UnhandledAsyncException">
            <summary>
            Event indicating that an exception occurred during
            an async operation.
            </summary>
        </member>
        <member name="E:Csla.Core.ObservableBindingList`1.ChildChanged">
            <summary>
            Event raised when a child object has been changed.
            </summary>
        </member>
        <member name="E:Csla.Core.ObservableBindingList`1.AddedNew">
            <summary>
            Event raised when a new object has been 
            added to the collection.
            </summary>
        </member>
        <member name="P:Csla.Core.ObservableBindingList`1.SuppressListChangedEvents">
            <summary>
            Use this object to suppress ListChangedEvents for an entire code block.
            May be nested in multiple levels for the same object.
            </summary>
        </member>
        <member name="T:Csla.Core.ObservableBindingList`1.SuppressListChangedEventsClass`1">
            <summary>
            Handles the suppressing of raising ChangedEvents when altering the content of an ObservableBindingList.
            Will be instanciated by a factory property on the ObservableBindingList implementation.
            </summary>
            <typeparam name="TC">The type of the C.</typeparam>
        </member>
        <member name="T:Csla.Core.ReadOnlyObservableBindingList`1">
            <summary>
            A readonly version of ObservableBindingList.
            </summary>
            <typeparam name="C">Type of item contained in the list.</typeparam>
            <remarks>
            This is a subclass of ObservableBindingList that implements
            a readonly list, preventing adding and removing of items
            from the list. Use the IsReadOnly property
            to unlock the list for loading/unloading data.
            </remarks>
        </member>
        <member name="M:Csla.Core.ReadOnlyObservableBindingList`1.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Core.ReadOnlyObservableBindingList`1.OnGetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
        </member>
        <member name="M:Csla.Core.ReadOnlyObservableBindingList`1.OnSetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
        </member>
        <member name="M:Csla.Core.ReadOnlyObservableBindingList`1.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to retrieve your child object
            references from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="P:Csla.Core.ReadOnlyObservableBindingList`1.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether the list is readonly.
            </summary>
            <remarks>
            Subclasses can set this value to unlock the collection
            in order to alter the collection's data.
            </remarks>
            <value>True indicates that the list is readonly.</value>
        </member>
        <member name="T:Csla.DataPortal">
            <summary>
            This is the client-side DataPortal.
            </summary>
        </member>
        <member name="M:Csla.DataPortal.Create``1(System.Object)">
            <summary>
            Called by a factory method in a business class to create 
            a new object, which is loaded with default
            values from the database.
            </summary>
            <typeparam name="T">Specific type of the business object.</typeparam>
            <param name="criteria">Object-specific criteria.</param>
            <returns>A new object, populated with default values.</returns>
        </member>
        <member name="M:Csla.DataPortal.Create``1">
            <summary>
            Called by a factory method in a business class to create 
            a new object, which is loaded with default
            values from the database.
            </summary>
            <typeparam name="T">Specific type of the business object.</typeparam>
            <returns>A new object, populated with default values.</returns>
        </member>
        <member name="M:Csla.DataPortal.Create(System.Type,System.Object)">
            <summary>
            Called by a factory method in a business class to create 
            a new object, which is loaded with default
            values from the database.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Object-specific criteria.</param>
            <returns>A new object, populated with default values.</returns>
        </member>
        <member name="M:Csla.DataPortal.BeginCreate``1(System.EventHandler{Csla.DataPortalResult{``0}})">
            <summary>
            Starts an asynchronous data portal operation to
            create a business object.
            </summary>
            <typeparam name="T">
            Type of business object to create.
            </typeparam>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
        </member>
        <member name="M:Csla.DataPortal.BeginCreate``1(System.EventHandler{Csla.DataPortalResult{``0}},System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            create a business object.
            </summary>
            <typeparam name="T">
            Type of business object to create.
            </typeparam>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.DataPortal.BeginCreate``1(System.Object,System.EventHandler{Csla.DataPortalResult{``0}})">
            <summary>
            Starts an asynchronous data portal operation to
            create a business object.
            </summary>
            <typeparam name="T">
            Type of business object to create.
            </typeparam>
            <param name="criteria">
            Criteria describing the object to create.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
        </member>
        <member name="M:Csla.DataPortal.BeginCreate``1(System.Object,System.EventHandler{Csla.DataPortalResult{``0}},System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            create a business object.
            </summary>
            <typeparam name="T">
            Type of business object to create.
            </typeparam>
            <param name="criteria">
            Criteria describing the object to create.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.DataPortal.CreateAsync``1">
            <summary>
            Starts an asynchronous data portal operation to
            create a business object.
            </summary>
            <typeparam name="T">
            Type of business object to create.
            </typeparam>
        </member>
        <member name="M:Csla.DataPortal.CreateAsync``1(System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            create a business object.
            </summary>
            <typeparam name="T">
            Type of business object to create.
            </typeparam>
            <param name="criteria">
            Criteria describing the object to create.
            </param>
        </member>
        <member name="M:Csla.DataPortal.Fetch``1(System.Object)">
            <summary>
            Called by a factory method in a business class to retrieve
            an object, which is loaded with values from the database.
            </summary>
            <typeparam name="T">Specific type of the business object.</typeparam>
            <param name="criteria">Object-specific criteria.</param>
            <returns>An object populated with values from the database.</returns>
        </member>
        <member name="M:Csla.DataPortal.Fetch``1">
            <summary>
            Called by a factory method in a business class to retrieve
            an object, which is loaded with values from the database.
            </summary>
            <typeparam name="T">Specific type of the business object.</typeparam>
            <returns>An object populated with values from the database.</returns>
        </member>
        <member name="M:Csla.DataPortal.BeginFetch``1(System.EventHandler{Csla.DataPortalResult{``0}})">
            <summary>
            Starts an asynchronous data portal operation to
            fetch a business object.
            </summary>
            <typeparam name="T">
            Type of business object to fetch.
            </typeparam>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
        </member>
        <member name="M:Csla.DataPortal.BeginFetch``1(System.EventHandler{Csla.DataPortalResult{``0}},System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            fetch a business object.
            </summary>
            <typeparam name="T">
            Type of business object to fetch.
            </typeparam>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.DataPortal.BeginFetch``1(System.Object,System.EventHandler{Csla.DataPortalResult{``0}})">
            <summary>
            Starts an asynchronous data portal operation to
            fetch a business object.
            </summary>
            <typeparam name="T">
            Type of business object to fetch.
            </typeparam>
            <param name="criteria">
            Criteria describing the object to fetch.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
        </member>
        <member name="M:Csla.DataPortal.BeginFetch``1(System.Object,System.EventHandler{Csla.DataPortalResult{``0}},System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            fetch a business object.
            </summary>
            <typeparam name="T">
            Type of business object to fetch.
            </typeparam>
            <param name="criteria">
            Criteria describing the object to fetch.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.DataPortal.FetchAsync``1">
            <summary>
            Starts an asynchronous data portal operation to
            fetch a business object.
            </summary>
            <typeparam name="T">
            Type of business object to fetch.
            </typeparam>
        </member>
        <member name="M:Csla.DataPortal.FetchAsync``1(System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            fetch a business object.
            </summary>
            <typeparam name="T">
            Type of business object to fetch.
            </typeparam>
            <param name="criteria">
            Criteria describing the object to fetch.
            </param>
        </member>
        <member name="M:Csla.DataPortal.Update``1(``0)">
            <summary>
            Called by the business object's Save() method to
            insert, update or delete an object in the database.
            </summary>
            <remarks>
            Note that this method returns a reference to the updated business object.
            If the server-side DataPortal is running remotely, this will be a new and
            different object from the original, and all object references MUST be updated
            to use this new object.
            </remarks>
            <typeparam name="T">Specific type of the business object.</typeparam>
            <param name="obj">A reference to the business object to be updated.</param>
            <returns>A reference to the updated business object.</returns>
        </member>
        <member name="M:Csla.DataPortal.BeginUpdate``1(``0,System.EventHandler{Csla.DataPortalResult{``0}})">
            <summary>
            Starts an asynchronous data portal operation to
            update a business object.
            </summary>
            <typeparam name="T">
            Type of business object to update.
            </typeparam>
            <param name="obj">
            Business object to update.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
        </member>
        <member name="M:Csla.DataPortal.BeginUpdate``1(``0,System.EventHandler{Csla.DataPortalResult{``0}},System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            update a business object.
            </summary>
            <typeparam name="T">
            Type of business object to update.
            </typeparam>
            <param name="obj">
            Business object to update.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.DataPortal.UpdateAsync``1(``0)">
            <summary>
            Starts an asynchronous data portal operation to
            update a business object.
            </summary>
            <typeparam name="T">
            Type of business object to update.
            </typeparam>
            <param name="obj">
            Business object to update.
            </param>
        </member>
        <member name="M:Csla.DataPortal.Delete``1(System.Object)">
            <summary>
            Called by a Shared (static in C#) method in the business class to cause
            immediate deletion of a specific object from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
        </member>
        <member name="M:Csla.DataPortal.BeginDelete``1(System.Object,System.EventHandler{Csla.DataPortalResult{``0}})">
            <summary>
            Starts an asynchronous data portal operation to
            delete a business object.
            </summary>
            <typeparam name="T">
            Type of business object to delete.
            </typeparam>
            <param name="criteria">
            Criteria describing the object to delete.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
        </member>
        <member name="M:Csla.DataPortal.BeginDelete``1(System.Object,System.EventHandler{Csla.DataPortalResult{``0}},System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            delete a business object.
            </summary>
            <typeparam name="T">
            Type of business object to delete.
            </typeparam>
            <param name="criteria">
            Criteria describing the object to delete.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.DataPortal.DeleteAsync``1(System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            delete a business object.
            </summary>
            <typeparam name="T">
            Type of business object to delete.
            </typeparam>
            <param name="criteria">
            Criteria describing the object to delete.
            </param>
        </member>
        <member name="M:Csla.DataPortal.Execute``1(``0)">
            <summary>
            Called to execute a Command object on the server.
            </summary>
            <remarks>
            <para>
            To be a Command object, the object must inherit from
            CommandBase.
            </para><para>
            Note that this method returns a reference to the updated business object.
            If the server-side DataPortal is running remotely, this will be a new and
            different object from the original, and all object references MUST be updated
            to use this new object.
            </para><para>
            On the server, the Command object's DataPortal_Execute() method will
            be invoked and on an ObjectFactory the Execute method will be invoked. 
            Write any server-side code in that method. 
            </para>
            </remarks>
            <typeparam name="T">Specific type of the Command object.</typeparam>
            <param name="obj">A reference to the Command object to be executed.</param>
            <returns>A reference to the updated Command object.</returns>
        </member>
        <member name="M:Csla.DataPortal.BeginExecute``1(``0,System.EventHandler{Csla.DataPortalResult{``0}})">
            <summary>
            Starts an asynchronous data portal operation to
            execute a command object.
            </summary>
            <typeparam name="T">
            Type of object to execute.
            </typeparam>
            <param name="obj">
            Reference to the object to execute.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
        </member>
        <member name="M:Csla.DataPortal.BeginExecute``1(``0,System.EventHandler{Csla.DataPortalResult{``0}},System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            execute a command object.
            </summary>
            <typeparam name="T">
            Type of object to execute.
            </typeparam>
            <param name="obj">
            Reference to the object to execute.
            </param>
            <param name="callback">
            Reference to method that will handle the 
            asynchronous callback when the operation
            is complete.
            </param>
            <param name="userState">User state object.</param>
        </member>
        <member name="M:Csla.DataPortal.ExecuteAsync``1(``0)">
            <summary>
            Starts an asynchronous data portal operation to
            execute a command object.
            </summary>
            <typeparam name="T">
            Type of object to execute.
            </typeparam>
            <param name="command">
            Reference to the object to execute.
            </param>
        </member>
        <member name="M:Csla.DataPortal.CreateChild``1">
            <summary>
            Creates and initializes a new
            child business object.
            </summary>
            <typeparam name="T">
            Type of business object to create.
            </typeparam>
        </member>
        <member name="M:Csla.DataPortal.CreateChild``1(System.Object[])">
            <summary>
            Creates and initializes a new
            child business object.
            </summary>
            <typeparam name="T">
            Type of business object to create.
            </typeparam>
            <param name="parameters">
            Parameters passed to child create method.
            </param>
        </member>
        <member name="M:Csla.DataPortal.FetchChild``1">
            <summary>
            Creates and loads an existing
            child business object.
            </summary>
            <typeparam name="T">
            Type of business object to retrieve.
            </typeparam>
        </member>
        <member name="M:Csla.DataPortal.FetchChild``1(System.Object[])">
            <summary>
            Creates and loads an existing
            child business object.
            </summary>
            <typeparam name="T">
            Type of business object to retrieve.
            </typeparam>
            <param name="parameters">
            Parameters passed to child fetch method.
            </param>
        </member>
        <member name="M:Csla.DataPortal.UpdateChild(System.Object)">
            <summary>
            Inserts, updates or deletes an existing
            child business object.
            </summary>
            <param name="child">
            Business object to update.
            </param>
        </member>
        <member name="M:Csla.DataPortal.UpdateChild(System.Object,System.Object[])">
            <summary>
            Inserts, updates or deletes an existing
            child business object.
            </summary>
            <param name="child">
            Business object to update.
            </param>
            <param name="parameters">
            Parameters passed to child update method.
            </param>
        </member>
        <member name="M:Csla.DataPortal.LoadDataPortalProxyFactory">
            <summary>
            Loads the data portal factory.
            </summary>
        </member>
        <member name="M:Csla.DataPortal.ResetProxyFactory">
            <summary>
            Resets the data portal proxy type, so the
            next data portal call will reload the proxy
            type based on current configuration values.
            </summary>
        </member>
        <member name="M:Csla.DataPortal.ResetProxyType">
            <summary>
            Resets the data portal proxy type, so the
            next data portal call will reload the proxy
            type based on current configuration values.
            </summary>
        </member>
        <member name="M:Csla.DataPortal.ReleaseProxy">
            <summary>
            Releases any remote data portal proxy object, so
            the next data portal call will create a new
            proxy instance.
            </summary>
        </member>
        <member name="E:Csla.DataPortal.DataPortalInitInvoke">
            <summary>
            Raised by DataPortal before it starts
            setting up to call a server-side
            DataPortal method.
            </summary>
        </member>
        <member name="E:Csla.DataPortal.DataPortalInvoke">
            <summary>
            Raised by DataPortal prior to calling the 
            requested server-side DataPortal method.
            </summary>
        </member>
        <member name="E:Csla.DataPortal.DataPortalInvokeComplete">
            <summary>
            Raised by DataPortal after the requested 
            server-side DataPortal method call is complete.
            </summary>
        </member>
        <member name="P:Csla.DataPortal.ProxyFactory">
            <summary>
            Gets or sets a reference to a ProxyFactory object
            that is used to create an instance of the data
            portal proxy object.
            </summary>
        </member>
        <member name="P:Csla.DataPortal.ProxyTypeName">
            <summary>
            Gets or sets the assembly qualified type
            name of the proxy object to be loaded
            by the data portal. "Local" is a special
            value used to indicate that the data
            portal should run in local mode.
            </summary>
            <remarks>
            Deprecated: use ApplicationContext.DataPortalProxy
            </remarks>
        </member>
        <member name="T:Csla.DataPortalClient.IDataPortalProxyFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Csla.DataPortalClient.IDataPortalProxyFactory.Create(System.Type)">
            <summary>
            Creates the DataPortalProxy to use for DataPortal call on the objectType.
            </summary>
        </member>
        <member name="M:Csla.DataPortalClient.IDataPortalProxyFactory.ResetProxyType">
            <summary>
            Resets the data portal proxy type, so the
            next data portal call will reload the proxy
            type based on current configuration values.
            </summary>
        </member>
        <member name="M:Csla.DataPortalClient.DefaultPortalProxyFactory.Create(System.Type)">
            <summary>
            Creates the DataPortalProxy to use for DataPortal call on the objectType.
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.DataPortalClient.DefaultPortalProxyFactory.ResetProxyType">
            <summary>
            Resets the data portal proxy type, so the
            next data portal call will reload the proxy
            type based on current configuration values.
            </summary>
        </member>
        <member name="T:Csla.DataPortalClient.IDataPortalProxy">
            <summary>
            Interface implemented by client-side 
            data portal proxy objects.
            </summary>
        </member>
        <member name="T:Csla.Server.IDataPortalServer">
            <summary>
            Interface implemented by server-side data portal
            components.
            </summary>
        </member>
        <member name="M:Csla.Server.IDataPortalServer.Create(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Create a new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.Server.IDataPortalServer.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.Server.IDataPortalServer.Update(System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.Server.IDataPortalServer.Delete(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Delete a business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="P:Csla.DataPortalClient.IDataPortalProxy.IsServerRemote">
            <summary>
            Get a value indicating whether this proxy will invoke
            a remote data portal server, or run the "server-side"
            data portal in the caller's process and AppDomain.
            </summary>
        </member>
        <member name="T:Csla.DataPortalClient.LocalProxy">
            <summary>
            Implements a data portal proxy to relay data portal
            calls to an application server hosted locally 
            in the client process and AppDomain.
            </summary>
        </member>
        <member name="M:Csla.DataPortalClient.LocalProxy.Create(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to create a
            new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.DataPortalClient.LocalProxy.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to load an
            existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.DataPortalClient.LocalProxy.Update(System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to update a
            business object.
            </summary>
            <param name="obj">The business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.DataPortalClient.LocalProxy.Delete(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to delete a
            business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="P:Csla.DataPortalClient.LocalProxy.IsServerRemote">
            <summary>
            Get a value indicating whether this proxy will invoke
            a remote data portal server, or run the "server-side"
            data portal in the caller's process and AppDomain.
            </summary>
        </member>
        <member name="T:Csla.DataPortalClient.PrimitiveCriteria">
            <summary>
            Class used as a wrapper for criteria based requests that use primitives
            </summary>
        </member>
        <member name="M:Csla.DataPortalClient.PrimitiveCriteria.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.DataPortalClient.PrimitiveCriteria.#ctor(System.Object)">
            <summary>
            New instance of the criteria
            </summary>
            <param name="value">Criteria value</param>
        </member>
        <member name="M:Csla.DataPortalClient.PrimitiveCriteria.GetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Method called by MobileFormatter when an object
            should serialize its data. The data should be
            serialized into the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object to contain the serialized data.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.PrimitiveCriteria.GetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Method called by MobileFormatter when an object
            should serialize its child references. The data should be
            serialized into the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object to contain the serialized data.
            </param>
            <param name="formatter">
            Reference to the formatter performing the serialization.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.PrimitiveCriteria.SetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Method called by MobileFormatter when an object
            should be deserialized. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
        </member>
        <member name="M:Csla.DataPortalClient.PrimitiveCriteria.SetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Method called by MobileFormatter when an object
            should deserialize its child references. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
            <param name="formatter">
            Reference to the formatter performing the deserialization.
            </param>
        </member>
        <member name="P:Csla.DataPortalClient.PrimitiveCriteria.Value">
            <summary>
            Criteria value
            </summary>
        </member>
        <member name="T:Csla.DataPortalClient.WcfProxy">
            <summary>
            Implements a data portal proxy to relay data portal
            calls to a remote application server by using WCF.
            </summary>
        </member>
        <member name="M:Csla.DataPortalClient.WcfProxy.#ctor">
            <summary>
            Creates an instance of the object, initializing
            it to use the DefaultUrl and DefaultBinding
            values.
            </summary>
        </member>
        <member name="M:Csla.DataPortalClient.WcfProxy.GetProxy">
            <summary>
            Gets an instance of the WcfPortalClient object
            for use in communicating with the server.
            </summary>
            <remarks>
            If both DataPortalUrl and Binding are non-null then
            those values are used to initialize the proxy, otherwise
            the proxy is initialized using values from the
            system.serviceModel element in the Silverlight
            client-side config file.
            </remarks>
        </member>
        <member name="M:Csla.DataPortalClient.WcfProxy.Create(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to create a
            new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.DataPortalClient.WcfProxy.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to load an
            existing business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.DataPortalClient.WcfProxy.Update(System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to update a
            business object.
            </summary>
            <param name="obj">The business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.DataPortalClient.WcfProxy.Delete(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Called by <see cref="T:Csla.DataPortal"/> to delete a
            business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.DataPortalClient.WcfProxy.ConvertRequest(Csla.WcfPortal.UpdateRequest)">
            <summary>
            Override this method to manipulate the message
            request data sent to the server.
            </summary>
            <param name="request">Update request data.</param>
        </member>
        <member name="M:Csla.DataPortalClient.WcfProxy.ConvertRequest(Csla.WcfPortal.CriteriaRequest)">
            <summary>
            Override this method to manipulate the message
            request data sent to the server.
            </summary>
            <param name="request">Criteria request data.</param>
        </member>
        <member name="M:Csla.DataPortalClient.WcfProxy.ConvertResponse(Csla.WcfPortal.WcfResponse)">
            <summary>
            Override this method to manipulate the message
            request data returned from the server.
            </summary>
            <param name="response">Response data.</param>
        </member>
        <member name="P:Csla.DataPortalClient.WcfProxy.DefaultBinding">
            <summary>
            Gets or sets the default binding used to initialize
            future instances of WcfProxy.
            </summary>
        </member>
        <member name="P:Csla.DataPortalClient.WcfProxy.DefaultUrl">
            <summary>
            Gets or sets the default URL address
            for the data portal server.
            </summary>
            <remarks>
            Deprecated: use ApplicationContext.DataPortalUrlString
            </remarks>
        </member>
        <member name="P:Csla.DataPortalClient.WcfProxy.DefaultEndPoint">
            <summary>
            Gets or sets the default WCF endpoint
            name for the data portal server.
            </summary>
        </member>
        <member name="P:Csla.DataPortalClient.WcfProxy.IsServerRemote">
            <summary>
            Gets a value indicating whether the data portal
            is hosted on a remote server.
            </summary>
        </member>
        <member name="P:Csla.DataPortalClient.WcfProxy.Binding">
            <summary>
            Gets the binding object used by this proxy instance.
            </summary>
        </member>
        <member name="P:Csla.DataPortalClient.WcfProxy.DataPortalUrl">
            <summary>
            Gets the URL address for the data portal server
            used by this proxy instance.
            </summary>
        </member>
        <member name="P:Csla.DataPortalClient.WcfProxy.EndPoint">
            <summary>
            Gets the WCF endpoint name for the data portal
            server used by this proxy instance.
            </summary>
        </member>
        <member name="T:Csla.DataPortalEventArgs">
            <summary>
            Provides information about the DataPortal 
            call.
            </summary>
        </member>
        <member name="M:Csla.DataPortalEventArgs.#ctor(Csla.Server.DataPortalContext,System.Type,System.Object,Csla.DataPortalOperations)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="dataPortalContext">
            Data portal context object.
            </param>
            <param name="objectType">
            Business object type.
            </param>
            <param name="obj">
            Criteria or business object for request.
            </param>
            <param name="operation">
            Data portal operation being performed.
            </param>
        </member>
        <member name="M:Csla.DataPortalEventArgs.#ctor(Csla.Server.DataPortalContext,System.Type,System.Object,Csla.DataPortalOperations,System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="dataPortalContext">
            Data portal context object.
            </param>
            <param name="objectType">
            Business object type.
            </param>
            <param name="obj">
            Criteria or business object for request.
            </param>
            <param name="operation">
            Data portal operation being performed.
            </param>
            <param name="exception">
            Exception encountered during processing.
            </param>
        </member>
        <member name="P:Csla.DataPortalEventArgs.DataPortalContext">
            <summary>
            The DataPortalContext object passed to the
            server-side DataPortal.
            </summary>
        </member>
        <member name="P:Csla.DataPortalEventArgs.Operation">
            <summary>
            Gets the requested data portal operation.
            </summary>
        </member>
        <member name="P:Csla.DataPortalEventArgs.Exception">
            <summary>
            Gets a reference to any exception that occurred
            during the data portal call.
            </summary>
            <remarks>
            This property will return Nothing (null in C#) if no
            exception occurred. Exceptions are returned only as part
            of a data portal complete event or method.
            </remarks>
        </member>
        <member name="P:Csla.DataPortalEventArgs.ObjectType">
            <summary>
            Gets the object type being processed by the 
            data portal.
            </summary>
        </member>
        <member name="P:Csla.DataPortalEventArgs.Object">
            <summary>
            Gets the criteria object or business object
            being processed by the data portal.
            </summary>
        </member>
        <member name="T:Csla.DataPortalException">
            <summary>
            This exception is returned for any errors occuring
            during the server-side DataPortal invocation.
            </summary>
        </member>
        <member name="M:Csla.DataPortalException.#ctor(System.String,System.Object)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Text describing the exception.</param>
            <param name="businessObject">The business object
            as it was at the time of the exception.</param>
        </member>
        <member name="M:Csla.DataPortalException.#ctor(System.String,System.Exception,System.Object)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Text describing the exception.</param>
            <param name="ex">Inner exception.</param>
            <param name="businessObject">The business object
            as it was at the time of the exception.</param>
        </member>
        <member name="M:Csla.DataPortalException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">
            Exception message.
            </param>
            <param name="ex">
            Inner exception.
            </param>
        </member>
        <member name="M:Csla.DataPortalException.#ctor(Csla.WcfPortal.WcfErrorInfo)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="info">Info about the exception.</param>
        </member>
        <member name="M:Csla.DataPortalException.ToString">
            <summary>
            Gets a string representation
            of this object.
            </summary>
        </member>
        <member name="P:Csla.DataPortalException.ErrorInfo">
            <summary>
            Gets information about the original
            server-side exception. That exception
            is not an exception on the client side,
            but this property returns information
            about the exception.
            </summary>
        </member>
        <member name="P:Csla.DataPortalException.BusinessObject">
            <summary>
            Returns a reference to the business object
            from the server-side DataPortal.
            </summary>
            <remarks>
            Remember that this object may be in an invalid
            or undefined state. This is the business object
            (and any child objects) as it existed when the
            exception occured on the server. Thus the object
            state may have been altered by the server and
            may no longer reflect data in the database.
            </remarks>
        </member>
        <member name="P:Csla.DataPortalException.BusinessException">
            <summary>
            Gets the original server-side exception.
            </summary>
            <returns>An exception object.</returns>
            <remarks>
            When an exception occurs in business code behind
            the data portal, it is wrapped in a 
            <see cref="T:Csla.Server.DataPortalException"/>, which 
            is then wrapped in a 
            <see cref="T:Csla.DataPortalException"/>. This property
            unwraps and returns the original exception 
            thrown by the business code on the server.
            </remarks>
        </member>
        <member name="P:Csla.DataPortalException.StackTrace">
            <summary>
            Get the combined stack trace from the server
            and client.
            </summary>
        </member>
        <member name="T:Csla.DataPortalResult`1">
            <summary>
            DataPortalResult defines the results of DataPortal operation.
            It contains object that was received from the server, 
            an error (if occurred) and userState - user defined information
            that was passed into data portal on initial request
            </summary>
            <typeparam name="T">Type of object that DataPortal received</typeparam>
        </member>
        <member name="M:Csla.DataPortalResult`1.#ctor(`0,System.Exception,System.Object)">
            <summary>
            Create new instance of data portal result
            </summary>
            <param name="obj">
            Object that DataPortal received as a result of current operation
            </param>
            <param name="ex">
            Error that occurred during the DataPotal call.
            This will be null if no errors occurred.
            </param>
            <param name="userState">
            User defined information
            that was passed into data portal on initial request
            </param>
        </member>
        <member name="P:Csla.DataPortalResult`1.Object">
            <summary>
            Object that DataPortal received as a result of current operation
            </summary>
        </member>
        <member name="P:Csla.DataPortalResult`1.Error">
            <summary>
            Error that occurred during the DataPotal call.
            This will be null if no errors occurred.
            </summary>
        </member>
        <member name="P:Csla.DataPortalResult`1.UserState">
            <summary>
            User defined information
            that was passed into data portal on initial request
            </summary>
        </member>
        <member name="T:Csla.Core.AsyncFactoryDelegate`1">
            <summary>
            Delegate for an asynchronous business object 
            factory method with n parameters.
            </summary>
            <typeparam name="R">
            Type of business object to be created.
            </typeparam>
            <param name="completed">
            Delegate pointer to callback method.
            </param>
        </member>
        <member name="T:Csla.Core.AsyncFactoryDelegate`2">
            <summary>
            Delegate for an asynchronous business object 
            factory method with n parameters.
            </summary>
            <typeparam name="R">
            Type of business object to be created.
            </typeparam>
            <typeparam name="T">Type of argument</typeparam>
            <param name="completed">
            Delegate pointer to callback method.
            </param>
            <param name="arg">Argument to method.</param>
        </member>
        <member name="T:Csla.Core.IPropertyInfo">
            <summary>
            Maintains metadata about a property.
            </summary>
        </member>
        <member name="M:Csla.Core.IPropertyInfo.NewFieldData(System.String)">
            <summary>
            Gets a new field data container for the property.
            </summary>
        </member>
        <member name="P:Csla.Core.IPropertyInfo.Type">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="P:Csla.Core.IPropertyInfo.FriendlyName">
            <summary>
            Gets the friendly display name
            for the property.
            </summary>
        </member>
        <member name="P:Csla.Core.IPropertyInfo.DefaultValue">
            <summary>
            Gets the default initial value for the property.
            </summary>
            <remarks>
            This value is used to initialize the property's
            value, and is returned from a property get
            if the user is not authorized to 
            read the property.
            </remarks>
        </member>
        <member name="P:Csla.Core.IPropertyInfo.RelationshipType">
            <summary>
            Gets the relationship between the declaring object
            and the object reference in the property.
            </summary>
        </member>
        <member name="P:Csla.Core.IPropertyInfo.Index">
            <summary>
            Gets or sets the index position for the managed
            field storage behind the property. FOR
            INTERNAL CSLA .NET USE ONLY.
            </summary>
        </member>
        <member name="T:Csla.Core.BusyChangedEventHandler">
            <summary>
            Delegate for handling the BusyChanged event.
            </summary>
            <param name="sender">
            Object raising the event.
            </param>
            <param name="e">
            Event arguments.
            </param>
        </member>
        <member name="T:Csla.Core.BusyChangedEventArgs">
            <summary>
            Event arguments for the BusyChanged event.
            </summary>
        </member>
        <member name="M:Csla.Core.BusyChangedEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new instance of the object.
            </summary>
            <param name="propertyName">
            Property for which the Busy value has changed.
            </param>
            <param name="busy">
            New Busy value.
            </param>
        </member>
        <member name="P:Csla.Core.BusyChangedEventArgs.Busy">
            <summary>
            New busy value.
            </summary>
        </member>
        <member name="P:Csla.Core.BusyChangedEventArgs.PropertyName">
            <summary>
            Property for which the Busy value has changed.
            </summary>
        </member>
        <member name="T:Csla.Core.ChildChangedEventArgs">
            <summary>
            Contains event data about the changed child object.
            </summary>
        </member>
        <member name="M:Csla.Core.ChildChangedEventArgs.#ctor(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="childObject">
            Reference to the child object that was changed.
            </param>
            <param name="propertyArgs">
            PropertyChangedEventArgs object or null.
            </param>
        </member>
        <member name="M:Csla.Core.ChildChangedEventArgs.#ctor(System.Object,System.ComponentModel.PropertyChangedEventArgs,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="childObject">
            Reference to the child object that was changed.
            </param>
            <param name="listArgs">
            ListChangedEventArgs object or null.
            </param>
            <param name="propertyArgs">
            PropertyChangedEventArgs object or null.
            </param>
        </member>
        <member name="P:Csla.Core.ChildChangedEventArgs.ChildObject">
            <summary>
            Gets a reference to the changed child object.
            </summary>
        </member>
        <member name="P:Csla.Core.ChildChangedEventArgs.PropertyChangedArgs">
            <summary>
            Gets the PropertyChangedEventArgs object from the
            child's PropertyChanged event, if the child is
            not a collection or list.
            </summary>
        </member>
        <member name="P:Csla.Core.ChildChangedEventArgs.CollectionChangedArgs">
            <summary>
            Gets the NotifyCollectionChangedEventArgs object from the
            child's CollectionChanged event, if the child is an
            ObservableCollection.
            </summary>
        </member>
        <member name="T:Csla.Core.ErrorEventArgs">
            <summary>
            Event arguments for an unhandled async
            exception.
            </summary>
        </member>
        <member name="M:Csla.Core.ErrorEventArgs.#ctor(System.Object,System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="originalSender">
            Reference to the original sender of the event.
            </param>
            <param name="error">
            Reference to the unhandled async exception object.
            </param>
        </member>
        <member name="P:Csla.Core.ErrorEventArgs.OriginalSender">
            <summary>
            Reference to the original sender of the event.
            </summary>
        </member>
        <member name="P:Csla.Core.ErrorEventArgs.Error">
            <summary>
            Reference to the unhandled async exception object.
            </summary>
        </member>
        <member name="T:Csla.Core.FieldManager.PropertyInfoList">
            <summary>
            List of IPropertyInfo objects for a business object type.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.PropertyInfoList.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Core.FieldManager.PropertyInfoList.#ctor(System.Collections.Generic.IList{Csla.Core.IPropertyInfo})">
            <summary>
            Creates an instance of the object that
            contains the items in 'list'.
            </summary>
            <param name="list">Source list.</param>
        </member>
        <member name="T:Csla.DataPortal`1">
            <summary>
            Client side data portal used for making asynchronous
            data portal calls in .NET.
            </summary>
            <typeparam name="T">
            Type of business object.
            </typeparam>
        </member>
        <member name="T:Csla.IDataPortal`1">
            <summary>
            Interface defining the members of the data portal type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Csla.IDataPortal`1.CreateAsync">
            <summary>
            Starts an asynchronous data portal operation to
            create a business object.
            </summary>
        </member>
        <member name="M:Csla.IDataPortal`1.CreateAsync(System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            create a business object.
            </summary>
            <param name="criteria">
            Criteria describing the object to create.
            </param>
        </member>
        <member name="M:Csla.IDataPortal`1.FetchAsync">
            <summary>
            Starts an asynchronous data portal operation to
            create a business object.
            </summary>
        </member>
        <member name="M:Csla.IDataPortal`1.FetchAsync(System.Object)">
            <summary>
            Starts an asynchronous data portal operation to
            create a business object.
            </summary>
            <param name="criteria">
            Criteria describing the object to create.
            </param>
        </member>
        <member name="M:Csla.IDataPortal`1.UpdateAsync(`0)">
            <summary>
            Called by a factory method in a business class or
            by the UI to update an object.
            </summary>
            <param name="obj">Object to update.</param>
        </member>
        <member name="M:Csla.IDataPortal`1.ExecuteAsync(`0)">
            <summary>
            Called by a factory method in a business class or
            by the UI to execute a command object.
            </summary>
            <param name="command">Command object to execute.</param>
        </member>
        <member name="M:Csla.IDataPortal`1.DeleteAsync(System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to delete an object.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
        </member>
        <member name="M:Csla.IDataPortal`1.BeginCreate">
            <summary>
            Called by a factory method in a business class or
            by the UI to create a new object, which is loaded 
            with default values from the database.
            </summary>
        </member>
        <member name="M:Csla.IDataPortal`1.BeginCreate(System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to create a new object, which is loaded 
            with default values from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
        </member>
        <member name="M:Csla.IDataPortal`1.BeginCreate(System.Object,System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to create a new object, which is loaded 
            with default values from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
            <param name="userState">User state data.</param>
        </member>
        <member name="M:Csla.IDataPortal`1.BeginFetch">
            <summary>
            Called by a factory method in a business class or
            by the UI to retrieve an existing object, which is loaded 
            with values from the database.
            </summary>
        </member>
        <member name="M:Csla.IDataPortal`1.BeginFetch(System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to retrieve an existing object, which is loaded 
            with values from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
        </member>
        <member name="M:Csla.IDataPortal`1.BeginFetch(System.Object,System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to retrieve an existing object, which is loaded 
            with values from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
            <param name="userState">User state data.</param>
        </member>
        <member name="M:Csla.IDataPortal`1.BeginUpdate(`0)">
            <summary>
            Called by a factory method in a business class or
            by the UI to update an object.
            </summary>
            <param name="obj">Object to update.</param>
        </member>
        <member name="M:Csla.IDataPortal`1.BeginUpdate(`0,System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to update an object.
            </summary>
            <param name="obj">Object to update.</param>
            <param name="userState">User state data.</param>
        </member>
        <member name="M:Csla.IDataPortal`1.BeginDelete(System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to delete an object.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
        </member>
        <member name="M:Csla.IDataPortal`1.BeginDelete(System.Object,System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to delete an object.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
            <param name="userState">User state data.</param>
        </member>
        <member name="M:Csla.IDataPortal`1.BeginExecute(`0)">
            <summary>
            Called by a factory method in a business class or
            by the UI to execute a command object.
            </summary>
            <param name="command">Command object to execute.</param>
        </member>
        <member name="M:Csla.IDataPortal`1.BeginExecute(`0,System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to execute a command object.
            </summary>
            <param name="command">Command object to execute.</param>
            <param name="userState">User state data.</param>
        </member>
        <member name="P:Csla.IDataPortal`1.GlobalContext">
            <summary>
            Gets a reference to the global context returned from
            the background thread and/or server.
            </summary>
        </member>
        <member name="E:Csla.IDataPortal`1.CreateCompleted">
            <summary>
            Event raised when the operation has completed.
            </summary>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="E:Csla.IDataPortal`1.FetchCompleted">
            <summary>
            Event raised when the operation has completed.
            </summary>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="E:Csla.IDataPortal`1.UpdateCompleted">
            <summary>
            Event raised when the operation has completed.
            </summary>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="E:Csla.IDataPortal`1.DeleteCompleted">
            <summary>
            Event raised when the operation has completed.
            </summary>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="E:Csla.IDataPortal`1.ExecuteCompleted">
            <summary>
            Event indicating an execute operation is complete.
            </summary>
        </member>
        <member name="M:Csla.DataPortal`1.Create">
            <summary>
            Called by a factory method in a business class to create 
            a new object, which is loaded with default
            values from the database.
            </summary>
            <returns>A new object, populated with default values.</returns>
        </member>
        <member name="M:Csla.DataPortal`1.Create(System.Object)">
            <summary>
            Called by a factory method in a business class to create 
            a new object, which is loaded with default
            values from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
            <returns>A new object, populated with default values.</returns>
        </member>
        <member name="M:Csla.DataPortal`1.CreateAsync">
            <summary>
            Called by a factory method in a business class or
            by the UI to create a new object, which is loaded 
            with default values from the database.
            </summary>
        </member>
        <member name="M:Csla.DataPortal`1.CreateAsync(System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to create a new object, which is loaded 
            with default values from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
        </member>
        <member name="M:Csla.DataPortal`1.OnCreateCompleted(Csla.DataPortalResult{`0})">
            <summary>
            Raises the event.
            </summary>
            <param name="e">
            The parameter provided to the event handler.
            </param>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.DataPortal`1.BeginCreate">
            <summary>
            Called by a factory method in a business class or
            by the UI to create a new object, which is loaded 
            with default values from the database.
            </summary>
        </member>
        <member name="M:Csla.DataPortal`1.BeginCreate(System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to create a new object, which is loaded 
            with default values from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
        </member>
        <member name="M:Csla.DataPortal`1.BeginCreate(System.Object,System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to create a new object, which is loaded 
            with default values from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
            <param name="userState">User state data.</param>
        </member>
        <member name="M:Csla.DataPortal`1.OnFetchCompleted(Csla.DataPortalResult{`0})">
            <summary>
            Raises the event.
            </summary>
            <param name="e">
            The parameter provided to the event handler.
            </param>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.DataPortal`1.Fetch">
            <summary>
            Called by a factory method in a business class to Fetch 
            a new object, which is loaded with default
            values from the database.
            </summary>
            <returns>A new object, populated with default values.</returns>
        </member>
        <member name="M:Csla.DataPortal`1.Fetch(System.Object)">
            <summary>
            Called by a factory method in a business class to Fetch 
            a new object, which is loaded with default
            values from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
            <returns>A new object, populated with default values.</returns>
        </member>
        <member name="M:Csla.DataPortal`1.FetchAsync">
            <summary>
            Called by a factory method in a business class or
            by the UI to Fetch a new object, which is loaded 
            with default values from the database.
            </summary>
        </member>
        <member name="M:Csla.DataPortal`1.FetchAsync(System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to Fetch a new object, which is loaded 
            with default values from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
        </member>
        <member name="M:Csla.DataPortal`1.BeginFetch">
            <summary>
            Called by a factory method in a business class or
            by the UI to Fetch a new object, which is loaded 
            with default values from the database.
            </summary>
        </member>
        <member name="M:Csla.DataPortal`1.BeginFetch(System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to Fetch a new object, which is loaded 
            with default values from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
        </member>
        <member name="M:Csla.DataPortal`1.BeginFetch(System.Object,System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to Fetch a new object, which is loaded 
            with default values from the database.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
            <param name="userState">User state data.</param>
        </member>
        <member name="M:Csla.DataPortal`1.OnUpdateCompleted(Csla.DataPortalResult{`0})">
            <summary>
            Raises the event.
            </summary>
            <param name="e">
            The parameter provided to the event handler.
            </param>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.DataPortal`1.Update(`0)">
            <summary>
            Called by a factory method in a business class or
            by the UI to update an object.
            </summary>
            <param name="obj">Object to update.</param>
        </member>
        <member name="M:Csla.DataPortal`1.BeginUpdate(`0)">
            <summary>
            Called by a factory method in a business class or
            by the UI to update an object.
            </summary>
            <param name="obj">Object to update.</param>
        </member>
        <member name="M:Csla.DataPortal`1.BeginUpdate(`0,System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to update an object.
            </summary>
            <param name="obj">Object to update.</param>
            <param name="userState">User state data.</param>
        </member>
        <member name="M:Csla.DataPortal`1.UpdateAsync(`0)">
            <summary>
            Called by a factory method in a business class or
            by the UI to update an object.
            </summary>
            <param name="obj">Object to update.</param>
        </member>
        <member name="M:Csla.DataPortal`1.OnDeleteCompleted(Csla.DataPortalResult{`0})">
            <summary>
            Raises the event.
            </summary>
            <param name="e">
            The parameter provided to the event handler.
            </param>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="M:Csla.DataPortal`1.Delete(System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to delete an object.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
        </member>
        <member name="M:Csla.DataPortal`1.BeginDelete(System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to delete an object.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
        </member>
        <member name="M:Csla.DataPortal`1.BeginDelete(System.Object,System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to delete an object.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
            <param name="userState">User state data.</param>
        </member>
        <member name="M:Csla.DataPortal`1.DeleteAsync(System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to delete an object.
            </summary>
            <param name="criteria">Object-specific criteria.</param>
        </member>
        <member name="M:Csla.DataPortal`1.OnExecuteCompleted(Csla.DataPortalResult{`0})">
            <summary>
            Raises the ExecuteCompleted event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Csla.DataPortal`1.Execute(`0)">
            <summary>
            Called by a factory method in a business class or
            by the UI to execute a command object.
            </summary>
            <param name="command">Command object to execute.</param>
        </member>
        <member name="M:Csla.DataPortal`1.BeginExecute(`0)">
            <summary>
            Called by a factory method in a business class or
            by the UI to execute a command object.
            </summary>
            <param name="command">Command object to execute.</param>
        </member>
        <member name="M:Csla.DataPortal`1.BeginExecute(`0,System.Object)">
            <summary>
            Called by a factory method in a business class or
            by the UI to execute a command object.
            </summary>
            <param name="command">Command object to execute.</param>
            <param name="userState">User state data.</param>
        </member>
        <member name="M:Csla.DataPortal`1.ExecuteAsync(`0)">
            <summary>
            Called by a factory method in a business class or
            by the UI to execute a command object.
            </summary>
            <param name="command">Command object to execute.</param>
        </member>
        <member name="P:Csla.DataPortal`1.GlobalContext">
            <summary>
            Gets a reference to the global context returned from
            the background thread and/or server.
            </summary>
        </member>
        <member name="E:Csla.DataPortal`1.CreateCompleted">
            <summary>
            Event raised when the operation has completed.
            </summary>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="E:Csla.DataPortal`1.FetchCompleted">
            <summary>
            Event raised when the operation has completed.
            </summary>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="E:Csla.DataPortal`1.UpdateCompleted">
            <summary>
            Event raised when the operation has completed.
            </summary>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="E:Csla.DataPortal`1.DeleteCompleted">
            <summary>
            Event raised when the operation has completed.
            </summary>
            <remarks>
            <para>
            If your application is running in WPF, this event
            will be raised on the UI thread automatically.
            </para><para>
            If your application is running in Windows Forms,
            this event will be raised on a background thread.
            If you also set DataPortal.SynchronizationObject
            to a Windows Forms form or control, then the event
            will be raised on the UI thread automatically.
            </para><para>
            In any other environment (such as ASP.NET), this
            event will be raised on a background thread.
            </para>
            </remarks>
        </member>
        <member name="E:Csla.DataPortal`1.ExecuteCompleted">
            <summary>
            Event indicating an execute operation is complete.
            </summary>
        </member>
        <member name="T:Csla.Data.ServiceClientManager`2">
            <summary>
            Provides an automated way to reuse 
            a service client proxy objects within 
            the context of a single data portal operation.
            </summary>
            <typeparam name="C">
            Type of ClientBase object to use.
            </typeparam>
            <typeparam name="T">
            Channel type for the ClientBase object.
            </typeparam>
        </member>
        <member name="M:Csla.Data.ServiceClientManager`2.GetManager(System.String)">
            <summary>
            Gets the client proxy object for the
            specified name.
            </summary>
            <param name="name">Unique name for the proxy object.</param>
            <returns></returns>
        </member>
        <member name="P:Csla.Data.ServiceClientManager`2.Client">
            <summary>
            Gets a reference to the current client proxy object.
            </summary>
        </member>
        <member name="T:Csla.Core.LoadManager.AsyncLoader`1">
            <summary>
            Wraps async loading by static factory method or DataPortal.BeginXYZ methods
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Csla.Core.MobileDictionary`2">
            <summary>
            Defines a dictionary that can be serialized through
            the MobileFormatter.
            </summary>
            <typeparam name="K">Key value: any primitive or IMobileObject type.</typeparam>
            <typeparam name="V">Value: any primitive or IMobileObject type.</typeparam>
        </member>
        <member name="M:Csla.Core.MobileDictionary`2.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Core.MobileDictionary`2.#ctor(System.Int32)">
            <summary>
            Creates an instance of the object based
            on the supplied dictionary, whose elements
            are copied to the new dictionary.
            </summary>
            <param name="capacity">The initial number of elements 
            the dictionary can contain.</param>
        </member>
        <member name="M:Csla.Core.MobileDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Creates an instance of the object based
            on the supplied dictionary, whose elements
            are copied to the new dictionary.
            </summary>
            <param name="comparer">The comparer to use when
            comparing keys.</param>
        </member>
        <member name="M:Csla.Core.MobileDictionary`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Creates an instance of the object based
            on the supplied dictionary, whose elements
            are copied to the new dictionary.
            </summary>
            <param name="dict">Source dictionary.</param>
        </member>
        <member name="T:Csla.Core.MobileList`1">
            <summary>
            Implements a list that is serializable using
            the MobileFormatter.
            </summary>
            <typeparam name="T">
            Type of object contained in the list.
            </typeparam>
        </member>
        <member name="M:Csla.Core.MobileList`1.#ctor">
            <summary>
            Creates an instance of the type.
            </summary>
        </member>
        <member name="M:Csla.Core.MobileList`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of the type.
            </summary>
            <param name="capacity">Capacity of the list.</param>
        </member>
        <member name="M:Csla.Core.MobileList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates an instance of the type.
            </summary>
            <param name="collection">Data to add to list.</param>
        </member>
        <member name="M:Csla.Core.MobileList`1.OnGetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to add extra field values to
            the serialization stream.
            </summary>
            <param name="info">Object containing field values.</param>
        </member>
        <member name="M:Csla.Core.MobileList`1.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to manually serialize child objects
            contained within the current object.
            </summary>
            <param name="info">Object containing serialized values.</param>
            <param name="formatter">Reference to the current MobileFormatter.</param>
        </member>
        <member name="M:Csla.Core.MobileList`1.OnSetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to retrieve extra field values to
            the serialization stream.
            </summary>
            <param name="info">Object containing field values.</param>
        </member>
        <member name="M:Csla.Core.MobileList`1.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to manually deserialize child objects
            from data in the serialization stream.
            </summary>
            <param name="info">Object containing serialized values.</param>
            <param name="formatter">Reference to the current MobileFormatter.</param>
        </member>
        <member name="T:Csla.Core.StateMode">
            <summary>
            Indicates the reason the MobileFormatter
            functionality has been invoked.
            </summary>
        </member>
        <member name="F:Csla.Core.StateMode.Serialization">
            <summary>
            The object is being serialized for
            a clone or data portal operation.
            </summary>
        </member>
        <member name="F:Csla.Core.StateMode.Undo">
            <summary>
            The object is being serialized for
            an n-level undo operation.
            </summary>
        </member>
        <member name="T:Csla.CriteriaBase`1">
            <summary>
            Base type from which Criteria classes can be
            derived in a business class. 
            </summary>
        </member>
        <member name="M:Csla.CriteriaBase`1.#ctor">
            <summary>
            Creates an instance of the object. For use by
            MobileFormatter only - you must provide a 
            Type parameter in your code.
            </summary>
        </member>
        <member name="M:Csla.CriteriaBase`1.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Method called by MobileFormatter when an object
            should be deserialized. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
            <param name="mode">Serialization mode.</param>
        </member>
        <member name="M:Csla.CriteriaBase`1.RegisterProperty``1(Csla.PropertyInfo{``0})">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">
            Type of property.
            </typeparam>
            <param name="info">
            PropertyInfo object for the property.
            </param>
            <returns>
            The provided IPropertyInfo object.
            </returns>
        </member>
        <member name="M:Csla.CriteriaBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <returns></returns>
        </member>
        <member name="M:Csla.CriteriaBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Csla.RelationshipTypes)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="relationship">Relationship with
            referenced object.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.CriteriaBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <returns></returns>
        </member>
        <member name="M:Csla.CriteriaBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,Csla.RelationshipTypes)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <param name="relationship">Relationship with
            referenced object.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.CriteriaBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,``0)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <param name="defaultValue">Default Value for the property</param>
            <returns></returns>
        </member>
        <member name="M:Csla.CriteriaBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,``0,Csla.RelationshipTypes)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <param name="defaultValue">Default Value for the property</param>
            <param name="relationship">Relationship with
            referenced object.</param>
            <returns></returns>
        </member>
        <member name="T:Csla.IReadOnlyBase">
            <summary>
            This is a base class from which readonly business classes
            can be derived.
            </summary>
        </member>
        <member name="T:Csla.LazySingleton`1">
            <summary>
            An alternative to Lazy&lt;T&gt; that works on .NET, Silverlight and Windows Phone
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Csla.LazySingleton`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Csla.LazySingleton`1"/> class.
            Will use the default public constructor to create an instance of T (the vlaue)
            </summary>
        </member>
        <member name="M:Csla.LazySingleton`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Csla.LazySingleton`1"/> class.
            Will call the supplied delegate to create an instance of T (the value)
            </summary>
            <param name="delegate">The @delegate.</param>
        </member>
        <member name="P:Csla.LazySingleton`1.IsValueCreated">
            <summary>
            Gets a value indicating whether this instance is initilized and contains a value.
            </summary>
            <value>
            	<c>true</c> if this instance is value created; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Csla.LazySingleton`1.Value">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:Csla.MethodInfo">
            <summary>
            Maintains metadata about a method.
            </summary>
        </member>
        <member name="M:Csla.MethodInfo.#ctor(System.String)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="name">Name of the method.</param>
        </member>
        <member name="M:Csla.MethodInfo.Equals(System.Object)">
            <summary>
            Determines the equality of two objects.
            </summary>
            <param name="obj">Object to compare.</param>
        </member>
        <member name="M:Csla.MethodInfo.GetHashCode">
            <summary>
            Gets the hash code of this object.
            </summary>
        </member>
        <member name="P:Csla.MethodInfo.Name">
            <summary>
            Gets the member name value.
            </summary>
        </member>
        <member name="T:Csla.Rules.AuthorizationActions">
            <summary>
            Authorization actions.
            </summary>
        </member>
        <member name="F:Csla.Rules.AuthorizationActions.WriteProperty">
            <summary>
            Request to write or set a property value.
            </summary>
        </member>
        <member name="F:Csla.Rules.AuthorizationActions.ReadProperty">
            <summary>
            Request to read a property value.
            </summary>
        </member>
        <member name="F:Csla.Rules.AuthorizationActions.ExecuteMethod">
            <summary>
            Request to execute a method.
            </summary>
        </member>
        <member name="F:Csla.Rules.AuthorizationActions.CreateObject">
            <summary>
            Request to create an object.
            </summary>
        </member>
        <member name="F:Csla.Rules.AuthorizationActions.GetObject">
            <summary>
            Request to get or fetch an object.
            </summary>
        </member>
        <member name="F:Csla.Rules.AuthorizationActions.EditObject">
            <summary>
            Request to save or edit an object.
            </summary>
        </member>
        <member name="F:Csla.Rules.AuthorizationActions.DeleteObject">
            <summary>
            Request to delete an object.
            </summary>
        </member>
        <member name="T:Csla.Rules.AuthorizationContext">
            <summary>
            Context information provided to an authorization
            rule when it is invoked.
            </summary>
        </member>
        <member name="M:Csla.Rules.AuthorizationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Csla.Rules.AuthorizationContext"/> class.
            </summary>
        </member>
        <member name="M:Csla.Rules.AuthorizationContext.#ctor(Csla.Rules.IAuthorizationRule,System.Object,System.Type)">
            <summary>
            Creates a AuthorizationContext instance for unit testing.
            </summary>
            <param name="rule">The rule.</param>
            <param name="target">The target.</param>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="P:Csla.Rules.AuthorizationContext.Rule">
            <summary>
            Gets the rule object.
            </summary>
        </member>
        <member name="P:Csla.Rules.AuthorizationContext.Target">
            <summary>
            Gets a reference to the target business object.
            </summary>
        </member>
        <member name="P:Csla.Rules.AuthorizationContext.TargetType">
            <summary>
            Gets the type of the target business class.
            </summary>
        </member>
        <member name="P:Csla.Rules.AuthorizationContext.HasPermission">
            <summary>
            Gets or sets a value indicating whether the
            current user has permission to perform the requested
            action.
            </summary>
        </member>
        <member name="T:Csla.Rules.AuthorizationRule">
            <summary>
            Base class providing basic authorization rule
            implementation.
            </summary>
        </member>
        <member name="T:Csla.Rules.IAuthorizationRule">
            <summary>
            Interface defining an authorization
            rule implementation.
            </summary>
        </member>
        <member name="M:Csla.Rules.IAuthorizationRule.Execute(Csla.Rules.AuthorizationContext)">
            <summary>
            Authorization rule implementation.
            </summary>
            <param name="context">Rule context object.</param>
        </member>
        <member name="P:Csla.Rules.IAuthorizationRule.Element">
            <summary>
            Gets the element (property/method)
            to which this rule is associated.
            </summary>
        </member>
        <member name="P:Csla.Rules.IAuthorizationRule.Action">
            <summary>
            Gets the authorization action this rule
            will enforce.
            </summary>
        </member>
        <member name="P:Csla.Rules.IAuthorizationRule.CacheResult">
            <summary>
            Gets a value indicating whether the results
            of this rule can be cached at the business
            object level.
            </summary>
        </member>
        <member name="M:Csla.Rules.AuthorizationRule.#ctor(Csla.Rules.AuthorizationActions)">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="action">Action this rule will enforce.</param>
        </member>
        <member name="M:Csla.Rules.AuthorizationRule.#ctor(Csla.Rules.AuthorizationActions,Csla.Core.IMemberInfo)">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="action">Action this rule will enforce.</param>
            <param name="element">Method or property.</param>
        </member>
        <member name="M:Csla.Rules.AuthorizationRule.Execute(Csla.Rules.AuthorizationContext)">
            <summary>
            Authorization rule implementation.
            </summary>
            <param name="context">Rule context object.</param>
        </member>
        <member name="M:Csla.Rules.AuthorizationRule.ReadProperty(System.Object,Csla.Core.IPropertyInfo)">
            <summary>
            Reads a property's field value.
            </summary>
            <param name="obj">
            Object on which to call the method. 
            </param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            No authorization checks occur when this method is called.
            </remarks>
        </member>
        <member name="P:Csla.Rules.AuthorizationRule.CacheResult">
            <summary>
            Gets a value indicating whether the results
            of this rule can be cached at the business
            object level.
            </summary>
            <returns>bool, true by default to allow cache result.</returns>
        </member>
        <member name="P:Csla.Rules.AuthorizationRule.Element">
            <summary>
            Gets the name of the element (property/method)
            to which this rule is associated.
            </summary>
        </member>
        <member name="P:Csla.Rules.AuthorizationRule.Action">
            <summary>
            Gets the authorization action this rule
            will enforce.
            </summary>
        </member>
        <member name="P:Csla.Rules.AuthorizationRule.Csla#Rules#IAuthorizationRule#Action">
            <summary>
            Gets the authorization action this rule
            will enforce.
            </summary>
        </member>
        <member name="T:Csla.Rules.AuthorizationRuleManager">
            <summary>
            Manages the list of authorization 
            rules for a business type.
            </summary>
        </member>
        <member name="P:Csla.Rules.AuthorizationRuleManager.Rules">
            <summary>
            Gets the list of rule objects for the business type.
            </summary>
        </member>
        <member name="P:Csla.Rules.AuthorizationRuleManager.Initialized">
            <summary>
            Gets or sets a value indicating whether the rules have been
            initialized.
            </summary>
        </member>
        <member name="P:Csla.Rules.AuthorizationRuleManager.InitializedPerType">
            <summary>
            Gets or sets a value indicating whether the rules have been
            initialized.
            </summary>
        </member>
        <member name="T:Csla.Rules.CommonRules.IsInRole">
            <summary>
            IsInRole authorization rule.
            </summary>
        </member>
        <member name="M:Csla.Rules.CommonRules.IsInRole.#ctor(Csla.Rules.AuthorizationActions,System.Collections.Generic.List{System.String})">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="action">Action this rule will enforce.</param>
            <param name="roles">List of allowed roles.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.IsInRole.#ctor(Csla.Rules.AuthorizationActions,System.String[])">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="action">Action this rule will enforce.</param>
            <param name="roles">List of allowed roles.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.IsInRole.#ctor(Csla.Rules.AuthorizationActions,Csla.Core.IMemberInfo,System.Collections.Generic.List{System.String})">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="action">Action this rule will enforce.</param>
            <param name="element">Member to be authorized.</param>
            <param name="roles">List of allowed roles.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.IsInRole.#ctor(Csla.Rules.AuthorizationActions,Csla.Core.IMemberInfo,System.String[])">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="action">Action this rule will enforce.</param>
            <param name="element">Member to be authorized.</param>
            <param name="roles">List of allowed roles.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.IsInRole.Execute(Csla.Rules.AuthorizationContext)">
            <summary>
            Rule implementation.
            </summary>
            <param name="context">Rule context.</param>
        </member>
        <member name="T:Csla.Rules.CommonRules.IsNotInRole">
            <summary>
            IsNotInRole authorization rule.
            </summary>
        </member>
        <member name="M:Csla.Rules.CommonRules.IsNotInRole.#ctor(Csla.Rules.AuthorizationActions,System.Collections.Generic.List{System.String})">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="action">Action this rule will enforce.</param>
            <param name="roles">List of disallowed roles.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.IsNotInRole.#ctor(Csla.Rules.AuthorizationActions,System.String[])">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="action">Action this rule will enforce.</param>
            <param name="roles">List of disallowed roles.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.IsNotInRole.#ctor(Csla.Rules.AuthorizationActions,Csla.Core.IMemberInfo,System.Collections.Generic.List{System.String})">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="action">Action this rule will enforce.</param>
            <param name="element">Member to be authorized.</param>
            <param name="roles">List of disallowed roles.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.IsNotInRole.#ctor(Csla.Rules.AuthorizationActions,Csla.Core.IMemberInfo,System.String[])">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="action">Action this rule will enforce.</param>
            <param name="element">Member to be authorized.</param>
            <param name="roles">List of disallowed roles.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.IsNotInRole.Execute(Csla.Rules.AuthorizationContext)">
            <summary>
            Rule implementation.
            </summary>
            <param name="context">Rule context.</param>
        </member>
        <member name="T:Csla.Rules.BrokenRule">
            <summary>
            Stores details about a specific broken business rule.
            </summary>
        </member>
        <member name="M:Csla.Rules.BrokenRule.#ctor">
            <summary>
            Creates an instance of this object.
            </summary>
        </member>
        <member name="M:Csla.Rules.BrokenRule.ToString">
            <summary>
            Gets a string representation for this object.
            </summary>
        </member>
        <member name="M:Csla.Rules.BrokenRule.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.Rules.BrokenRule.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="P:Csla.Rules.BrokenRule.RuleName">
            <summary>
            Provides access to the name of the broken rule.
            </summary>
            <value>The name of the rule.</value>
        </member>
        <member name="P:Csla.Rules.BrokenRule.Description">
            <summary>
            Provides access to the description of the broken rule.
            </summary>
            <value>The description of the rule.</value>
        </member>
        <member name="P:Csla.Rules.BrokenRule.Property">
            <summary>
            Provides access to the property affected by the broken rule.
            </summary>
            <value>The property affected by the rule.</value>
        </member>
        <member name="P:Csla.Rules.BrokenRule.Severity">
            <summary>
            Gets the severity of the broken rule.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Csla.Rules.BrokenRule.OriginProperty">
            <summary>
            Gets or sets the origin property.
            </summary>
            <value>The origin property.</value>
        </member>
        <member name="T:Csla.Rules.BrokenRulesCollection">
            <summary>
            A collection of currently broken rules.
            </summary>
            <remarks>
            This collection is readonly and can be safely made available
            to code outside the business object such as the UI. This allows
            external code, such as a UI, to display the list of broken rules
            to the user.
            </remarks>
        </member>
        <member name="M:Csla.Rules.BrokenRulesCollection.#ctor">
            <summary>
            Creates a read-write instance
            of the collection.
            </summary>
        </member>
        <member name="M:Csla.Rules.BrokenRulesCollection.GetFirstBrokenRule(Csla.Core.IPropertyInfo)">
            <summary>
            Returns the first <see cref="T:Csla.Rules.BrokenRule"/> object
            corresponding to the specified property.
            </summary>
            <remarks>
            Code in a business object or UI can also use this value to retrieve
            the first broken rule in <see cref="T:Csla.Rules.BrokenRulesCollection"/> that corresponds
            to a specfic property on the object.
            </remarks>
            <param name="property">The property affected by the rule.</param>
            <returns>
            The first BrokenRule object corresponding to the specified property, or null if 
            there are no rules defined for the property.
            </returns>
        </member>
        <member name="M:Csla.Rules.BrokenRulesCollection.GetFirstBrokenRule(System.String)">
            <summary>
            Returns the first <see cref="T:Csla.Rules.BrokenRule"/> object
            corresponding to the specified property.
            </summary>
            <remarks>
            Code in a business object or UI can also use this value to retrieve
            the first broken rule in <see cref="T:Csla.Rules.BrokenRulesCollection"/> that corresponds
            to a specfic property on the object.
            </remarks>
            <param name="property">The name of the property affected by the rule.</param>
            <returns>
            The first BrokenRule object corresponding to the specified property, or null if 
            there are no rules defined for the property.
            </returns>
        </member>
        <member name="M:Csla.Rules.BrokenRulesCollection.GetFirstMessage(Csla.Core.IPropertyInfo)">
            <summary>
            Returns the first <see cref="T:Csla.Rules.BrokenRule"/> object
            corresponding to the specified property.
            </summary>
            <remarks>
            Code in a business object or UI can also use this value to retrieve
            the first broken rule in <see cref="T:Csla.Rules.BrokenRulesCollection"/> that corresponds
            to a specfic property.
            </remarks>
            <param name="property">The name of the property affected by the rule.</param>
            <returns>
            The first BrokenRule object corresponding to the specified property, or Nothing
            (null in C#) if there are no rules defined for the property.
            </returns>
        </member>
        <member name="M:Csla.Rules.BrokenRulesCollection.GetFirstMessage(Csla.Core.IPropertyInfo,Csla.Rules.RuleSeverity)">
            <summary>
            Returns the first <see cref="T:Csla.Rules.BrokenRule"/> object
            corresponding to the specified property
            and severity.
            </summary>
            <param name="property">The property affected by the rule.</param>
            <param name="severity">The severity of broken rule to return.</param>
            <returns>
            The first BrokenRule object corresponding to the specified property, or Nothing
            (null in C#) if there are no rules defined for the property.
            </returns>
        </member>
        <member name="M:Csla.Rules.BrokenRulesCollection.GetFirstMessage(System.String,Csla.Rules.RuleSeverity)">
            <summary>
            Returns the first <see cref="T:Csla.Rules.BrokenRule"/> object
            corresponding to the specified property
            and severity.
            </summary>
            <param name="property">The name of the property affected by the rule.</param>
            <param name="severity">The severity of broken rule to return.</param>
            <returns>
            The first BrokenRule object corresponding to the specified property, or Nothing
            (null in C#) if there are no rules defined for the property.
            </returns>
        </member>
        <member name="M:Csla.Rules.BrokenRulesCollection.ToString">
            <summary>
            Returns the text of all broken rule descriptions, each
            separated by a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <returns>The text of all broken rule descriptions.</returns>
        </member>
        <member name="M:Csla.Rules.BrokenRulesCollection.ToString(Csla.Rules.RuleSeverity)">
            <summary>
            Returns the text of all broken rule descriptions
            for a specific severity, each
            separated by a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="severity">The severity of rules to
            include in the result.</param>
            <returns>The text of all broken rule descriptions
            matching the specified severtiy.</returns>
        </member>
        <member name="M:Csla.Rules.BrokenRulesCollection.ToString(System.String)">
            <summary>
            Returns the text of all broken rule descriptions.
            </summary>
            <param name="separator">
            String to place between each broken rule description.
            </param>
            <returns>The text of all broken rule descriptions.</returns>
        </member>
        <member name="M:Csla.Rules.BrokenRulesCollection.ToString(System.String,Csla.Rules.RuleSeverity)">
            <summary>
            Returns the text of all broken rule descriptions
            for a specific severity.
            </summary>
            <param name="separator">
            String to place between each broken rule description.
            </param>
            <param name="severity">The severity of rules to
            include in the result.</param>
            <returns>The text of all broken rule descriptions
            matching the specified severtiy.</returns>
        </member>
        <member name="M:Csla.Rules.BrokenRulesCollection.ToArray">
            <summary>
            Returns a string array containing all broken
            rule descriptions.
            </summary>
            <returns>The text of all broken rule descriptions
            matching the specified severtiy.</returns>
        </member>
        <member name="M:Csla.Rules.BrokenRulesCollection.ToArray(Csla.Rules.RuleSeverity)">
            <summary>
            Returns a string array containing all broken
            rule descriptions.
            </summary>
            <param name="severity">The severity of rules
            to include in the result.</param>
            <returns>The text of all broken rule descriptions
            matching the specified severtiy.</returns>
        </member>
        <member name="M:Csla.Rules.BrokenRulesCollection.AddRange(System.Collections.Generic.List{Csla.Rules.BrokenRule})">
            <summary>
            Merges a list of items into the collection.
            </summary>
            <param name="list">List of items to add.</param>
        </member>
        <member name="M:Csla.Rules.BrokenRulesCollection.OnGetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
        </member>
        <member name="M:Csla.Rules.BrokenRulesCollection.OnSetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
        </member>
        <member name="P:Csla.Rules.BrokenRulesCollection.ErrorCount">
            <summary>
            Gets the number of broken rules in
            the collection that have a severity
            of Error.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="P:Csla.Rules.BrokenRulesCollection.WarningCount">
            <summary>
            Gets the number of broken rules in
            the collection that have a severity
            of Warning.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="P:Csla.Rules.BrokenRulesCollection.InformationCount">
            <summary>
            Gets the number of broken rules in
            the collection that have a severity
            of Information.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="T:Csla.Rules.BrokenRulesTree">
            <summary>
            Holds a list of broken rules tree list 
            </summary>
        </member>
        <member name="T:Csla.Rules.BrokenRulesNode">
            <summary>
            Holds broken rules for an Node in the BrokenRulesTree.
            </summary>
        </member>
        <member name="P:Csla.Rules.BrokenRulesNode.Parent">
            <summary>
            Gets the parent key. Root key is null.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Csla.Rules.BrokenRulesNode.Node">
            <summary>
            Gets the node key.
            </summary>
            <value>The node.</value>
        </member>
        <member name="P:Csla.Rules.BrokenRulesNode.BrokenRules">
            <summary>
            Gets the broken rules for this node.
            </summary>
            <value>The node broken rules.</value>
        </member>
        <member name="P:Csla.Rules.BrokenRulesNode.Object">
            <summary>
            Gets the Business Object.
            </summary>
            <value>The object.</value>
        </member>
        <member name="T:Csla.Rules.BusinessRules">
            <summary>
            Tracks the business rules for a business object.
            </summary>
        </member>
        <member name="M:Csla.Rules.BusinessRules.GetRuleDescriptions">
            <summary>
            Gets a list of rule:// URI values for
            the rules defined in the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.Rules.BusinessRules.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Rules.BusinessRules.#ctor(Csla.Rules.IHostRules)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="target">Target business object.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRules.AddRule(Csla.Rules.IBusinessRule)">
            <summary>
            Associates a business rule with the business object.
            </summary>
            <param name="rule">Rule object.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRules.AddRule(Csla.Rules.IBusinessRule,System.String)">
            <summary>
            Associates a business rule with the business object.
            </summary>
            <param name="rule">Rule object.</param>
            <param name="ruleSet">Rule set name.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRules.AddRule(Csla.Rules.IAuthorizationRule)">
            <summary>
            Associates an authorization rule with the business object.
            </summary>
            <param name="rule">Rule object.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRules.AddRule(System.Type,Csla.Rules.IAuthorizationRule)">
            <summary>
            Associates a per-type authorization rule with 
            the business type in the default rule set.
            </summary>
            <param name="objectType">Type of business object.</param>
            <param name="rule">Rule object.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRules.AddRule(System.Type,Csla.Rules.IAuthorizationRule,System.String)">
            <summary>
            Associates a per-type authorization rule with 
            the business type.
            </summary>
            <param name="objectType">Type of business object.</param>
            <param name="rule">Rule object.</param>
            <param name="ruleSet">Rule set name.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRules.GetBrokenRules">
            <summary>
            Gets the broken rules list.
            </summary>
        </member>
        <member name="M:Csla.Rules.BusinessRules.GetPropertyBusy(Csla.Core.IPropertyInfo)">
            <summary>
            Gets a value indicating whether a specific
            property has any async rules running.
            </summary>
            <param name="property">Property to check.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRules.HasPermission(Csla.Rules.AuthorizationActions,System.Type)">
            <summary>
            Checks per-type authorization rules.
            </summary>
            <param name="action">Authorization action.</param>
            <param name="objectType">Type of business object.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRules.HasPermission(Csla.Rules.AuthorizationActions,System.Type,System.String)">
            <summary>
            Checks per-type authorization rules.
            </summary>
            <param name="action">Authorization action.</param>
            <param name="objectType">Type of business object.</param>
            <param name="ruleSet">The rule set.</param>
            <returns>
            	<c>true</c> if the specified action has permission; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Csla.Rules.BusinessRules.HasPermission(Csla.Rules.AuthorizationActions,System.Object)">
            <summary>
            Checks per-instance authorization rules.
            </summary>
            <param name="action">Authorization action.</param>
            <param name="obj">Business object instance.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRules.HasPermission(Csla.Rules.AuthorizationActions,System.Object,System.String)">
            <summary>
            Checks per-instance authorization rules.
            </summary>
            <param name="action">Authorization action.</param>
            <param name="obj">Business object instance.</param>
            <param name="ruleSet">The rule set.</param>
            <returns>
            	<c>true</c> if the specified action has permission; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Csla.Rules.BusinessRules.HasPermission(Csla.Rules.AuthorizationActions,Csla.Core.IMemberInfo)">
            <summary>
            Checks per-property authorization rules.
            </summary>
            <param name="action">Authorization action.</param>
            <param name="element">Property or method to check.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRules.CachePermissionResult(Csla.Rules.AuthorizationActions,Csla.Core.IMemberInfo)">
            <summary>
            Gets a value indicating whether the permission
            result can be cached.
            </summary>
            <param name="action">Authorization action.</param>
            <param name="element">Property or method to check.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRules.CheckRules">
            <summary>
            Invokes all rules for the business type.
            </summary>
            <returns>
            Returns a list of property names affected by the invoked rules.
            The PropertyChanged event should be raised for each affected
            property.
            </returns>
        </member>
        <member name="M:Csla.Rules.BusinessRules.CheckObjectRules">
            <summary>
            Invokes all rules attached at the class level
            of the business type.
            </summary>
            <returns>
            Returns a list of property names affected by the invoked rules.
            The PropertyChanged event should be raised for each affected
            property.
            </returns>
        </member>
        <member name="M:Csla.Rules.BusinessRules.CheckObjectRules(Csla.Rules.RuleContextModes,System.Boolean)">
            <summary>
            Invokes all rules attached at the class level
            of the business type.
            </summary>
            <returns>
            Returns a list of property names affected by the invoked rules.
            The PropertyChanged event should be raised for each affected
            property.
            </returns>
        </member>
        <member name="M:Csla.Rules.BusinessRules.CheckRules(Csla.Core.IPropertyInfo)">
            <summary>
            Invokes all rules for a specific property of the business type.
            </summary>
            <param name="property">Property to check.</param>
            <returns>
            Returns a list of property names affected by the invoked rules.
            The PropertyChanged event should be raised for each affected
            property.
            </returns>
            <exception cref="T:System.ArgumentNullException">If property is null</exception>
        </member>
        <member name="M:Csla.Rules.BusinessRules.CanRunRule(Csla.Rules.IBusinessRule,Csla.Rules.RuleContextModes)">
            <summary>
            Determines whether this rule can run the specified context mode.
            </summary>
            <param name="rule">The rule.</param>
            <param name="contextMode">The context mode.</param>
            <returns>
            	<c>true</c> if this instance [can run rule] the specified context mode; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Csla.Rules.BusinessRules.CheckRulesForProperty(Csla.Core.IPropertyInfo,System.Boolean,Csla.Rules.RuleContextModes)">
            <summary>
            Invokes all rules for a specific property.
            </summary>
            <param name="property">The property.</param>
            <param name="cascade">if set to <c>true</c> [cascade].</param>
            <param name="executionContext">The execute context.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Rules.BusinessRules.RunRules(System.Collections.Generic.IEnumerable{Csla.Rules.IBusinessRule},System.Boolean,Csla.Rules.RuleContextModes)">
            <summary>
            Runs the enumerable list of rules.
            </summary>
            <param name="rules">The rules.</param>
            <param name="cascade">if set to <c>true</c> cascade.</param>
            <param name="executionContext">The execution context.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Rules.BusinessRules.AddDataAnnotations">
            <summary>
            Adds validation rules corresponding to property
            data annotation attributes.
            </summary>
        </member>
        <member name="M:Csla.Rules.BusinessRules.AddDataAnnotationsFromType(System.Type)">
            <summary>
            Adds data annotation validation rules from the given type.
            </summary>
            <param name="metadataType">Type of the metadata.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRules.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.Rules.BusinessRules.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.Rules.BusinessRules.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to insert your child object
            references into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="M:Csla.Rules.BusinessRules.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to retrieve your child object
            references from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="M:Csla.Rules.BusinessRules.GetAllBrokenRules(System.Object)">
            <summary>
            Gets all nodes in tree thar have IsValid = false (and all parents) 
            </summary>
            <param name="root">The root.</param>
            <returns>BrukenRulesTree list</returns>
        </member>
        <member name="M:Csla.Rules.BusinessRules.GetAllBrokenRules(System.Object,System.Boolean)">
            <summary>
            Gets all nodes in tree that have broken rules.
            </summary>
            <param name="root">The root.</param>
            <param name="errorsOnly">if set to <c>true</c> will only return objects that gave IsValid = false.</param>
            <returns></returns>
        </member>
        <member name="P:Csla.Rules.BusinessRules.SuppressRuleChecking">
            <summary>
            Gets or sets a value indicating whether calling
            CheckRules should result in rule
            methods being invoked.
            </summary>
            <value>True to suppress all rule method invocation.</value>
        </member>
        <member name="P:Csla.Rules.BusinessRules.ProcessThroughPriority">
            <summary>
            Gets or sets the priority through which
            all rules will be processed.
            </summary>
        </member>
        <member name="P:Csla.Rules.BusinessRules.RuleSet">
            <summary>
            Gets or sets the rule set to use for this
            business object instance.
            </summary>
        </member>
        <member name="P:Csla.Rules.BusinessRules.CascadeOnDirtyProperties">
            <summary>
            Gets or sets a value indicating whether rule engine should cacade n-leves when property value is changed from OuputPropertyValues. 
            </summary>
            <value>
              <c>true</c> if [cascade when changed]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Csla.Rules.BusinessRules.IsValid">
            <summary>
            Gets a value indicating whether there are
            any currently broken rules, which would
            mean the object is not valid.
            </summary>
        </member>
        <member name="P:Csla.Rules.BusinessRules.RunningRules">
            <summary>
            Gets a value indicating whether a CheckRules
            operation is in progress.
            </summary>
        </member>
        <member name="P:Csla.Rules.BusinessRules.RunningAsyncRules">
            <summary>
            Gets a value indicating whether any async
            rules are currently executing.
            </summary>
        </member>
        <member name="T:Csla.Rules.BusinessRulesExtensions">
            <summary>
            Rule extensions for creating rules with a fluent coding style.
            </summary>
        </member>
        <member name="M:Csla.Rules.BusinessRulesExtensions.AddRule``1(Csla.Rules.BusinessRules,Csla.Core.IPropertyInfo,System.Func{``0,System.Boolean},System.String,Csla.Rules.RuleSeverity)">
            <summary>
            Adds a lambda rule with fluent coding style
            </summary>
            <typeparam name="T"></typeparam>
            <param name="businessRules">The business rules.</param>
            <param name="primaryProperty">The primary property.</param>
            <param name="ruleHandler">The rule handler.</param>
            <param name="message">The message.</param>
            <param name="severity">The rule severity.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRulesExtensions.AddRule``1(Csla.Rules.BusinessRules,Csla.Core.IPropertyInfo,System.Func{``0,System.Boolean},System.String)">
            <summary>
            Adds a lambda rule with fluent coding style
            </summary>
            <typeparam name="T"></typeparam>
            <param name="businessRules">The business rules.</param>
            <param name="primaryProperty">The primary property.</param>
            <param name="ruleHandler">The rule handler.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRulesExtensions.AddRule``1(Csla.Rules.BusinessRules,System.String,Csla.Core.IPropertyInfo,System.Func{``0,System.Boolean},System.String,Csla.Rules.RuleSeverity)">
            <summary>
            Adds a lambda rule with fluent coding style to the RuleSet
            </summary>
            <typeparam name="T"></typeparam>
            <param name="businessRules">The business rules.</param>
            <param name="ruleSet">The RuleSet.</param>
            <param name="primaryProperty">The primary property.</param>
            <param name="ruleHandler">The rule handler.</param>
            <param name="message">The message.</param>
            <param name="severity">The rule severity.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRulesExtensions.AddRule``1(Csla.Rules.BusinessRules,System.String,Csla.Core.IPropertyInfo,System.Func{``0,System.Boolean},System.String)">
            <summary>
            Adds a lambda rule with fluent coding style to the RuleSet
            </summary>
            <typeparam name="T"></typeparam>
            <param name="businessRules">The business rules.</param>
            <param name="ruleSet">The RuleSet.</param>
            <param name="primaryProperty">The primary property.</param>
            <param name="ruleHandler">The rule handler.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRulesExtensions.AddRule``1(Csla.Rules.BusinessRules,Csla.Core.IPropertyInfo,System.Func{``0,System.Boolean},System.Func{System.String},Csla.Rules.RuleSeverity)">
            <summary>
            Adds a lambda rule with fluent coding style
            </summary>
            <typeparam name="T"></typeparam>
            <param name="businessRules">The business rules.</param>
            <param name="primaryProperty">The primary property.</param>
            <param name="ruleHandler">The rule handler.</param>
            <param name="messageDelegate">The message delegate.</param>
            <param name="severity">The rule severity.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRulesExtensions.AddRule``1(Csla.Rules.BusinessRules,Csla.Core.IPropertyInfo,System.Func{``0,System.Boolean},System.Func{System.String})">
            <summary>
            Adds a lambda rule with fluent coding style
            </summary>
            <typeparam name="T"></typeparam>
            <param name="businessRules">The business rules.</param>
            <param name="primaryProperty">The primary property.</param>
            <param name="ruleHandler">The rule handler.</param>
            <param name="messageDelegate">The message delegate.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRulesExtensions.AddRule``1(Csla.Rules.BusinessRules,System.String,Csla.Core.IPropertyInfo,System.Func{``0,System.Boolean},System.Func{System.String},Csla.Rules.RuleSeverity)">
            <summary>
            Adds a lambda rule with fluent coding style to the RuleSet
            </summary>
            <typeparam name="T"></typeparam>
            <param name="businessRules">The business rules.</param>
            <param name="ruleSet">The RuleSet.</param>
            <param name="primaryProperty">The primary property.</param>
            <param name="ruleHandler">The rule handler.</param>
            <param name="messageDelegate">The message delegate.</param>
            <param name="severity">The rule severity.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRulesExtensions.AddRule``1(Csla.Rules.BusinessRules,System.String,Csla.Core.IPropertyInfo,System.Func{``0,System.Boolean},System.Func{System.String})">
            <summary>
            Adds a lambda rule with fluent coding style to the RuleSet
            </summary>
            <typeparam name="T"></typeparam>
            <param name="businessRules">The business rules.</param>
            <param name="ruleSet">The RuleSet.</param>
            <param name="primaryProperty">The primary property.</param>
            <param name="ruleHandler">The rule handler.</param>
            <param name="messageDelegate">The message delegate.</param>
        </member>
        <member name="T:Csla.Rules.ObjectRule">
            <summary>
            Base class for object level rules.
            </summary>
        </member>
        <member name="T:Csla.Rules.BusinessRule">
            <summary>
            Base class used to create business and validation
            rules.
            </summary>
        </member>
        <member name="T:Csla.Rules.IBusinessRule">
            <summary>
            Interface defining a business/validation
            rule implementation.
            </summary>
        </member>
        <member name="M:Csla.Rules.IBusinessRule.Execute(Csla.Rules.RuleContext)">
            <summary>
            Business or validation rule implementation.
            </summary>
            <param name="context">Rule context object.</param>
        </member>
        <member name="P:Csla.Rules.IBusinessRule.InputProperties">
            <summary>
            Gets a list of secondary property values to be supplied to the
            rule when it is executed.
            </summary>
        </member>
        <member name="P:Csla.Rules.IBusinessRule.AffectedProperties">
            <summary>
            Gets a list of properties affected by this rule. Rules for these
            properties are executed after rules for the primary
            property.
            </summary>
        </member>
        <member name="P:Csla.Rules.IBusinessRule.PrimaryProperty">
            <summary>
            Gets the primary property affected by this rule.
            </summary>
        </member>
        <member name="P:Csla.Rules.IBusinessRule.RuleName">
            <summary>
            Gets a unique rule:// URI for the specific instance
            of the rule within the context of the business object
            where the rule is used.
            </summary>
        </member>
        <member name="P:Csla.Rules.IBusinessRule.Priority">
            <summary>
            Gets the rule priority.
            </summary>
        </member>
        <member name="P:Csla.Rules.IBusinessRule.IsAsync">
            <summary>
            Gets a value indicating whether the Execute() method
            will run asynchronous code.
            </summary>
        </member>
        <member name="P:Csla.Rules.IBusinessRule.ProvideTargetWhenAsync">
            <summary>
            Gets a value indicating that the Target property should
            be set even for an async rule (note that using Target
            from a background thread will cause major problems).
            </summary>
        </member>
        <member name="P:Csla.Rules.IBusinessRule.RunMode">
            <summary>
            Gets the context in which the rule is allowed to execute.
            </summary>
            <value>The run in context.</value>
        </member>
        <member name="M:Csla.Rules.BusinessRule.#ctor">
            <summary>
            Creates an instance of the rule that applies
            to a business object as a whole.
            </summary>
        </member>
        <member name="M:Csla.Rules.BusinessRule.#ctor(Csla.Core.IPropertyInfo)">
            <summary>
            Creates an instance of the rule that applies
            to a specfic property.
            </summary>
            <param name="primaryProperty">Primary property for this rule.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRule.Execute(Csla.Rules.RuleContext)">
            <summary>
            Business or validation rule implementation.
            </summary>
            <param name="context">Rule context object.</param>
        </member>
        <member name="M:Csla.Rules.BusinessRule.LoadProperty(System.Object,Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            Loads a property's managed field with the 
            supplied value calling PropertyHasChanged 
            if the value does change.
            </summary>
            <param name="obj">
            Object on which to call the method. 
            </param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.Rules.BusinessRule.ReadProperty(System.Object,Csla.Core.IPropertyInfo)">
            <summary>
            Reads a property's field value.
            </summary>
            <param name="obj">
            Object on which to call the method. 
            </param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            No authorization checks occur when this method is called.
            </remarks>
        </member>
        <member name="P:Csla.Rules.BusinessRule.PrimaryProperty">
            <summary>
            Gets or sets the primary property affected by this rule.
            </summary>
        </member>
        <member name="P:Csla.Rules.BusinessRule.AffectedProperties">
            <summary>
            Gets a list of properties affected by this rule. Rules for these
            properties are executed after rules for the primary
            property.
            </summary>
        </member>
        <member name="P:Csla.Rules.BusinessRule.InputProperties">
            <summary>
            Gets a list of secondary property values to be supplied to the
            rule when it is executed.
            </summary>
        </member>
        <member name="P:Csla.Rules.BusinessRule.IsAsync">
            <summary>
            Gets a value indicating whether the rule will run
            on a background thread.
            </summary>
        </member>
        <member name="P:Csla.Rules.BusinessRule.ProvideTargetWhenAsync">
            <summary>
            Gets a value indicating that the Target property should
            be set even for an async rule (note that using Target
            from a background thread will cause major problems).
            </summary>
        </member>
        <member name="P:Csla.Rules.BusinessRule.RuleName">
            <summary>
            Gets a unique rule:// URI for the specific instance
            of the rule within the context of the business object
            where the rule is used.
            </summary>
        </member>
        <member name="P:Csla.Rules.BusinessRule.RuleUri">
            <summary>
            Sets or gets the rule:// URI object for this rule.
            </summary>
        </member>
        <member name="P:Csla.Rules.BusinessRule.Priority">
            <summary>
            Gets the rule priority.
            </summary>
        </member>
        <member name="P:Csla.Rules.BusinessRule.RunMode">
            <summary>
            Gets or sets the run in context.
            </summary>
            <value>The run in context.</value>
        </member>
        <member name="M:Csla.Rules.ObjectRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Csla.Rules.ObjectRule"/> class.
            </summary>
        </member>
        <member name="P:Csla.Rules.ObjectRule.PrimaryProperty">
            <summary>
            Gets or sets the primary property affected by this rule.
            Will always return null.
            Will throw ArgumentException if set to anything but null.
            </summary>
        </member>
        <member name="P:Csla.Rules.ObjectRule.CanRunInCheckRules">
            <summary>
            Gets or sets a value indicating whether this instance can run when CheckRules is called on BO.
            </summary>
            <value>
            	<c>true</c> if this instance can run when CheckRules is called; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Csla.Rules.PropertyRule">
            <summary>
            Base class for a property rule 
            </summary>
        </member>
        <member name="M:Csla.Rules.PropertyRule.GetMessage">
            <summary>
            Gets the error message text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.Rules.PropertyRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Csla.Rules.PropertyRule"/> class.
            </summary>
        </member>
        <member name="M:Csla.Rules.PropertyRule.#ctor(Csla.Core.IPropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Csla.Rules.PropertyRule"/> class.
            </summary>
            <param name="propertyInfo">The property info.</param>
        </member>
        <member name="P:Csla.Rules.PropertyRule.MessageText">
            <summary>
            Gets or sets the error message (constant).
            </summary>
        </member>
        <member name="P:Csla.Rules.PropertyRule.MessageDelegate">
            <summary>
            Gets or sets the error message function for this rule.
            Use this for localizable messages from a resource file. 
            </summary>    
        </member>
        <member name="P:Csla.Rules.PropertyRule.HasMessageDelegate">
            <summary>
            Gets a value indicating whether this instance has message delegate.
            </summary>
            <value>
            	<c>true</c> if this instance has message delegate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Csla.Rules.PropertyRule.CanRunAsAffectedProperty">
            <summary>
            Gets or sets a value indicating whether this instance can run as affected property.
            </summary>
            <value>
            	<c>true</c> if this instance can run as affected property; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Csla.Rules.PropertyRule.CanRunOnServer">
            <summary>
            Gets or sets a value indicating whether this instance can run in logical serverside data portal.
            </summary>
            <value>
            	<c>true</c> if this instance can run logical serverside data portal; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Csla.Rules.PropertyRule.CanRunInCheckRules">
            <summary>
            Gets or sets a value indicating whether this instance can run when CheckRules is called on BO.
            </summary>
            <value>
            	<c>true</c> if this instance can run when CheckRules is called; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Csla.Rules.RuleUri">
            <summary>
            Parses a rule:// URI to provide
            easy access to the parts of the URI.
            </summary>
        </member>
        <member name="M:Csla.Rules.RuleUri.#ctor(System.String)">
            <summary>
            Creates an instance of the object
            by parsing the provided rule:// URI.
            </summary>
            <param name="ruleString">The rule:// URI.</param>
        </member>
        <member name="M:Csla.Rules.RuleUri.#ctor(System.Uri)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="uri">The rule:// URI.</param>
        </member>
        <member name="M:Csla.Rules.RuleUri.#ctor(Csla.Rules.IBusinessRule,Csla.Core.IPropertyInfo)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="rule">Rule object.</param>
            <param name="property">Property to which rule applies.</param>
        </member>
        <member name="M:Csla.Rules.RuleUri.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="typeName">Name of the rule type.</param>
            <param name="propertyName">Name of the business object property or the string literal "null".</param>
        </member>
        <member name="M:Csla.Rules.RuleUri.Parse(System.String)">
            <summary>
            Parses a rule:// URI.
            </summary>
            <param name="ruleString">
            Text representation of a rule:// URI.</param>
            <returns>A populated RuleDescription object.</returns>
        </member>
        <member name="M:Csla.Rules.RuleUri.ToString">
            <summary>
            Gets a string representation of the rule URI.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.Rules.RuleUri.AddQueryParameter(System.String,System.String)">
            <summary>
            Adds a query parameter to the URI.
            </summary>
            <param name="key">Key for the parameter.</param>
            <param name="value">Value of the parameter.</param>
        </member>
        <member name="M:Csla.Rules.RuleUri.GetTypeName(System.Type)">
            <summary>
            Gets the name of the type. 
            Recursive processing of generic constraints and parameters.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:Csla.Rules.RuleUri.RuleTypeName">
            <summary>
            Gets the name of the type containing
            the rule method.
            </summary>
        </member>
        <member name="P:Csla.Rules.RuleUri.PropertyName">
            <summary>
            Gets the name of the property with which
            the rule is associated.
            </summary>
        </member>
        <member name="P:Csla.Rules.RuleUri.Arguments">
            <summary>
            Gets a Dictionary containing the
            name/value arguments provided to
            the rule method.
            </summary>
        </member>
        <member name="T:Csla.Rules.UriExtensions">
            <summary>
            Extension methods for System.Uri.
            </summary>
        </member>
        <member name="M:Csla.Rules.UriExtensions.Parts(System.Uri)">
            <summary>
            Gets the segments (/ delimited parts) of the path.
            </summary>
            <param name="uri">URI to parse.</param>
            <returns>
            On .NET returns the Segments property. On Silverlight
            parses the path by / and returns a string array comparable
            to the .NET Segments property.
            </returns>
        </member>
        <member name="T:Csla.Rules.ValidationException">
            <summary>
            Exception class indicating that there was a validation
            problem with a business object.
            </summary>
        </member>
        <member name="M:Csla.Rules.ValidationException.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Rules.ValidationException.#ctor(System.String)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Message describing the exception.</param>
        </member>
        <member name="M:Csla.Rules.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Message describing the exception.</param>
            <param name="innerException">Inner exception object.</param>
        </member>
        <member name="T:Csla.RunLocalAttribute">
            <summary>
            Marks a DataPortal_XYZ method to
            be run on the client even if the server-side
            DataPortal is configured for remote use.
            </summary>
        </member>
        <member name="T:Csla.Security.CslaPrincipal">
            <summary>
            Base class from which custom principal
            objects should inherit to operate
            properly with the data portal.
            </summary>
        </member>
        <member name="M:Csla.Security.CslaPrincipal.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Security.CslaPrincipal.IsInRole(System.String)">
            <summary>
            Returns a value indicating whether the
            user is in a given role.
            </summary>
            <param name="role">Name of the role.</param>
        </member>
        <member name="M:Csla.Security.CslaPrincipal.#ctor(System.Security.Principal.IIdentity)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="identity">Identity object for the user.</param>
        </member>
        <member name="M:Csla.Security.CslaPrincipal.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to get custom field values
            from the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="mode">Serialization mode.</param>
        </member>
        <member name="M:Csla.Security.CslaPrincipal.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to set custom field values
            ito the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="mode">Serialization mode.</param>
        </member>
        <member name="P:Csla.Security.CslaPrincipal.Identity">
            <summary>
            Returns the user's identity object.
            </summary>
        </member>
        <member name="T:Csla.Security.ICslaIdentity">
            <summary>
            Provides a base class to simplify creation of
            a .NET identity object for use with CslaPrincipal.
            </summary>
        </member>
        <member name="T:Csla.Security.ICheckRoles">
            <summary>
            Interface defining an object that
            checks IsInRole.
            </summary>
        </member>
        <member name="M:Csla.Security.ICheckRoles.IsInRole(System.String)">
            <summary>
            Returns a value indicating whether the current
            user is in the specified security role.
            </summary>
            <param name="role">
            Role to check.
            </param>
        </member>
        <member name="T:Csla.Security.SecurityException">
            <summary>
            Security exception.
            </summary>
        </member>
        <member name="M:Csla.Security.SecurityException.#ctor">
            <summary>
            Creates an instance of the type.
            </summary>
        </member>
        <member name="M:Csla.Security.SecurityException.#ctor(System.String)">
            <summary>
            Creates an instance of the type.
            </summary>
            <param name="message">Exception text.</param>
        </member>
        <member name="M:Csla.Security.SecurityException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the type.
            </summary>
            <param name="message">Exception text.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="T:Csla.Serialization.Mobile.CslaBinaryReader">
            <summary>
            This is a class that is responsible for deserializing SerializationInfo objects for
            receiving the data from client / server
            </summary>
        </member>
        <member name="T:Csla.Serialization.Mobile.ICslaReader">
            <summary>
            Represents a reader class that can be used
            to read the data sent across the wire in byte array format
            when communicating between server and client in both directions
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.ICslaReader.Read(System.IO.Stream)">
            <summary>
            Read the data from a stream and return a list of <see cref="T:Csla.Serialization.Mobile.SerializationInfo"/> objects
            </summary>
            <param name="serializationStream">Stream to read the data from, typically MemoryStream</param>
            <returns>List of <see cref="T:Csla.Serialization.Mobile.SerializationInfo"/> objects</returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.CslaBinaryReader.#ctor">
            <summary>
            Creates new instance of CslaBinaryReader
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.CslaBinaryReader.Read(System.IO.Stream)">
            <summary>
            Read a data from a stream, typically MemoryStream, and convert it into 
            a list of SerializationInfo objects
            </summary>
            <param name="serializationStream">Stream to read the data from</param>
            <returns>List of SerializationInfo objects</returns>
        </member>
        <member name="T:Csla.Serialization.Mobile.CslaBinaryWriter">
            <summary>
            This is a class that is responsible for serializing SerializationInfo objects 
            into a Stream for sending the data t client / server
            </summary>
        </member>
        <member name="T:Csla.Serialization.Mobile.ICslaWriter">
            <summary>
            Represents a class that can be used to write a list of <see cref="T:Csla.Serialization.Mobile.SerializationInfo"/> objects
            into a stream, typically MemoryStream
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.ICslaWriter.Write(System.IO.Stream,System.Collections.Generic.List{Csla.Serialization.Mobile.SerializationInfo})">
            <summary>
            Write a list of <see cref="T:Csla.Serialization.Mobile.SerializationInfo"/> objects
            into a stream, typically MemoryStream
            </summary>
            <param name="serializationStream">Stream to write the data into</param>
            <param name="objectData">List of <see cref="T:Csla.Serialization.Mobile.SerializationInfo"/> objects to write</param>
        </member>
        <member name="M:Csla.Serialization.Mobile.CslaBinaryWriter.#ctor">
            <summary>
            Create new instance of CslaBinaryWriter class
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.CslaBinaryWriter.Write(System.IO.Stream,System.Collections.Generic.List{Csla.Serialization.Mobile.SerializationInfo})">
            <summary>
            Write a list of SerializationInfo objects into stream,
            typically MemoryStream
            </summary>
            <param name="serializationStream">Stream to write the data into</param>
            <param name="objectData">List of SerializationInfo objects to write to stream</param>
        </member>
        <member name="T:Csla.Serialization.Mobile.CslaKnownTypes">
            <summary>
            This enumeration contains the list of known types
            that <see cref="T:Csla.Serialization.Mobile.CslaBinaryReader"/> and <see cref="T:Csla.Serialization.Mobile.CslaBinaryWriter"/>know about
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.Boolean">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.Char">
            <summary>
            Character/char
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.SByte">
            <summary>
            Signed byte
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.Byte">
            <summary>
            Byte
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.Int16">
            <summary>
            Short /Int 16
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.UInt16">
            <summary>
            Unsigned short / Int 16
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.Int32">
            <summary>
            Integer / Int32
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.UInt32">
            <summary>
            Unsigned Integer / Int32
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.Int64">
            <summary>
            Long / Int64
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.UInt64">
            <summary>
            Unsigned Long / Int64
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.Single">
            <summary>
            Single / single precision floating point
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.Double">
            <summary>
            Double / double precision floating point
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.Decimal">
            <summary>
            Decimal
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.DateTime">
            <summary>
            Date / time 
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.TimeSpan">
            <summary>
            TimeSpan - time span
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.DateTimeOffset">
            <summary>
            Date/time plus time zone / DateTimeOffset
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.Guid">
            <summary>
            Globally unique identifier / Guid
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.ByteArray">
            <summary>
            Array of bytes. can be used to represent images data
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.CharArray">
            <summary>
            Array of characters, not the same as string
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.ListOfInt">
            <summary>
            List of integer / List(of Int)
            Used internally for serialization of list based objects
            such as BusinessListBase
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.Null">
            <summary>
            Represents null value
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.StringWithDictionaryKey">
            <summary>
            Represents string that is supported by internal dictionary
            that is used to replace strings with integers to save space
            in the serialization process.  This entry contains both string and 
            integer value of that string.  This data is used to re-build the 
            dictionary on the receiving end
            </summary>
        </member>
        <member name="F:Csla.Serialization.Mobile.CslaKnownTypes.StringDictionaryKey">
            <summary>
            Key that corresponds to internally used string.  On the receiving end this
            value will be replaces with the actual string
            </summary>
        </member>
        <member name="T:Csla.Serialization.Mobile.CslaNonClosingBinaryWriter">
            <summary>
            This class is used to get around the issue in .NET framework, where
            underlying stream is closed by a writer that writes to that stream
            when said writer is disposed
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.CslaNonClosingBinaryWriter.#ctor(System.IO.Stream)">
            <summary>
            New instance of CslaNonClosingBinaryWriter
            </summary>
            <param name="stream">Stream that the writer will write to</param>
        </member>
        <member name="M:Csla.Serialization.Mobile.CslaNonClosingBinaryWriter.Dispose(System.Boolean)">
            <summary>
            Overwrite the Dispose method of the base class
            in order to keep the stream open
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Csla.Serialization.Mobile.CslaReaderWriterFactory">
            <summary>
            Factory class that is used to create Reader/Writer pair of classes
            to read/write the data during serialization / deserialization process
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.CslaReaderWriterFactory.GetDataContractSerializer">
            <summary>
            Get an instance of <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>
            and setup known types for that class
            </summary>
            <returns>instance of <see cref="T:System.Runtime.Serialization.DataContractSerializer"/></returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.CslaReaderWriterFactory.SetCslaWriterType(System.Type)">
            <summary>
            Setup the type for Writer class
            </summary>
            <param name="writerType">Type of writer</param>
        </member>
        <member name="M:Csla.Serialization.Mobile.CslaReaderWriterFactory.SetCslaReaderType(System.Type)">
            <summary>
            Setup the type for reader class
            </summary>
            <param name="readerType">Reader class type</param>
        </member>
        <member name="M:Csla.Serialization.Mobile.CslaReaderWriterFactory.GetCslaWriter">
            <summary>
            Get an instance of the writer that is used to write data to serialization stream
            </summary>
            <returns>Instance of the writer that is used to write data to serialization stream</returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.CslaReaderWriterFactory.GetCslaReader">
            <summary>
            Get an instance of the reader that is used to read data to serialization stream
            </summary>
            <returns>Instance of the reader that is used to read data to serialization stream</returns>
        </member>
        <member name="T:Csla.Serialization.Mobile.CslaXmlBinaryReader">
            <summary>
            This class uses <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> and <see cref="T:System.Xml.XmlDictionaryReader"/> classes
            to read the data from a stream
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.CslaXmlBinaryReader.Read(System.IO.Stream)">
            <summary>
            Read the data from a stream and produce list of <see cref="T:Csla.Serialization.Mobile.SerializationInfo"/> objects
            </summary>
            <param name="serializationStream">Stream to read the data from</param>
            <returns>List of SerializationInfo objects</returns>
        </member>
        <member name="T:Csla.Serialization.Mobile.CslaXmlBinaryWriter">
            <summary>
            This class uses <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> and <see cref="T:System.Xml.XmlDictionaryWriter"/> classes
            to write the data to a stream
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.CslaXmlBinaryWriter.Write(System.IO.Stream,System.Collections.Generic.List{Csla.Serialization.Mobile.SerializationInfo})">
            <summary>
            Write the data to a stream
            </summary>
            <param name="serializationStream">Stream to read the data from</param>
            <param name="objectData">List of <see cref="T:Csla.Serialization.Mobile.SerializationInfo"/> objects to write</param>
        </member>
        <member name="T:Csla.Serialization.Mobile.CslaXmlReader">
            <summary>
            This class uses <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> and <see cref="T:System.Xml.XmlReader"/> classes
            to read the data from a stream
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.CslaXmlReader.Read(System.IO.Stream)">
            <summary>
            Read the data from a stream and produce list of <see cref="T:Csla.Serialization.Mobile.SerializationInfo"/> objects
            </summary>
            <param name="serializationStream">Stream to read the data from</param>
            <returns>List of SerializationInfo objects</returns>
        </member>
        <member name="T:Csla.Serialization.Mobile.CslaXmlWriter">
            <summary>
            This class uses <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> and <see cref="T:System.Xml.XmlWriter"/> classes
            to write the data to a stream
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.CslaXmlWriter.Write(System.IO.Stream,System.Collections.Generic.List{Csla.Serialization.Mobile.SerializationInfo})">
            <summary>
            Write the data to a stream
            </summary>
            <param name="serializationStream">Stream to read the data from</param>
            <param name="objectData">List of <see cref="T:Csla.Serialization.Mobile.SerializationInfo"/> objects to write</param>
        </member>
        <member name="T:Csla.Serialization.Mobile.DictionaryCheckResult">
            <summary>
            This class contains the result of check for existing dictionary
            key/value pair when creating internal dictionary of strings
            in order to minimize the amount of data that <see cref="T:Csla.Serialization.Mobile.CslaBinaryWriter"/>
            sends over the wire
            </summary>
        </member>
        <member name="P:Csla.Serialization.Mobile.DictionaryCheckResult.IsNew">
            <summary>
            Indicates that the key did not exist and was just added
            </summary>
        </member>
        <member name="P:Csla.Serialization.Mobile.DictionaryCheckResult.Key">
            <summary>
            Newly added or existing integer key corresponding to 
            string value
            </summary>
        </member>
        <member name="T:Csla.Server.AuthorizeRequest">
            <summary>
            Object containing information about the
            client request to the data portal.
            </summary>
        </member>
        <member name="P:Csla.Server.AuthorizeRequest.ObjectType">
            <summary>
            Gets the type of business object affected by
            the client request.
            </summary>
        </member>
        <member name="P:Csla.Server.AuthorizeRequest.RequestObject">
            <summary>
            Gets a reference to the criteria or 
            business object passed from
            the client to the server.
            </summary>
        </member>
        <member name="P:Csla.Server.AuthorizeRequest.Operation">
            <summary>
            Gets the data portal operation requested
            by the client.
            </summary>
        </member>
        <member name="T:Csla.Server.ChildDataPortal">
            <summary>
            Invoke data portal methods on child
            objects.
            </summary>
        </member>
        <member name="M:Csla.Server.ChildDataPortal.Create(System.Type)">
            <summary>
            Create a new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
        </member>
        <member name="M:Csla.Server.ChildDataPortal.Create(System.Type,System.Object[])">
            <summary>
            Create a new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="parameters">
            Criteria parameters passed from caller.
            </param>
        </member>
        <member name="M:Csla.Server.ChildDataPortal.Fetch(System.Type)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
        </member>
        <member name="M:Csla.Server.ChildDataPortal.Fetch(System.Type,System.Object[])">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="parameters">
            Criteria parameters passed from caller.
            </param>
        </member>
        <member name="M:Csla.Server.ChildDataPortal.Update(System.Object)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
        </member>
        <member name="M:Csla.Server.ChildDataPortal.Update(System.Object,System.Object[])">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="parameters">
            Parameters passed to method.
            </param>
        </member>
        <member name="T:Csla.Server.DataPortal">
            <summary>
            Implements the server-side DataPortal 
            message router as discussed
            in Chapter 4.
            </summary>
        </member>
        <member name="M:Csla.Server.DataPortal.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Csla.Server.DataPortal.#ctor(System.String)">
            <summary>
            This construcor accepts the App Setting name for the Csla Authorization Provider,
            therefore getting the provider type from configuration file
            </summary>
            <param name="cslaAuthorizationProviderAppSettingName"></param>
        </member>
        <member name="M:Csla.Server.DataPortal.#ctor(System.Type)">
            <summary>
            This constructor accepts the Authorization Provider Type as a parameter.
            </summary>
            <param name="authProviderType"></param>
        </member>
        <member name="M:Csla.Server.DataPortal.Create(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Create a new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.Server.DataPortal.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.Server.DataPortal.Update(System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.Server.DataPortal.Delete(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Delete a business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="P:Csla.Server.DataPortal.InterceptorType">
            <summary>
            Gets or sets the type of interceptor invoked
            by the data portal for pre- and post-processing
            of each data portal invocation.
            </summary>
        </member>
        <member name="P:Csla.Server.DataPortal.Authorizer">
            <summary>
            Gets or sets a reference to the current authorizer.
            </summary>
        </member>
        <member name="T:Csla.Server.DataPortal.NullAuthorizer">
            <summary>
            Default implementation of the authorizer that
            allows all data portal calls to pass.
            </summary>
        </member>
        <member name="T:Csla.Server.IAuthorizeDataPortal">
            <summary>
            Interface to be implemented by a custom
            authorization provider.
            </summary>
        </member>
        <member name="M:Csla.Server.IAuthorizeDataPortal.Authorize(Csla.Server.AuthorizeRequest)">
            <summary>
            Implement this method to perform custom
            authorization on every data portal call.
            </summary>
            <param name="clientRequest">
            Object containing information about the client request.
            </param>
        </member>
        <member name="M:Csla.Server.DataPortal.NullAuthorizer.Authorize(Csla.Server.AuthorizeRequest)">
            <summary>
            Creates an instance of the type.
            </summary>
            <param name="clientRequest">
            Client request information.
            </param>
        </member>
        <member name="T:Csla.Server.DataPortalContext">
            <summary>
            Provides consistent context information between the client
            and server DataPortal objects. 
            </summary>
        </member>
        <member name="M:Csla.Server.DataPortalContext.#ctor(System.Security.Principal.IPrincipal,System.Boolean)">
            <summary>
            Creates a new DataPortalContext object.
            </summary>
            <param name="principal">The current Principal object.</param>
            <param name="isRemotePortal">Indicates whether the DataPortal is remote.</param>
        </member>
        <member name="M:Csla.Server.DataPortalContext.#ctor(System.Security.Principal.IPrincipal,System.Boolean,System.String,System.String,Csla.Core.ContextDictionary,Csla.Core.ContextDictionary)">
            <summary>
            Creates a new DataPortalContext object.
            </summary>
            <param name="principal">The current Principal object.</param>
            <param name="isRemotePortal">Indicates whether the DataPortal is remote.</param>
            <param name="clientContext">Client context.</param>
            <param name="clientCulture">Client culture.</param>
            <param name="clientUICulture">Client UI culture.</param>
            <param name="globalContext">Global context.</param>
        </member>
        <member name="P:Csla.Server.DataPortalContext.Principal">
            <summary>
            The current principal object
            if CSLA security is being used.
            </summary>
        </member>
        <member name="P:Csla.Server.DataPortalContext.IsRemotePortal">
            <summary>
            Returns <see langword="true" /> if the 
            server-side DataPortal is running
            on a remote server via remoting.
            </summary>
        </member>
        <member name="P:Csla.Server.DataPortalContext.ClientCulture">
            <summary>
            The culture setting on the client
            workstation.
            </summary>
        </member>
        <member name="P:Csla.Server.DataPortalContext.ClientUICulture">
            <summary>
            The culture setting on the client
            workstation.
            </summary>
        </member>
        <member name="P:Csla.Server.DataPortalContext.TransactionalType">
            <summary>
            Gets the current transactional type. Only valid
            in the server-side data portal methods after
            the transactional type has been determined.
            </summary>
        </member>
        <member name="P:Csla.Server.DataPortalContext.FactoryInfo">
            <summary>
            Gets the current ObjectFactory attribute
            value (if any). Only valid in the server-side
            data portal methods after the attribute
            value has been determined.
            </summary>
        </member>
        <member name="T:Csla.Server.DataPortalException">
            <summary>
            This exception is returned from the 
            server-side DataPortal and contains the exception
            and context data from the server.
            </summary>
        </member>
        <member name="M:Csla.Server.DataPortalException.#ctor(System.String,System.Exception,Csla.Server.DataPortalResult)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Text describing the exception.</param>
            <param name="ex">Inner exception.</param>
            <param name="result">The data portal result object.</param>
        </member>
        <member name="P:Csla.Server.DataPortalException.Result">
            <summary>
            Returns the DataPortalResult object from the server.
            </summary>
        </member>
        <member name="P:Csla.Server.DataPortalException.StackTrace">
            <summary>
            Get the server-side stack trace from the
            original exception.
            </summary>
        </member>
        <member name="T:Csla.Server.DataPortalExceptionHandler">
            <summary>
            This class provides a hoook for developers to add custom error handling in the DataPortal. 
            
            Typical scenario is to handle non-serializable exception and exceptions from assemblies that 
            does not exist on the client side, such as 3rd party database drivers, MQ drivers etc.
            </summary>
        </member>
        <member name="M:Csla.Server.DataPortalExceptionHandler.GetExceptionInspector">
            <summary>
            Gets a new exception inspector instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Csla.Server.DataPortalExceptionHandler.InspectException(System.Type,System.Object,System.String,System.Exception)">
            <summary>
            Transforms the exception in a Fetch, Create or Execute method.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="criteria">The criteria.</param>
            <param name="methodName">Name of the method.</param>
            <param name="ex">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Server.DataPortalExceptionHandler.InspectException(System.Type,System.Object,System.Object,System.String,System.Exception)">
            <summary>
            Transforms the exception in a Update, Delete method
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="businessObject">The business object if available.</param>
            <param name="criteria">The criteria.</param>
            <param name="methodName">Name of the method.</param>
            <param name="ex">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Server.DataPortalExceptionHandler.CallExceptionInspector(System.Type,System.Object,System.Object,System.String,System.Exception,System.Exception@)">
            <summary>
            Calls the custom exception inspector.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="businessObject">The business object.</param>
            <param name="criteria">The criteria.</param>
            <param name="methodName">Name of the method.</param>
            <param name="exception">The exception that was throw in business method.</param>
            <param name="handledException">The handled exception.</param>
            <returns>
            true if new exception was thrown else false
            </returns>
        </member>
        <member name="P:Csla.Server.DataPortalExceptionHandler.ExceptionInspector">
            <summary>
            Gets or sets the fully qualified name of the ExceptionInspector class.
            </summary>
        </member>
        <member name="M:Csla.Server.DataPortalMethodCache.GetCreateMethod(System.Type,System.Object)">
            <summary>
            Gets a reference to the DataPortal_Create method for
            the specified business object type.
            </summary>
            <param name="objectType">Type of the business object.</param>
            <param name="criteria">Criteria parameter value.</param>
            <remarks>
            If the criteria parameter value is an integer, that is a special
            flag indicating that the parameter should be considered missing
            (not Nothing/null - just not there).
            </remarks>
        </member>
        <member name="M:Csla.Server.DataPortalMethodCache.GetFetchMethod(System.Type,System.Object)">
            <summary>
            Gets a reference to the DataPortal_Fetch method for
            the specified business object type.
            </summary>
            <param name="objectType">Type of the business object.</param>
            <param name="criteria">Criteria parameter value.</param>
            <remarks>
            If the criteria parameter value is an integer, that is a special
            flag indicating that the parameter should be considered missing
            (not Nothing/null - just not there).
            </remarks>
        </member>
        <member name="T:Csla.Server.DataPortalResult">
            <summary>
            Returns data from the server-side DataPortal to the 
            client-side DataPortal. Intended for internal CSLA .NET
            use only.
            </summary>
        </member>
        <member name="M:Csla.Server.DataPortalResult.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Server.DataPortalResult.#ctor(System.Object)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="returnObject">Object to return as part
            of the result.</param>
        </member>
        <member name="M:Csla.Server.DataPortalResult.#ctor(System.Object,Csla.Core.ContextDictionary)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="returnObject">Object to return as part
            of the result.</param>
            <param name="globalContext">  Global context delivered via current reuest from the server
            </param>
        </member>
        <member name="M:Csla.Server.DataPortalResult.#ctor(System.Object,System.Exception,Csla.Core.ContextDictionary)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="returnObject">Object to return as part
            of the result.</param>
            <param name="ex">
            Error that occurred during the DataPotal call.
            This will be null if no errors occurred.
            </param>
            <param name="globalContext">  Global context delivered via current reuest from the server
            </param>
        </member>
        <member name="P:Csla.Server.DataPortalResult.ReturnObject">
            <summary>
            The business object being returned from
            the server.
            </summary>
        </member>
        <member name="P:Csla.Server.DataPortalResult.Error">
            <summary>
            Error that occurred during the DataPotal call.
            This will be null if no errors occurred.
            </summary>
        </member>
        <member name="P:Csla.Server.DataPortalResult.GlobalContext">
            <summary>
            The global context being returned from
            the server.
            </summary>
        </member>
        <member name="T:Csla.Server.DataPortalSelector">
            <summary>
            Selects the appropriate data portal implementation
            to invoke based on the object and configuration.
            </summary>
        </member>
        <member name="M:Csla.Server.DataPortalSelector.Create(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Create a new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.Server.DataPortalSelector.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.Server.DataPortalSelector.Update(System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.Server.DataPortalSelector.Delete(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Delete a business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="T:Csla.Server.IDataPortalActivator">
            <summary>
            Defines a type used to activate concrete business
            instances.
            </summary>
        </member>
        <member name="M:Csla.Server.IDataPortalActivator.CreateInstance(System.Type)">
            <summary>
            Gets a new instance of the requested type.
            </summary>
            <param name="requestedType">Requested business type (class or interface).</param>
            <returns>Business object instance.</returns>
        </member>
        <member name="M:Csla.Server.IDataPortalActivator.InitializeInstance(System.Object)">
            <summary>
            Initializes an existing business object instance.
            </summary>
            <param name="obj">Reference to the business object.</param>
        </member>
        <member name="T:Csla.Server.EmptyCriteria">
            <summary>
            Empty criteria used by the data portal as a
            placeholder for a create/fetch request that
            has no criteria.
            </summary>
        </member>
        <member name="T:Csla.Server.FactoryDataPortal">
            <summary>
            Server-side data portal implementation that
            invokes an object factory rather than directly
            interacting with the business object.
            </summary>
        </member>
        <member name="M:Csla.Server.FactoryDataPortal.Create(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Create a new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.Server.FactoryDataPortal.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.Server.FactoryDataPortal.Update(System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.Server.FactoryDataPortal.Delete(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Delete a business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="P:Csla.Server.FactoryDataPortal.FactoryLoader">
            <summary>
            Gets or sets a delegate reference to the method
            called to create instances of factory objects
            as requested by the ObjectFactory attribute on
            a CSLA .NET business object.
            </summary>
        </member>
        <member name="T:Csla.Server.IDataPortalExceptionInspector">
            <summary>
            Implement this interface to check a DataPortalException before returning Exception to the client. 
            
            Make sure to rethrow a new exception if you want to transfrom to new exception. 
            </summary>
        </member>
        <member name="M:Csla.Server.IDataPortalExceptionInspector.InspectException(System.Type,System.Object,System.Object,System.String,System.Exception)">
            <summary>
            Inspects the exception that occurred during DataPortal call
            If you want to transform to/return another Exception to the client
            you must throw the new Exception in this method.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="businessObject">The business object , if available.</param>
            <param name="criteria">The criteria.</param>
            <param name="methodName">Name of the method.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="T:Csla.Server.IInterceptDataPortal">
            <summary>
            Implement this interface to create a data
            portal interceptor that is notified each
            time the data portal is invoked and
            completes processing.
            </summary>
        </member>
        <member name="M:Csla.Server.IInterceptDataPortal.Initialize(Csla.Server.InterceptArgs)">
            <summary>
            Invoked at the start of each server-side
            data portal invocation, immediately after
            the context has been set, and before
            authorization.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Csla.Server.IInterceptDataPortal.Complete(Csla.Server.InterceptArgs)">
            <summary>
            Invoked at the end of each server-side
            data portal invocation for success
            and exception scenarios.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Csla.Server.InterceptArgs">
            <summary>
            Arguments parameter passed to the
            interceptor methods.
            </summary>
        </member>
        <member name="P:Csla.Server.InterceptArgs.ObjectType">
            <summary>
            Gets or sets the business object type.
            </summary>
        </member>
        <member name="P:Csla.Server.InterceptArgs.Parameter">
            <summary>
            Gets or sets the criteria or business
            object paramter provided to the
            data portal from the client.
            </summary>
        </member>
        <member name="P:Csla.Server.InterceptArgs.Result">
            <summary>
            Gets or sets the business object
            resulting from the data portal
            operation.
            </summary>
        </member>
        <member name="P:Csla.Server.InterceptArgs.Exception">
            <summary>
            Gets or sets the exception that occurred
            during data portal processing.
            </summary>
        </member>
        <member name="P:Csla.Server.InterceptArgs.Operation">
            <summary>
            Gets or sets the data portal operation
            being performed.
            </summary>
        </member>
        <member name="P:Csla.Server.InterceptArgs.IsSync">
            <summary>
            Gets or sets a value indicating whether
            the data portal was invoked synchronously.
            </summary>
        </member>
        <member name="T:Csla.Server.IObjectFactoryLoader">
            <summary>
            Defines an interface to be implemented by
            a factory loader object that returns ObjectFactory
            objects based on the ObjectFactory attributes
            used to decorate CSLA .NET business objects.
            </summary>
        </member>
        <member name="M:Csla.Server.IObjectFactoryLoader.GetFactoryType(System.String)">
            <summary>
            Returns the type of the factory object.
            </summary>
            <param name="factoryName">
            Name of the factory to create, typically
            an assembly qualified type name.
            </param>
        </member>
        <member name="M:Csla.Server.IObjectFactoryLoader.GetFactory(System.String)">
            <summary>
            Returns an ObjectFactory object.
            </summary>
            <param name="factoryName">
            Name of the factory to create, typically
            an assembly qualified type name.
            </param>
        </member>
        <member name="T:Csla.Server.ObjectFactoryLoader">
            <summary>
            Class containing the default implementation for
            the FactoryLoader delegate used by the
            Silverlight data portal host.
            </summary>
        </member>
        <member name="M:Csla.Server.ObjectFactoryLoader.GetFactoryType(System.String)">
            <summary>
            Gets the type of the factory.
            </summary>
            <param name="factoryName">
            Type assembly qualified type name for the 
            object factory class as
            provided from the ObjectFactory attribute
            on the business object.
            </param>
        </member>
        <member name="M:Csla.Server.ObjectFactoryLoader.GetFactory(System.String)">
            <summary>
            Creates an instance of an object factory
            object for use by the data portal.
            </summary>
            <param name="factoryName">
            Type assembly qualified type name for the 
            object factory class as
            provided from the ObjectFactory attribute
            on the business object.
            </param>
            <returns>
            An instance of the type specified by the
            type name parameter.
            </returns>
        </member>
        <member name="T:Csla.Server.SimpleDataPortal">
            <summary>
            Implements the server-side DataPortal as discussed
            in Chapter 4.
            </summary>
        </member>
        <member name="M:Csla.Server.SimpleDataPortal.Create(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Create a new business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.Server.SimpleDataPortal.Fetch(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.Server.SimpleDataPortal.Update(System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="M:Csla.Server.SimpleDataPortal.Delete(System.Type,System.Object,Csla.Server.DataPortalContext,System.Boolean)">
            <summary>
            Delete a business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context">
            <see cref="T:Csla.Server.DataPortalContext"/> object passed to the server.
            </param>
            <param name="isSync">True if the client-side proxy should synchronously invoke the server.</param>
        </member>
        <member name="T:Csla.SingleCriteria`1">
            <summary>
            A single-value criteria used to retrieve business
            objects that only require one criteria value.
            </summary>
            <typeparam name="C">
            Type of the criteria value.
            </typeparam>
            <remarks></remarks>
        </member>
        <member name="M:Csla.SingleCriteria`1.#ctor(`0)">
            <summary>
            Creates an instance of the type,
            initializing it with the criteria
            value.
            </summary>
            <param name="value">
            The criteria value.
            </param>
        </member>
        <member name="M:Csla.SingleCriteria`1.#ctor">
            <summary>
            Creates an instance of the type.
            This is for use by the MobileFormatter,
            you must provide a criteria value
            parameter.
            </summary>
        </member>
        <member name="M:Csla.SingleCriteria`1.#ctor(System.Type,`0)">
            <summary>
            Creates an instance of the type.
            This is for use by the MobileFormatter,
            you must provide a criteria value
            parameter.
            </summary>
            <param name="type">Business object type.</param>
            <param name="value">Criteria value.</param>
        </member>
        <member name="M:Csla.SingleCriteria`1.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to insert your field values
            into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="M:Csla.SingleCriteria`1.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to retrieve your field values
            from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="mode">
            The StateMode indicating why this method was invoked.
            </param>
        </member>
        <member name="P:Csla.SingleCriteria`1.Value">
            <summary>
            Gets the criteria value provided by the caller.
            </summary>
        </member>
        <member name="T:Csla.SingleCriteria`2">
            <summary>
            A single-value criteria used to retrieve business
            objects that only require one criteria value.
            </summary>
            <typeparam name="B">
            Type of business object to retrieve.
            </typeparam>
            <typeparam name="C">
            Type of the criteria value.
            </typeparam>
            <remarks></remarks>
        </member>
        <member name="M:Csla.SingleCriteria`2.#ctor(`1)">
            <summary>
            Creates an instance of the type,
            initializing it with the criteria
            value.
            </summary>
            <param name="value">
            The criteria value.
            </param>
        </member>
        <member name="M:Csla.SingleCriteria`2.#ctor">
            <summary>
            Creates an instance of the type.
            This is for use by the MobileFormatter,
            you must provide a criteria value
            parameter.
            </summary>
        </member>
        <member name="T:Csla.DataPortalOperations">
            <summary>
            List of data portal operations.
            </summary>
        </member>
        <member name="F:Csla.DataPortalOperations.Create">
            <summary>
            Create operation.
            </summary>
        </member>
        <member name="F:Csla.DataPortalOperations.Fetch">
            <summary>
            Fetch operation.
            </summary>
        </member>
        <member name="F:Csla.DataPortalOperations.Update">
            <summary>
            Update operation (includes
            insert, update and delete self).
            </summary>
        </member>
        <member name="F:Csla.DataPortalOperations.Delete">
            <summary>
            Delete operation.
            </summary>
        </member>
        <member name="F:Csla.DataPortalOperations.Execute">
            <summary>
            Execute operation.
            </summary>
        </member>
        <member name="T:Csla.LinqObservableCollection`1">
            <summary>
            Synchronized view over a source list, 
            filtered, sorted and ordered based
            on a query result.
            </summary>
            <typeparam name="T">Type of objects contained in the list/collection.</typeparam>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance of the observable
            view.
            </summary>
            <param name="source">Source list containing/managing all items.</param>
            <param name="queryResult">Filtered query result over source list.</param>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},System.Collections.Generic.List{`0})">
            <summary>
            Creates a new instance of the observable
            view.
            </summary>
            <param name="source">Source list containing/managing all items.</param>
            <param name="queryResult">Filtered query result over source list.</param>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the CollectionChanged event.
            </summary>
            <param name="e">EventArgs for event.</param>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.IndexOf(`0)">
            <summary>
            Gets the positional index of the item.
            </summary>
            <param name="item">Item to find.</param>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts item into specified position in list.
            </summary>
            <param name="index">Location to insert item.</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes item at specified index.
            </summary>
            <param name="index">Index of item to remove.</param>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.Add(`0)">
            <summary>
            Adds an item to the end of the list.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.Clear">
            <summary>
            Clears the list.
            </summary>
            <remarks>
            Items in the LinqObservableCollection are cleared,
            and are also removed from the source list. Other
            items in the source list are unaffected.
            </remarks>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.Contains(`0)">
            <summary>
            Gets a value indicating whether the list
            contains the specified item.
            </summary>
            <param name="item">Item to find.</param>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the contents of the list to an array.
            </summary>
            <param name="array">Target array.</param>
            <param name="arrayIndex">Index in array where copying begins.</param>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.Remove(`0)">
            <summary>
            Removes specified item from the list.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.GetEnumerator">
            <summary>
            Gets an enumerator for the list.
            </summary>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the list.
            </summary>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.Add(System.Object)">
            <summary>
            Adds an item to the end of the list.
            </summary>
            <param name="value">Item to add.</param>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.Contains(System.Object)">
            <summary>
            Gets a value indicating whether the list
            contains the specified item.
            </summary>
            <param name="value">Item to find.</param>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.IndexOf(System.Object)">
            <summary>
            Gets the positional index of the item.
            </summary>
            <param name="value">Item to find.</param>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts item into specified position in list.
            </summary>
            <param name="index">Location to insert item.</param>
            <param name="value">Item to insert.</param>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.Remove(System.Object)">
            <summary>
            Removes specified item from the list.
            </summary>
            <param name="value">Item to remove.</param>
        </member>
        <member name="M:Csla.LinqObservableCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the contents of the list to an array.
            </summary>
            <param name="array">Target array.</param>
            <param name="index">Index in array where copying begins.</param>
        </member>
        <member name="E:Csla.LinqObservableCollection`1.CollectionChanged">
            <summary>
            Event raised when the underlying source list is changed.
            </summary>
        </member>
        <member name="P:Csla.LinqObservableCollection`1.Source">
            <summary>
            Gets the source list (usually
            a BusinessListBase) object that
            contains/manages all data items.
            </summary>
        </member>
        <member name="P:Csla.LinqObservableCollection`1.QueryResult">
            <summary>
            Gets the query result object used to
            filter the view.
            </summary>
        </member>
        <member name="P:Csla.LinqObservableCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified
            index.
            </summary>
            <param name="index">Index location.</param>
        </member>
        <member name="P:Csla.LinqObservableCollection`1.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Csla.LinqObservableCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the source
            list is read-only.
            </summary>
        </member>
        <member name="P:Csla.LinqObservableCollection`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the source
            list has a fixed size.
            </summary>
        </member>
        <member name="P:Csla.LinqObservableCollection`1.IsSynchronized">
            <summary>
            Gets a value indicating whether the source list
            is synchronized.
            </summary>
        </member>
        <member name="P:Csla.LinqObservableCollection`1.SyncRoot">
            <summary>
            Gets the SyncRoot from the source list.
            </summary>
        </member>
        <member name="T:Csla.LinqObservableCollectionExtension">
            <summary>
            Extension method for implementation of LINQ methods on BusinessListBase
            </summary>
        </member>
        <member name="M:Csla.LinqObservableCollectionExtension.ToSyncList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Gets a LinqObservableCollection that is a live view
            of the original list based on the query result.
            </summary>
        </member>
        <member name="M:Csla.LinqObservableCollectionExtension.ToSyncList``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a LinqObservableCollection that is a live view
            of the original list based on the query result.
            </summary>
        </member>
        <member name="M:Csla.LinqObservableCollectionExtension.ToSyncList``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Gets a LinqObservableCollection that is a live view
            of the original list based on the query result.
            </summary>
        </member>
        <member name="T:Csla.Reflection.CallMethodException">
            <summary>
            This exception is returned from the 
            CallMethod method in the server-side DataPortal
            and contains the exception thrown by the
            underlying business object method that was
            being invoked.
            </summary>
        </member>
        <member name="M:Csla.Reflection.CallMethodException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Message text describing the exception.</param>
            <param name="ex">Inner exception object.</param>
        </member>
        <member name="P:Csla.Reflection.CallMethodException.StackTrace">
            <summary>
            Get the stack trace from the original
            exception.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Csla.Reflection.DynamicCtorDelegate">
            <summary>
            Delegate for a dynamic constructor method.
            </summary>
        </member>
        <member name="T:Csla.Reflection.DynamicMethodDelegate">
            <summary>
            Delegate for a dynamic method.
            </summary>
            <param name="target">
            Object containg method to invoke.
            </param>
            <param name="args">
            Parameters passed to method.
            </param>
        </member>
        <member name="T:Csla.Reflection.DynamicMemberGetDelegate">
            <summary>
            Delegate for getting a value.
            </summary>
            <param name="target">Target object.</param>
            <returns></returns>
        </member>
        <member name="T:Csla.Reflection.DynamicMemberSetDelegate">
            <summary>
            Delegate for setting a value.
            </summary>
            <param name="target">Target object.</param>
            <param name="arg">Argument value.</param>
        </member>
        <member name="T:Csla.Reflection.LateBoundObject">
            <summary>
            Enables simple invocation of methods
            against the contained object using 
            late binding.
            </summary>
        </member>
        <member name="M:Csla.Reflection.LateBoundObject.#ctor(System.Type)">
            <summary>
            Creates an instance of the specified
            type and contains it within a new
            LateBoundObject.
            </summary>
            <param name="objectType">
            Type of object to create.
            </param>
            <remarks>
            The specified type must implement a
            default constructor.
            </remarks>
        </member>
        <member name="M:Csla.Reflection.LateBoundObject.#ctor(System.Object)">
            <summary>
            Contains the provided object within
            a new LateBoundObject.
            </summary>
            <param name="instance">
            Object to contain.
            </param>
        </member>
        <member name="M:Csla.Reflection.LateBoundObject.CallMethodIfImplemented(System.String)">
            <summary>
            Uses reflection to dynamically invoke a method
            if that method is implemented on the target object.
            </summary>
            <param name="method">
            Name of the method.
            </param>
        </member>
        <member name="M:Csla.Reflection.LateBoundObject.CallMethodIfImplemented(System.String,System.Object[])">
            <summary>
            Uses reflection to dynamically invoke a method
            if that method is implemented on the target object.
            </summary>
            <param name="method">
            Name of the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Csla.Reflection.LateBoundObject.CallMethod(System.String)">
            <summary>
            Uses reflection to dynamically invoke a method,
            throwing an exception if it is not
            implemented on the target object.
            </summary>
            <param name="method">
            Name of the method.
            </param>
        </member>
        <member name="M:Csla.Reflection.LateBoundObject.CallMethod(System.String,System.Object[])">
            <summary>
            Uses reflection to dynamically invoke a method,
            throwing an exception if it is not
            implemented on the target object.
            </summary>
            <param name="method">
            Name of the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Csla.Reflection.LateBoundObject.CallMethodTryAsync(System.String)">
            <summary>
            Invokes a method using the await keyword
            if the method returns Task,
            otherwise synchronously invokes the method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.LateBoundObject.CallMethodTryAsync(System.String,System.Object[])">
            <summary>
            Invokes a method using the await keyword
            if the method returns Task,
            otherwise synchronously invokes the method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="P:Csla.Reflection.LateBoundObject.Instance">
            <summary>
            Object instance managed by LateBoundObject.
            </summary>
        </member>
        <member name="T:Csla.Reflection.MethodCaller">
            <summary>
            Provides methods to dynamically find and call methods.
            </summary>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetType(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets a Type object based on the type name.
            </summary>
            <param name="typeName">Type name including assembly name.</param>
            <param name="throwOnError">true to throw an exception if the type can't be found.</param>
            <param name="ignoreCase">true for a case-insensitive comparison of the type name.</param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetType(System.String,System.Boolean)">
            <summary>
            Gets a Type object based on the type name.
            </summary>
            <param name="typeName">Type name including assembly name.</param>
            <param name="throwOnError">true to throw an exception if the type can't be found.</param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetType(System.String)">
            <summary>
            Gets a Type object based on the type name.
            </summary>
            <param name="typeName">Type name including assembly name.</param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CreateInstance(System.Type)">
            <summary>
            Uses reflection to create an object using its 
            default constructor.
            </summary>
            <param name="objectType">Type of object to create.</param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallPropertyGetter(System.Object,System.String)">
            <summary>
            Invokes a property getter using dynamic
            method invocation.
            </summary>
            <param name="obj">Target object.</param>
            <param name="property">Property to invoke.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallPropertySetter(System.Object,System.String,System.Object)">
            <summary>
            Invokes a property setter using dynamic
            method invocation.
            </summary>
            <param name="obj">Target object.</param>
            <param name="property">Property to invoke.</param>
            <param name="value">New value for property.</param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallMethodIfImplemented(System.Object,System.String)">
            <summary>
            Uses reflection to dynamically invoke a method
            if that method is implemented on the target object.
            </summary>
            <param name="obj">
            Object containing method.
            </param>
            <param name="method">
            Name of the method.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallMethodIfImplemented(System.Object,System.String,System.Object[])">
            <summary>
            Uses reflection to dynamically invoke a method
            if that method is implemented on the target object.
            </summary>
            <param name="obj">
            Object containing method.
            </param>
            <param name="method">
            Name of the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.IsMethodImplemented(System.Object,System.String,System.Object[])">
            <summary>
            Detects if a method matching the name and parameters is implemented on the provided object.
            </summary>
            <param name="obj">The object implementing the method.</param>
            <param name="method">The name of the method to find.</param>
            <param name="parameters">The parameters matching the parameters types of the method to match.</param>
            <returns>True obj implements a matching method.</returns>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallMethod(System.Object,System.String)">
            <summary>
            Uses reflection to dynamically invoke a method,
            throwing an exception if it is not
            implemented on the target object.
            </summary>
            <param name="obj">
            Object containing method.
            </param>
            <param name="method">
            Name of the method.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            Uses reflection to dynamically invoke a method,
            throwing an exception if it is not
            implemented on the target object.
            </summary>
            <param name="obj">
            Object containing method.
            </param>
            <param name="method">
            Name of the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallMethod(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Uses reflection to dynamically invoke a method,
            throwing an exception if it is not
            implemented on the target object.
            </summary>
            <param name="obj">
            Object containing method.
            </param>
            <param name="info">
            System.Reflection.MethodInfo for the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetMethod(System.Type,System.String)">
            <summary>
            Uses reflection to locate a matching method
            on the target object.
            </summary>
            <param name="objectType">
            Type of object containing method.
            </param>
            <param name="method">
            Name of the method.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetMethod(System.Type,System.String,System.Object[])">
            <summary>
            Uses reflection to locate a matching method
            on the target object.
            </summary>
            <param name="objectType">
            Type of object containing method.
            </param>
            <param name="method">
            Name of the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.FindMethod(System.Type,System.String,System.Type[])">
            <summary>
            Returns information about the specified
            method, even if the parameter types are
            generic and are located in an abstract
            generic base class.
            </summary>
            <param name="objectType">
            Type of object containing method.
            </param>
            <param name="method">
            Name of the method.
            </param>
            <param name="types">
            Parameter types to pass to method.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.FindMethod(System.Type,System.String,System.Int32)">
            <summary>
            Returns information about the specified
            method, finding the method based purely
            on the method name and number of parameters.
            </summary>
            <param name="objectType">
            Type of object containing method.
            </param>
            <param name="method">
            Name of the method.
            </param>
            <param name="parameterCount">
            Number of parameters to pass to method.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetParameterTypes">
            <summary>
            Returns an array of Type objects corresponding
            to the type of parameters provided.
            </summary>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetParameterTypes(System.Object[])">
            <summary>
            Returns an array of Type objects corresponding
            to the type of parameters provided.
            </summary>
            <param name="parameters">
            Parameter values.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetProperty(System.Type,System.String)">
            <summary>
            Gets information about a property.
            </summary>
            <param name="objectType">Object containing the property.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetPropertyValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Gets a property value.
            </summary>
            <param name="obj">Object containing the property.</param>
            <param name="info">Property info object for the property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallMethod(System.Object,System.Reflection.MethodInfo)">
            <summary>
            Invokes an instance method on an object.
            </summary>
            <param name="obj">Object containing method.</param>
            <param name="info">Method info object.</param>
            <returns>Any value returned from the method.</returns>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallMethodTryAsync(System.Object,System.String,System.Object[])">
            <summary>
            Uses reflection to dynamically invoke a method,
            throwing an exception if it is not
            implemented on the target object.
            </summary>
            <param name="obj">
            Object containing method.
            </param>
            <param name="method">
            Name of the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallMethodTryAsync(System.Object,System.String)">
            <summary>
            Invokes an instance method on an object. If the method
            is async returning Task of object it will be invoked using an await statement.
            </summary>
            <param name="obj">Object containing method.</param>
            <param name="method">
            Name of the method.
            </param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.CallFactoryMethod(System.Type,System.String,System.Object[])">
            <summary>
            Invokes a static factory method.
            </summary>
            <param name="objectType">Business class where the factory is defined.</param>
            <param name="method">Name of the factory method</param>
            <param name="parameters">Parameters passed to factory method.</param>
            <returns>Result of the factory method invocation.</returns>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.GetNonPublicMethod(System.Type,System.String)">
            <summary>
            Gets a System.Reflection.MethodInfo object corresponding to a
            non-public method.
            </summary>
            <param name="objectType">Object containing the method.</param>
            <param name="method">Name of the method.</param>
        </member>
        <member name="M:Csla.Reflection.MethodCaller.FindMethod(System.Type,System.String,Csla.Reflection.BindingFlags)">
            <summary>
            Returns information about the specified
            method.
            </summary>
            <param name="objType">Type of object.</param>
            <param name="method">Name of the method.</param>
            <param name="flags">Flag values.</param>
        </member>
        <member name="T:Csla.RelationshipTypes">
            <summary>
            List of valid relationship types
            between a parent object and another
            object through a managed property.
            </summary>
        </member>
        <member name="F:Csla.RelationshipTypes.None">
            <summary>
            The default value, indicating all values are cleared
            </summary>
        </member>
        <member name="F:Csla.RelationshipTypes.Child">
            <summary>
            Property is a reference to a child
            object contained by the parent.
            </summary>
        </member>
        <member name="F:Csla.RelationshipTypes.LazyLoad">
            <summary>
            Property is a reference to a lazy
            loaded object. Attempting to get
            or read the property value
            prior to a set or load will result in 
            an exception.
            </summary>
        </member>
        <member name="F:Csla.RelationshipTypes.PrivateField">
            <summary>
            Property is stored in a private field. Attemting 
            to read or write the property in FieldManager 
            (managed fields) will throw an exception. 
            NonGeneric ReadProperty/LoadProperty will call
            property get/set methods. 
            </summary>
        </member>
        <member name="T:Csla.Reflection.Reflect`1">
            <summary>
            Provides strong-typed reflection of the <typeparamref name="TTarget"/> 
            type.
            </summary>
            <typeparam name="TTarget">Type to reflect.</typeparam>
        </member>
        <member name="M:Csla.Reflection.Reflect`1.GetMethod(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:Csla.Reflection.Reflect`1.GetMethod``1(System.Linq.Expressions.Expression{System.Action{`0,``0}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:Csla.Reflection.Reflect`1.GetMethod``2(System.Linq.Expressions.Expression{System.Action{`0,``0,``1}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:Csla.Reflection.Reflect`1.GetMethod``3(System.Linq.Expressions.Expression{System.Action{`0,``0,``1,``2}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:Csla.Reflection.Reflect`1.GetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the property represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="property"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="property"/> is not a lambda expression or it does not represent a property access.</exception>
        </member>
        <member name="M:Csla.Reflection.Reflect`1.GetProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets the property represented by the lambda expression.
            </summary>
            <typeparam name="P">Type assigned to the property</typeparam>
            <param name="property">Property Expression</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="property"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="property"/> is not a lambda expression or it does not represent a property access.</exception>
        </member>
        <member name="M:Csla.Reflection.Reflect`1.GetField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the field represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="field"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="field"/> is not a lambda expression or it does not represent a field access.</exception>
        </member>
        <member name="T:Csla.Rules.BusinessRuleManager">
            <summary>
            Manages the list of rules for a business type.
            </summary>
        </member>
        <member name="M:Csla.Rules.BusinessRuleManager.CleanupRulesForType(System.Type)">
            <summary>
            Remove/delete all the rules for the given type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:Csla.Rules.BusinessRuleManager.Rules">
            <summary>
            Gets the list of rule objects for the business type.
            </summary>
        </member>
        <member name="P:Csla.Rules.BusinessRuleManager.Initialized">
            <summary>
            Gets or sets a value indicating whether the rules have been
            initialized.
            </summary>
        </member>
        <member name="T:Csla.Rules.CommonRules.CommonBusinessRule">
            <summary>
            Base class used to create common rules.
            </summary>
        </member>
        <member name="M:Csla.Rules.CommonRules.CommonBusinessRule.#ctor(Csla.Core.IPropertyInfo)">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Primary property.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.CommonBusinessRule.#ctor">
            <summary>
            Creates an instance of the rule.
            </summary>
        </member>
        <member name="P:Csla.Rules.CommonRules.CommonBusinessRule.Severity">
            <summary>
            Gets or sets the severity for this rule.
            </summary>
        </member>
        <member name="T:Csla.Rules.CommonRules.DataAnnotation">
            <summary>
            Business rule that encapsulates a DataAnnotations
            ValidationAttribute rule.
            </summary>
        </member>
        <member name="M:Csla.Rules.CommonRules.DataAnnotation.#ctor(Csla.Core.IPropertyInfo,System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property to which the rule applies.</param>
            <param name="attribute">ValidationAttribute instance.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.DataAnnotation.Execute(Csla.Rules.RuleContext)">
            <summary>
            Rule implementation.
            </summary>
            <param name="context">Rule context.</param>
        </member>
        <member name="P:Csla.Rules.CommonRules.DataAnnotation.Attribute">
            <summary>
            Gets the ValidationAttribute instance.
            </summary>
        </member>
        <member name="T:Csla.Rules.CommonRules.Required">
            <summary>
            Business rule for a required string.
            </summary>
        </member>
        <member name="M:Csla.Rules.CommonRules.Required.#ctor(Csla.Core.IPropertyInfo)">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property to which the rule applies.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.Required.#ctor(Csla.Core.IPropertyInfo,System.String)">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property to which the rule applies.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.Required.#ctor(Csla.Core.IPropertyInfo,System.Func{System.String})">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property to which the rule applies.</param>
            <param name="messageDelegate">The localizable message.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.Required.GetMessage">
            <summary>
            Gets the error message.
            </summary>
            <value></value>
        </member>
        <member name="M:Csla.Rules.CommonRules.Required.Execute(Csla.Rules.RuleContext)">
            <summary>
            Rule implementation.
            </summary>
            <param name="context">Rule context.</param>
        </member>
        <member name="T:Csla.Rules.CommonRules.MaxLength">
            <summary>
            Business rule for a maximum length string.
            </summary>
        </member>
        <member name="M:Csla.Rules.CommonRules.MaxLength.#ctor(Csla.Core.IPropertyInfo,System.Int32)">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property to which the rule applies.</param>
            <param name="max">Max length value.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.MaxLength.#ctor(Csla.Core.IPropertyInfo,System.Int32,System.String)">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property to which the rule applies.</param>
            <param name="message">The message.</param>
            <param name="max">Max length value.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.MaxLength.#ctor(Csla.Core.IPropertyInfo,System.Int32,System.Func{System.String})">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property to which the rule applies.</param>
            <param name="max">Max length value.</param>
            <param name="messageDelegate">The localizable message.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.MaxLength.GetMessage">
            <summary>
            Gets the error message.
            </summary>
            <value></value>
        </member>
        <member name="M:Csla.Rules.CommonRules.MaxLength.Execute(Csla.Rules.RuleContext)">
            <summary>
            Rule implementation.
            </summary>
            <param name="context">Rule context.</param>
        </member>
        <member name="P:Csla.Rules.CommonRules.MaxLength.Max">
            <summary>
            Gets the max length value.
            </summary>
        </member>
        <member name="T:Csla.Rules.CommonRules.MinLength">
            <summary>
            Business rule for a minimum length string.
            </summary>
        </member>
        <member name="M:Csla.Rules.CommonRules.MinLength.#ctor(Csla.Core.IPropertyInfo,System.Int32)">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property to which the rule applies.</param>
            <param name="min">Min length value.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.MinLength.#ctor(Csla.Core.IPropertyInfo,System.Int32,System.String)">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property to which the rule applies.</param>
            <param name="message">The message.</param>
            <param name="min">The minimum length.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.MinLength.#ctor(Csla.Core.IPropertyInfo,System.Int32,System.Func{System.String})">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property to which the rule applies.</param>
            <param name="min">Min length value.</param>
            <param name="messageDelegate">The localizable message.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.MinLength.GetMessage">
            <summary>
            Gets the error message.
            </summary>
            <value></value>
        </member>
        <member name="M:Csla.Rules.CommonRules.MinLength.Execute(Csla.Rules.RuleContext)">
            <summary>
            Rule implementation.
            </summary>
            <param name="context">Rule context.</param>
        </member>
        <member name="P:Csla.Rules.CommonRules.MinLength.Min">
            <summary>
            Gets the min length value.
            </summary>
        </member>
        <member name="T:Csla.Rules.CommonRules.MinValue`1">
            <summary>
            Business rule for a minimum value.
            </summary>
        </member>
        <member name="M:Csla.Rules.CommonRules.MinValue`1.#ctor(Csla.Core.IPropertyInfo,`0)">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property to which the rule applies.</param>
            <param name="min">Min value.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.MinValue`1.#ctor(Csla.Core.IPropertyInfo,`0,System.String)">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property to which the rule applies.</param>
            <param name="min">Min value.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.MinValue`1.#ctor(Csla.Core.IPropertyInfo,`0,System.Func{System.String})">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property to which the rule applies.</param>
            <param name="min">Min value.</param>
            <param name="messageDelegate">The localizable message.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.MinValue`1.GetMessage">
            <summary>
            Gets the error message.
            </summary>
            <value></value>
        </member>
        <member name="M:Csla.Rules.CommonRules.MinValue`1.Execute(Csla.Rules.RuleContext)">
            <summary>
            Rule implementation.
            </summary>
            <param name="context">Rule context.</param>
        </member>
        <member name="P:Csla.Rules.CommonRules.MinValue`1.Min">
            <summary>
            Gets the min value.
            </summary>
        </member>
        <member name="P:Csla.Rules.CommonRules.MinValue`1.Format">
            <summary>
            Gets or sets the format string used
            to format the Min value.
            </summary>
        </member>
        <member name="T:Csla.Rules.CommonRules.MaxValue`1">
            <summary>
            Business rule for a maximum value.
            </summary>
        </member>
        <member name="M:Csla.Rules.CommonRules.MaxValue`1.#ctor(Csla.Core.IPropertyInfo,`0)">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property to which the rule applies.</param>
            <param name="max">Max length value.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.MaxValue`1.#ctor(Csla.Core.IPropertyInfo,`0,System.String)">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property to which the rule applies.</param>
            <param name="max">Max value.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.MaxValue`1.#ctor(Csla.Core.IPropertyInfo,`0,System.Func{System.String})">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property to which the rule applies.</param>
            <param name="max">Max value.</param>
            <param name="messageDelegate">The localizable message.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.MaxValue`1.GetMessage">
            <summary>
            Gets the error message.
            </summary>
            <value></value>
        </member>
        <member name="M:Csla.Rules.CommonRules.MaxValue`1.Execute(Csla.Rules.RuleContext)">
            <summary>
            Rule implementation.
            </summary>
            <param name="context">Rule context.</param>
        </member>
        <member name="P:Csla.Rules.CommonRules.MaxValue`1.Max">
            <summary>
            Gets the max value.
            </summary>
        </member>
        <member name="P:Csla.Rules.CommonRules.MaxValue`1.Format">
            <summary>
            Gets or sets the format string used
            to format the Max value.
            </summary>
        </member>
        <member name="T:Csla.Rules.CommonRules.RegExMatch">
            <summary>
            Business rule that evaluates a regular expression.
            </summary>
        </member>
        <member name="M:Csla.Rules.CommonRules.RegExMatch.#ctor(Csla.Core.IPropertyInfo,System.String)">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Primary property.</param>
            <param name="expression">Regular expression.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.RegExMatch.#ctor(Csla.Core.IPropertyInfo,System.String,System.String)">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property to which the rule applies.</param>
            <param name="expression">Regular expression.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.RegExMatch.#ctor(Csla.Core.IPropertyInfo,System.String,System.Func{System.String})">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property to which the rule applies.</param>
            <param name="expression">Regular expression.</param>
            <param name="messageDelegate">The localizable message.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.RegExMatch.GetMessage">
            <summary>
            Gets the error message.
            </summary>
            <value></value>
        </member>
        <member name="M:Csla.Rules.CommonRules.RegExMatch.Execute(Csla.Rules.RuleContext)">
            <summary>
            Rule implementation.
            </summary>
            <param name="context">Rule context.</param>
        </member>
        <member name="P:Csla.Rules.CommonRules.RegExMatch.Expression">
            <summary>
            Gets the regular expression
            to be evaluated.
            </summary>
        </member>
        <member name="P:Csla.Rules.CommonRules.RegExMatch.NullOption">
            <summary>
            Gets or sets a value that controls how
            null input values are handled.
            </summary>
        </member>
        <member name="T:Csla.Rules.CommonRules.RegExMatch.NullResultOptions">
            <summary>
            List of options for the NullResult
            property.
            </summary>
        </member>
        <member name="F:Csla.Rules.CommonRules.RegExMatch.NullResultOptions.ReturnFalse">
            <summary>
            Indicates that a null value
            should always result in the 
            rule returning false.
            </summary>
        </member>
        <member name="F:Csla.Rules.CommonRules.RegExMatch.NullResultOptions.ReturnTrue">
            <summary>
            Indicates that a null value
            should always result in the 
            rule returning true.
            </summary>
        </member>
        <member name="F:Csla.Rules.CommonRules.RegExMatch.NullResultOptions.ConvertToEmptyString">
            <summary>
            Indicates that a null value
            should be converted to an
            empty string before the
            regular expression is
            evaluated.
            </summary>
        </member>
        <member name="T:Csla.Rules.CommonRules.InfoMessage">
            <summary>
            Adds an information message to a property.
            </summary>
            <remarks>
            Message text is the DefaultDescription property.
            The default priority for this rule is 1, so if any
            rules are broken the infomational text won't appear.
            </remarks>
        </member>
        <member name="M:Csla.Rules.CommonRules.InfoMessage.#ctor(Csla.Core.IPropertyInfo)">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property for message.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.InfoMessage.#ctor(Csla.Core.IPropertyInfo,System.String)">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property for message.</param>
            <param name="messageText">Message text.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.InfoMessage.#ctor(Csla.Core.IPropertyInfo,System.Func{System.String})">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Property for message.</param>
            <param name="messageDelegate">Message text function.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.InfoMessage.Execute(Csla.Rules.RuleContext)">
            <summary>
            Rule implementation.
            </summary>
            <param name="context">Rule context.</param>
        </member>
        <member name="P:Csla.Rules.CommonRules.InfoMessage.MessageText">
            <summary>
            Gets the default description used by this rule.
            </summary>
        </member>
        <member name="P:Csla.Rules.CommonRules.InfoMessage.MessageDelegate">
            <summary>
            Gets or sets the localizable message function.
            This will override the MessageText if set.
            </summary>
            <value>
            The localizable message.
            </value>
        </member>
        <member name="T:Csla.Rules.CommonRules.Lambda">
            <summary>
            A business rule defined by a lambda expression.
            </summary>
        </member>
        <member name="M:Csla.Rules.CommonRules.Lambda.#ctor(System.Action{Csla.Rules.RuleContext})">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="rule">Rule implementation.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.Lambda.#ctor(Csla.Core.IPropertyInfo,System.Action{Csla.Rules.RuleContext})">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Primary property for the rule.</param>
            <param name="rule">Rule implementation.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.Lambda.AddQueryParameter(System.String,System.String)">
            <summary>
            Add a query parameter to make the RuleUri uniques for this rule and primary property.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Csla.Rules.CommonRules.Lambda.Execute(Csla.Rules.RuleContext)">
            <summary>
            Executes the rule.
            </summary>
            <param name="context">Rule context.</param>
        </member>
        <member name="T:Csla.Rules.CommonRules.Dependency">
            <summary>
            A rule that establishes a dependency between two properties.
            </summary>
        </member>
        <member name="M:Csla.Rules.CommonRules.Dependency.#ctor(Csla.Core.IPropertyInfo,Csla.Core.IPropertyInfo[])">
            <summary>
            Creates an instance of the rule.
            </summary>
            <param name="primaryProperty">Primary property for the rule.</param>
            <param name="dependencyProperty">Dependent property.</param>
            <remarks>
            When rules are run for the primary property, they will also be run for the dependent
            property. Add a Dependency rule to a property when changing that property should run rules
            on some other property, and you have no other rules that would establish this dependent
            or affected property relationship.
            </remarks>
        </member>
        <member name="T:Csla.Rules.RunModes">
            <summary>
            Flags enum to define when rule is allowed or denied to run 
            </summary>
        </member>
        <member name="F:Csla.Rules.RunModes.Default">
            <summary>
            Default value, rule can run in any context
            </summary>
        </member>
        <member name="F:Csla.Rules.RunModes.DenyCheckRules">
            <summary>
            Deny rule from running in CheckRules 
            </summary>
        </member>
        <member name="F:Csla.Rules.RunModes.DenyAsAffectedProperty">
            <summary>
            Deny rule from running as AffectedProperties from another rule.
            </summary>
        </member>
        <member name="F:Csla.Rules.RunModes.DenyOnServerSidePortal">
            <summary>
            Deny rule from running on serverside portal
            </summary>
        </member>
        <member name="F:Csla.Rules.RuleContextModes.Any">
            <summary>
            Default value, rule can run in any context
            </summary>
        </member>
        <member name="F:Csla.Rules.RuleContextModes.CheckRules">
            <summary>
            Called from CheckRules
            </summary>
        </member>
        <member name="F:Csla.Rules.RuleContextModes.CheckObjectRules">
            <summary>
            Called from CheckObjectRules
            </summary>
        </member>
        <member name="F:Csla.Rules.RuleContextModes.PropertyChanged">
            <summary>
            Called from PropertyHasChanged event on BO but not including cascade calls by AffectedProperties
            </summary>
        </member>
        <member name="F:Csla.Rules.RuleContextModes.AsAffectedPoperty">
            <summary>
            Include cascaded calls by AffectedProperties
            </summary>
        </member>
        <member name="T:Csla.Rules.RuleContext">
            <summary>
            Context information provided to a business rule
            when it is invoked.
            </summary>
        </member>
        <member name="F:Csla.Rules.RuleContext._results">
            <summary>
            Gets a reference to the list of results being returned
            by this rule.
            </summary>
        </member>
        <member name="M:Csla.Rules.RuleContext.ExecuteRule(Csla.Rules.IBusinessRule)">
            <summary>
            Executes the inner rule from the outer rules context. 
            Creates a chained context and if CanRunRule will execute the inner rule.  
            </summary>
            <param name="innerRule">The inner rule.</param>
        </member>
        <member name="M:Csla.Rules.RuleContext.#ctor(System.Action{Csla.Rules.RuleContext},Csla.Rules.IBusinessRule,System.Object,System.Collections.Generic.Dictionary{Csla.Core.IPropertyInfo,System.Object})">
            <summary>
            Creates a RuleContext instance for testing.
            </summary>
            <param name="completeHandler">Callback for async rule.</param>
            <param name="rule">Reference to the rule object.</param>
            <param name="target">Target business object.</param>
            <param name="inputPropertyValues">Input property values used by the rule.</param>
        </member>
        <member name="M:Csla.Rules.RuleContext.GetChainedContext(Csla.Rules.IBusinessRule)">
            <summary>
            Gets a new RuleContext object for a chained rule.
            </summary>
            <param name="rule">Chained rule that will use
            this new context.</param>
            <remarks>
            The properties from the existing RuleContext will be
            used to create the new context, with the exception
            of the Rule property which is set using the supplied
            IBusinessRule value.
            </remarks>
        </member>
        <member name="M:Csla.Rules.RuleContext.AddErrorResult(System.String)">
            <summary>
            Add a Error severity result to the Results list.
            </summary>
            <param name="description">Human-readable description of
            why the rule failed.</param>
        </member>
        <member name="M:Csla.Rules.RuleContext.AddErrorResult(System.String,System.Boolean)">
            <summary>
            Add a Error severity result to the Results list.
            </summary>
            <param name="description">Human-readable description of
            why the rule failed.</param>
            <param name="stopProcessing">True if no further rules should be processed
            for the current property.</param>
        </member>
        <member name="M:Csla.Rules.RuleContext.AddErrorResult(Csla.Core.IPropertyInfo,System.String)">
            <summary>
            Add a Error severity result to the Results list.
            This method is only allowed on "object" level rules to allow an object level rule to set warning result on a field. 
            </summary>
            <param name="property">Property to which the result applies.</param>
            <param name="description">Human-readable description of
            why the rule failed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When property is not defined in AffectedProperties list.</exception>   
        </member>
        <member name="M:Csla.Rules.RuleContext.AddWarningResult(System.String)">
            <summary>
            Add a Warning severity result to the Results list.
            </summary>
            <param name="description">Human-readable description of
            why the rule failed.</param>
        </member>
        <member name="M:Csla.Rules.RuleContext.AddWarningResult(System.String,System.Boolean)">
            <summary>
            Add a Warning severity result to the Results list.
            </summary>
            <param name="description">Human-readable description of
            why the rule failed.</param>
            <param name="stopProcessing">True if no further rules should be processed
            for the current property.</param>
        </member>
        <member name="M:Csla.Rules.RuleContext.AddWarningResult(Csla.Core.IPropertyInfo,System.String)">
            <summary>
            Add a Warning severity result to the Results list.
            This method is only allowed on "object" level rules to allow an object level rule to set warning result on a field. 
            </summary>
            <param name="property">Property to which the result applies.</param>
            <param name="description">Human-readable description of  why the rule failed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When property is not defined in AffectedProperties list.</exception>    
        </member>
        <member name="M:Csla.Rules.RuleContext.AddInformationResult(System.String)">
            <summary>
            Add an Information severity result to the Results list.
            </summary>
            <param name="description">Human-readable description of
            why the rule failed.</param>
        </member>
        <member name="M:Csla.Rules.RuleContext.AddInformationResult(System.String,System.Boolean)">
            <summary>
            Add an Information severity result to the Results list.
            </summary>
            <param name="description">Human-readable description of why the rule failed.</param>
            <param name="stopProcessing">True if no further rules should be processed for the current property.</param>
        </member>
        <member name="M:Csla.Rules.RuleContext.AddInformationResult(Csla.Core.IPropertyInfo,System.String)">
            <summary>
            Add an Information severity result to the Results list.
            This method is only allowed on "object" level rules to allow an object level rule to set warning result on a field. 
            </summary>
            <param name="property">Property to which the result applies.</param>
            <param name="description">Human-readable description of why the rule failed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When property is not defined in AffectedProperties list.</exception>   
        </member>
        <member name="M:Csla.Rules.RuleContext.AddSuccessResult(System.Boolean)">
            <summary>
            Add a Success severity result to the Results list.
            </summary>
            <param name="stopProcessing">True if no further rules should be processed for the current property.</param>
        </member>
        <member name="M:Csla.Rules.RuleContext.AddOutValue(System.Object)">
            <summary>
            Add an outbound value to update the rule's primary 
            property on the business object once the rule is complete.
            </summary>
            <param name="value">New property value.</param>
        </member>
        <member name="M:Csla.Rules.RuleContext.AddOutValue(Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            Add an outbound value to update a property on the business
            object once the rule is complete.
            </summary>
            <param name="property">Property to update.</param>
            <param name="value">New property value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">When property is not defined in AffectedProperties list.</exception>   
        </member>
        <member name="M:Csla.Rules.RuleContext.AddDirtyProperty(Csla.Core.IPropertyInfo)">
            <summary>
            Adds a property name as a dirty field (changed value).
            </summary>
            <param name="property">The property.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Csla.Rules.RuleContext.Complete">
            <summary>
            Indicates that the rule processing is complete, so
            CSLA .NET will process the Results list. This method
            must be invoked on the UI thread.
            </summary>
        </member>
        <member name="M:Csla.Rules.RuleContext.GetInputValue``1(Csla.PropertyInfo{``0})">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo">The property info.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Rules.RuleContext.GetInputValue``1(Csla.Core.IPropertyInfo)">
            <summary>
            Gets the value with explicit cast
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo">The generic property info.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Rules.RuleContext.TryGetInputValue``1(Csla.PropertyInfo{``0},``0@)">
            <summary>
            Tries to get the value. Use this method on LazyLoaded properties to test if value has been provided or not.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo">The generic property info.</param>
            <param name="value">The value.</param>
            <returns>true if value exists else false</returns>
        </member>
        <member name="M:Csla.Rules.RuleContext.TryGetInputValue``1(Csla.Core.IPropertyInfo,``0@)">
            <summary>
            Tries to get the value with explicit cast. Use this method on LazyLoaded properties to test if value has been provided or not.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyInfo">The generic property info.</param>
            <param name="value">The value.</param>
            <returns>true if value exists else false</returns>
        </member>
        <member name="P:Csla.Rules.RuleContext.Rule">
            <summary>
            Gets the rule object.
            </summary>
        </member>
        <member name="P:Csla.Rules.RuleContext.Target">
            <summary>
            Gets a reference to the target business object.
            </summary>
        </member>
        <member name="P:Csla.Rules.RuleContext.InputPropertyValues">
            <summary>
            Gets a dictionary containing copies of property values from
            the target business object.
            </summary>
        </member>
        <member name="P:Csla.Rules.RuleContext.DirtyProperties">
            <summary>
            Gets a list of dirty properties (value was updated).
            </summary>
            <value>
            The dirty properties.
            </value>
        </member>
        <member name="P:Csla.Rules.RuleContext.OutputPropertyValues">
            <summary>
            Gets a dictionary containing copies of property values that
            should be updated in the target object.
            </summary>
        </member>
        <member name="P:Csla.Rules.RuleContext.Results">
            <summary>
            Gets a list of RuleResult objects containing the
            results of the rule.
            </summary>
        </member>
        <member name="P:Csla.Rules.RuleContext.OriginPropertyName">
            <summary>
            Gets or sets the name of the origin property.
            </summary>
            <value>The name of the origin property.</value>
        </member>
        <member name="P:Csla.Rules.RuleContext.ExecuteContext">
            <summary>
            Gets the execution context.
            </summary>
            <value>The execution context.</value>
        </member>
        <member name="P:Csla.Rules.RuleContext.IsCascadeContext">
            <summary>
            Gets a value indicating whether this instance is cascade context as a result of AffectedProperties.
            </summary>
            <value>
            	<c>true</c> if this instance is cascade context; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Csla.Rules.RuleContext.IsPropertyChangedContext">
            <summary>
            Gets a value indicating whether this instance is property changed context.
            </summary>
            <value>
            	<c>true</c> if this instance is property changed context; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Csla.Rules.RuleContext.IsCheckRulesContext">
            <summary>
            Gets a value indicating whether this instance is check rules context.
            </summary>
            <value>
            	<c>true</c> if this instance is check rules context; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Csla.Rules.RuleContext.IsCheckObjectRulesContext">
            <summary>
            Gets a value indicating whether this instance is check object rules context.
            </summary>
            <value>
            	<c>true</c> if this instance is check object rules context; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Csla.Rules.RuleResult">
            <summary>
            Contains information about the result of a rule.
            </summary>
        </member>
        <member name="M:Csla.Rules.RuleResult.#ctor(System.String,Csla.Core.IPropertyInfo)">
            <summary>
            Creates a successful result.
            </summary>
            <param name="ruleName">Unique name of the rule creating
            this result.</param>
            <param name="property">Property to which this result should
            be attached.</param>
        </member>
        <member name="M:Csla.Rules.RuleResult.#ctor(System.String,Csla.Core.IPropertyInfo,System.String)">
            <summary>
            Creates a failure result.
            </summary>
            <param name="ruleName">Unique name of the rule creating
            this result.</param>
            <param name="property">Property to which this result should
            be attached.</param>
            <param name="description">Human-readable description of
            why the rule failed.</param>
        </member>
        <member name="P:Csla.Rules.RuleResult.RuleName">
            <summary>
            Gets the unique name of the rule that created
            this result.
            </summary>
        </member>
        <member name="P:Csla.Rules.RuleResult.Success">
            <summary>
            Gets a value indicating whether the 
            rule was successful.
            </summary>
        </member>
        <member name="P:Csla.Rules.RuleResult.Description">
            <summary>
            Gets a human-readable description of 
            why the rule failed.
            </summary>
        </member>
        <member name="P:Csla.Rules.RuleResult.Severity">
            <summary>
            Gets or sets the severity of a failed rule.
            </summary>
        </member>
        <member name="P:Csla.Rules.RuleResult.StopProcessing">
            <summary>
            Gets or sets a value indicating whether rule 
            processing should immediately stop
            (applies to sync rules only).
            </summary>
        </member>
        <member name="P:Csla.Rules.RuleResult.PrimaryProperty">
            <summary>
            Gets the primary property for this result.
            </summary>
        </member>
        <member name="P:Csla.Rules.RuleResult.Properties">
            <summary>
            Gets or sets a list of properties that were affected
            by the rule, so appropriate PropertyChanged events
            can be raised for UI notification.
            </summary>
        </member>
        <member name="P:Csla.Rules.RuleResult.OutputPropertyValues">
            <summary>
            Gets or sets a dictionary of new property values used
            to update the business object's properties after
            the rule is complete.
            </summary>
        </member>
        <member name="T:Csla.Rules.RuleSeverity">
            <summary>
            Values for validation rule severities.
            </summary>
        </member>
        <member name="F:Csla.Rules.RuleSeverity.Error">
            <summary>
            Represents a serious
            business rule violation that
            should cause an object to
            be considered invalid.
            </summary>
        </member>
        <member name="F:Csla.Rules.RuleSeverity.Warning">
            <summary>
            Represents a business rule
            violation that should be
            displayed to the user, but which
            should not make an object be
            invalid.
            </summary>
        </member>
        <member name="F:Csla.Rules.RuleSeverity.Information">
            <summary>
            Represents a business rule
            result that should be displayed
            to the user, but which is less
            severe than a warning.
            </summary>
        </member>
        <member name="F:Csla.Rules.RuleSeverity.Success">
            <summary>
            Represents a business rule
            result that should not
            be displayed to the user,
            and where the rule was
            successful.
            </summary>
        </member>
        <member name="T:Csla.Security.CslaIdentity">
            <summary>
            Provides a base class to simplify creation of
            a .NET identity object for use with CslaPrincipal.
            </summary>
        </member>
        <member name="T:Csla.Security.CslaIdentityBase`1">
            <summary>
            Provides a base class to simplify creation of
            a .NET identity object for use with CslaPrincipal.
            </summary>
        </member>
        <member name="T:Csla.ReadOnlyBase`1">
            <summary>
            This is a base class from which readonly business classes
            can be derived.
            </summary>
            <remarks>
            This base class only supports data retrieve, not updating or
            deleting. Any business classes derived from this base class
            should only implement readonly properties.
            </remarks>
            <typeparam name="T">Type of the business object.</typeparam>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetIdValue">
            <summary>
            Override this method to return a unique identifying
            value for this object.
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.ToString">
            <summary>
            Returns a text representation of this object by
            returning the <see cref="M:Csla.ReadOnlyBase`1.GetIdValue"/> value
            in text form.
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.Initialize">
            <summary>
            Override this method to set up event handlers so user
            code in a partial class can respond to events raised by
            generated code.
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.AddBusinessRules">
            <summary>
            Override this method to add per-type
            authorization rules for your type's properties.
            </summary>
            <remarks>
            AddSharedAuthorizationRules is automatically called by CSLA .NET
            when your object should associate per-type authorization roles
            with its properties.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.CanReadProperty(Csla.Core.IPropertyInfo)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            calling property.
            </summary>
            <param name="property">Property to check.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.CanReadProperty(Csla.Core.IPropertyInfo,System.Boolean)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            calling property.
            </summary>
            <returns><see langword="true" /> if read is allowed.</returns>
            <param name="property">Property to read.</param>
            <param name="throwOnFalse">Indicates whether a negative
            result should cause an exception.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.CanReadProperty(System.String)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            specified property.
            </summary>
            <param name="propertyName">Name of the property to read.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.CanReadProperty(System.String,System.Boolean)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to read the
            specified property.
            </summary>
            <param name="propertyName">Name of the property to read.</param>
            <param name="throwOnFalse">Indicates whether a negative
            result should cause an exception.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.CanExecuteMethod(Csla.Core.IMemberInfo)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to execute
            the specified method.
            </summary>
            <param name="method">Method to execute.</param>
            <returns><see langword="true" /> if execute is allowed.</returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.CanExecuteMethod(Csla.Core.IMemberInfo,System.Boolean)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to execute
            the specified method.
            </summary>
            <returns><see langword="true" /> if execute is allowed.</returns>
            <param name="method">Method to execute.</param>
            <param name="throwOnFalse">Indicates whether a negative
            result should cause an exception.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.CanExecuteMethod(System.String)">
            <summary>
            Returns <see langword="true" /> if the user is allowed to execute
            the specified method.
            </summary>
            <param name="methodName">Name of the method to execute.</param>
            <returns><see langword="true" /> if execute is allowed.</returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetClone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>A new object containing the exact data of the original object.</returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.Clone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>
            A new object containing the exact data of the original object.
            </returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.DataPortal_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.DataPortal_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_xyz method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.DataPortal_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.Child_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.Child_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.Child_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            This method is called on a newly deserialized object
            after deserialization is complete.
            </summary>
            <param name="context">Serialization context object.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.RegisterProperty``1(System.Type,Csla.PropertyInfo{``0})">
            <summary>
            Indicates that the specified property belongs
            to the type.
            </summary>
            <typeparam name="P">
            Type of property.
            </typeparam>
            <param name="objectType">
            Type of object to which the property belongs.
            </param>
            <param name="info">
            PropertyInfo object for the property.
            </param>
            <returns>
            The provided IPropertyInfo object.
            </returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.RegisterProperty``1(Csla.PropertyInfo{``0})">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">
            Type of property.
            </typeparam>
            <param name="info">
            PropertyInfo object for the property.
            </param>
            <returns>
            The provided IPropertyInfo object.
            </returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <returns></returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <returns></returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,``0)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <param name="defaultValue">Default Value for the property</param>
            <returns></returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Csla.RelationshipTypes)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="relationship">Relationship with
            referenced object.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.RegisterProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,Csla.RelationshipTypes)">
            <summary>
            Indicates that the specified property belongs
            to the business object type.
            </summary>
            <typeparam name="P">Type of property</typeparam>
            <param name="propertyLambdaExpression">Property Expression</param>
            <param name="friendlyName">Friendly description for a property to be used in databinding</param>
            <param name="relationship">Relationship with
            referenced object.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.RegisterMethod(System.Type,Csla.Core.IMemberInfo)">
            <summary>
            Indicates that the specified method belongs
            to the type.
            </summary>
            <param name="objectType">
            Type of object to which the method belongs.
            </param>
            <param name="info">
            IMemberInfo object for the property.
            </param>
            <returns>
            The provided IMemberInfo object.
            </returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.RegisterMethod(System.Type,System.String)">
            <summary>
            Indicates that the specified method belongs
            to the type.
            </summary>
            <param name="objectType">
            Type of object to which the method belongs.
            </param>
            <param name="methodName">
            Name of the method.
            </param>
            <returns>
            The provided IMemberInfo object.
            </returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.RegisterMethod(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Registers the method.
            </summary>
            <param name="methodLambdaExpression">The method lambda expression.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetProperty``1(System.String,``0,``0)">
            <summary>
            Gets a property's value, first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyName">
            The name of the property.</param>
            <param name="defaultValue">
            Value to be returned if the user is not
            authorized to read the property.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetProperty``1(System.String,``0,``0,Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value, first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyName">
            The name of the property.</param>
            <param name="defaultValue">
            Value to be returned if the user is not
            authorized to read the property.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetProperty``1(Csla.PropertyInfo{``0},``0)">
            <summary>
            Gets a property's value, first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetProperty``1(Csla.PropertyInfo{``0},``0,``0,Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value, first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="defaultValue">
            Value to be returned if the user is not
            authorized to read the property.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetPropertyConvert``2(Csla.PropertyInfo{``0},``0)">
            <summary>
            Gets a property's value as 
            a specified type, first checking authorization.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetPropertyConvert``2(Csla.PropertyInfo{``0},``0,Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value as a specified type, 
            first checking authorization.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="field">
            The backing field for the property.</param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetProperty``1(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's managed field value, 
            first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetPropertyConvert``2(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's value from the list of 
            managed field values, first checking authorization,
            and converting the value to an appropriate type.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetPropertyConvert``2(Csla.PropertyInfo{``0},Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value from the list of 
            managed field values, first checking authorization,
            and converting the value to an appropriate type.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetProperty``1(Csla.PropertyInfo{``0},Csla.Security.NoAccessBehavior)">
            <summary>
            Gets a property's value as a specified type, 
            first checking authorization.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="noAccess">
            True if an exception should be thrown when the
            user is not authorized to read this property.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.GetProperty(Csla.Core.IPropertyInfo)">
            <summary>
            Gets a property's value as a specified type.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            If the user is not authorized to read the property
            value, the defaultValue value is returned as a
            result.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.ReadPropertyConvert``2(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's value from the list of 
            managed field values, converting the 
            value to an appropriate type.
            </summary>
            <typeparam name="F">
            Type of the field.
            </typeparam>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.ReadProperty``1(Csla.PropertyInfo{``0})">
            <summary>
            Gets a property's value as a specified type.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.ReadProperty(Csla.Core.IPropertyInfo)">
            <summary>
            Gets a property's value as a specified type.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.LoadPropertyConvert``2(Csla.PropertyInfo{``0},``1)">
            <summary>
            Loads a property's managed field with the 
            supplied value calling PropertyHasChanged 
            if the value does change.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.LoadProperty``1(Csla.PropertyInfo{``0},``0)">
            <summary>
            Loads a property's managed field with the 
            supplied value calling PropertyHasChanged 
            if the value does change.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.LoadProperty(Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            Loads a property's managed field with the 
            supplied value calling PropertyHasChanged 
            if the value does change.
            </summary>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.LoadPropertyAsync``1(Csla.PropertyInfo{``0},System.Threading.Tasks.Task{``0})">
            <summary>
            Load a property from an async method. 
            </summary>
            <typeparam name="R"></typeparam>
            <param name="property"></param>
            <param name="factory"></param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.MarkBusy">
            <summary>
            Marks the object as being busy (it is
            running an async operation).
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.MarkIdle">
            <summary>
            Marks the object as being not busy
            (it is not running an async operation).
            </summary>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.OnBusyChanged(System.String,System.Boolean)">
            <summary>
            Raises the BusyChanged event.
            </summary>
            <param name="propertyName">Name of the property
            that has changed.</param>
            <param name="busy">New busy value.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.OnBusyChanged(Csla.Core.BusyChangedEventArgs)">
            <summary>
            Raises the BusyChanged event.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.OnGetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to insert your child object
            references into the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.OnSetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Override this method to retrieve your child object
            references from the MobileFormatter serialzation stream.
            </summary>
            <param name="info">
            Object containing the data to serialize.
            </param>
            <param name="formatter">
            Reference to MobileFormatter instance. Use this to
            convert child references to/from reference id values.
            </param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.OnUnhandledAsyncException(Csla.Core.ErrorEventArgs)">
            <summary>
            Raises the UnhandledAsyncException event.
            </summary>
            <param name="error">Error arguments.</param>
        </member>
        <member name="M:Csla.ReadOnlyBase`1.OnUnhandledAsyncException(System.Object,System.Exception)">
            <summary>
            Raises the UnhandledAsyncException event.
            </summary>
            <param name="originalSender">Original sender of the
            event.</param>
            <param name="error">Execption that occurred.</param>
        </member>
        <member name="P:Csla.ReadOnlyBase`1.BusinessRules">
            <summary>
            Provides access to the broken rules functionality.
            </summary>
            <remarks>
            This property is used within your business logic so you can
            easily call the AddRule() method to associate business
            rules with your object's properties.
            </remarks>
        </member>
        <member name="P:Csla.ReadOnlyBase`1.FieldManager">
            <summary>
            Gets the PropertyManager object for this
            business object.
            </summary>
        </member>
        <member name="P:Csla.ReadOnlyBase`1.IsBusy">
            <summary>
            Gets a value indicating whether this
            object or any of its child objects are
            running an async operation.
            </summary>
        </member>
        <member name="P:Csla.ReadOnlyBase`1.IsSelfBusy">
            <summary>
            Gets a value indicating whether this
            object is
            running an async operation.
            </summary>
        </member>
        <member name="E:Csla.ReadOnlyBase`1.BusyChanged">
            <summary>
            Event raised when the IsBusy property value
            has changed.
            </summary>
        </member>
        <member name="E:Csla.ReadOnlyBase`1.UnhandledAsyncException">
            <summary>
            Event raised when an exception occurs on a background
            thread during an asynchronous operation.
            </summary>
        </member>
        <member name="M:Csla.Security.CslaIdentityBase`1.UnauthenticatedIdentity">
            <summary>
            Creates an instance of the class.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Csla.Security.CslaIdentityBase`1.RolesProperty">
            <summary>
            Property info for Roles property
            </summary>
        </member>
        <member name="F:Csla.Security.CslaIdentityBase`1.AuthenticationTypeProperty">
            <summary>
            Property info for Authentication property
            </summary>
        </member>
        <member name="F:Csla.Security.CslaIdentityBase`1.IsAuthenticatedProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Csla.Security.CslaIdentityBase`1.NameProperty">
            <summary>
            Property info for Name property
            </summary>
        </member>
        <member name="P:Csla.Security.CslaIdentityBase`1.Roles">
            <summary>
            Gets or sets the list of roles for this user.
            </summary>
        </member>
        <member name="P:Csla.Security.CslaIdentityBase`1.AuthenticationType">
            <summary>
            Gets the authentication type for this identity.
            </summary>
        </member>
        <member name="P:Csla.Security.CslaIdentityBase`1.IsAuthenticated">
            <summary>
            Gets a value indicating whether this identity represents
            an authenticated user.
            </summary>
        </member>
        <member name="P:Csla.Security.CslaIdentityBase`1.Name">
            <summary>
            Gets the username value.
            </summary>
        </member>
        <member name="M:Csla.Security.CslaIdentity.GetCslaIdentity``1(System.EventHandler{Csla.DataPortalResult{``0}},System.Object)">
            <summary>
            Retrieves an instance of the identity
            object.
            </summary>
            <typeparam name="T">
            Type of object.
            </typeparam>
            <param name="completed">
            Method called when the operation is
            complete.
            </param>
            <param name="criteria">
            Criteria object for the query.
            </param>
        </member>
        <member name="T:Csla.Security.MembershipIdentity">
            <summary>
            Implements a .NET identity object that automatically
            authenticates against the ASP.NET membership provider.
            </summary>
        </member>
        <member name="M:Csla.Security.MembershipIdentity.#ctor">
            <summary>
            Creates an instance of the class.
            </summary>
        </member>
        <member name="M:Csla.Security.MembershipIdentity.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method invoked when the object is deserialized.
            </summary>
        </member>
        <member name="M:Csla.Security.MembershipIdentity.GetMembershipIdentity(System.String,System.String,System.EventHandler{Csla.DataPortalResult{Csla.Security.MembershipIdentity}})">
            <summary>
            Gets a MembershipIdentity object by loading the
            object with membership data from the server.
            </summary>
            <param name="completed">Callback handler for async operation</param>
            <param name="userName">Username to validate on server.</param>
            <param name="password">Password to validate on server.</param>
        </member>
        <member name="M:Csla.Security.MembershipIdentity.GetMembershipIdentity``1(System.String,System.String,System.EventHandler{Csla.DataPortalResult{``0}})">
            <summary>
            Gets a MembershipIdentity object by loading the
            object with membership data from the server.
            </summary>
            <typeparam name="T">Type of object (subclass) to retrieve</typeparam>
            <param name="completed">Callback handler for async operation</param>
            <param name="userName">Username to validate on server.</param>
            <param name="password">Password to validate on server.</param>
        </member>
        <member name="F:Csla.Security.MembershipIdentity.RolesProperty">
            <summary>
            Gets or sets a list of roles for this user.
            </summary>
        </member>
        <member name="F:Csla.Security.MembershipIdentity.AuthenticationTypeProperty">
            <summary>
            Gets the authentication type for this identity.
            </summary>
        </member>
        <member name="F:Csla.Security.MembershipIdentity.IsAuthenticatedProperty">
            <summary>
            Gets a value indicating whether this identity represents
            an authenticated user.
            </summary>
        </member>
        <member name="F:Csla.Security.MembershipIdentity.NameProperty">
            <summary>
            Gets the username value.
            </summary>
        </member>
        <member name="M:Csla.Security.MembershipIdentity.LoadCustomData">
            <summary>
            Override this method in a subclass to load custom
            data beyond the automatically loaded values from
            the membership and role providers.
            </summary>
        </member>
        <member name="P:Csla.Security.MembershipIdentity.Roles">
            <summary>
            Gets or sets a list of roles for this user.
            </summary>
        </member>
        <member name="P:Csla.Security.MembershipIdentity.AuthenticationType">
            <summary>
            Gets the authentication type for this identity.
            </summary>
        </member>
        <member name="P:Csla.Security.MembershipIdentity.IsAuthenticated">
            <summary>
            Gets a value indicating whether this identity represents
            an authenticated user.
            </summary>
        </member>
        <member name="P:Csla.Security.MembershipIdentity.Name">
            <summary>
            Gets the username value.
            </summary>
        </member>
        <member name="T:Csla.Security.MembershipIdentity.Criteria">
            <summary>
            Criteria object containing the user credentials
            to be authenticated.
            </summary>
        </member>
        <member name="M:Csla.Security.MembershipIdentity.Criteria.#ctor(System.String,System.String,System.Type)">
            <summary>
            Creates an instance of the class.
            </summary>
            <param name="name">Username.</param>
            <param name="password">Password.</param>
            <param name="membershipIdentityType">Membership identity type.</param>
        </member>
        <member name="M:Csla.Security.MembershipIdentity.Criteria.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to get custom field values
            from the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="mode">Serialization mode.</param>
        </member>
        <member name="M:Csla.Security.MembershipIdentity.Criteria.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to set custom field values
            into the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="mode">Serialization mode.</param>
        </member>
        <member name="P:Csla.Security.MembershipIdentity.Criteria.Name">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:Csla.Security.MembershipIdentity.Criteria.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:Csla.Security.MembershipIdentity.Criteria.MembershipIdentityType">
            <summary>
            Gets or sets the membership identity type.
            </summary>
        </member>
        <member name="T:Csla.Security.NoAccessBehavior">
            <summary>
            Options available for handling no
            access to a property due to
            authorization rules.
            </summary>
        </member>
        <member name="F:Csla.Security.NoAccessBehavior.SuppressException">
            <summary>
            Suppress exceptions.
            </summary>
        </member>
        <member name="F:Csla.Security.NoAccessBehavior.ThrowException">
            <summary>
            Throw security exception.
            </summary>
        </member>
        <member name="T:Csla.Security.UnauthenticatedIdentity">
            <summary>
            Implementation of a .NET identity object representing
            an unauthenticated user. Used by the
            UnauthenticatedPrincipal class.
            </summary>
        </member>
        <member name="M:Csla.Security.UnauthenticatedIdentity.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Security.UnauthenticatedIdentity.Initialize">
            <summary>
            Initialize the object.
            </summary>
        </member>
        <member name="T:Csla.Security.UnauthenticatedPrincipal">
            <summary>
            Implementation of a .NET principal object that represents
            an unauthenticated user. Contains an UnauthenticatedIdentity
            object.
            </summary>
        </member>
        <member name="M:Csla.Security.UnauthenticatedPrincipal.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Security.UnauthenticatedPrincipal.IsInRole(System.String)">
            <summary>
            Returns a value indicating whether the user is in the
            specified role.
            </summary>
            <param name="role">Role name.</param>
            <returns></returns>
        </member>
        <member name="T:Csla.Security.UsernameCriteria">
            <summary>
            Criteria class for passing a
            username/password pair to a
            custom identity class.
            </summary>
        </member>
        <member name="F:Csla.Security.UsernameCriteria.UsernameProperty">
            <summary>
            Username property definition.
            </summary>
        </member>
        <member name="F:Csla.Security.UsernameCriteria.PasswordProperty">
            <summary>
            Password property definition.
            </summary>
        </member>
        <member name="M:Csla.Security.UsernameCriteria.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the object.
            </summary>
            <param name="username">
            Username value.
            </param>
            <param name="password">
            Password value.
            </param>
        </member>
        <member name="M:Csla.Security.UsernameCriteria.#ctor">
            <summary>
            Creates a new instance of the object.
            </summary>
        </member>
        <member name="P:Csla.Security.UsernameCriteria.Username">
            <summary>
            Username property definition.
            </summary>
        </member>
        <member name="P:Csla.Security.UsernameCriteria.Password">
            <summary>
            Gets the password.
            </summary>
        </member>
        <member name="T:Csla.Serialization.ISerializationFormatter">
            <summary>
            Defines an object that can serialize and deserialize
            object graphs.
            </summary>
        </member>
        <member name="M:Csla.Serialization.ISerializationFormatter.Deserialize(System.IO.Stream)">
            <summary>
            Converts a serialization stream into an
            object graph.
            </summary>
            <param name="serializationStream">
            Byte stream containing the serialized data.</param>
            <returns>A deserialized object graph.</returns>
        </member>
        <member name="M:Csla.Serialization.ISerializationFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Converts an object graph into a byte stream.
            </summary>
            <param name="serializationStream">
            Stream that will contain the the serialized data.</param>
            <param name="graph">Object graph to be serialized.</param>
        </member>
        <member name="T:Csla.Serialization.Mobile.MobileFormatter">
            <summary>
            Serializes and deserializes objects
            at the field level. A Silverlight-
            compatible facsimile of the
            BinaryFormatter or NetDataContractSerializer.
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serialize an object graph into XML.
            </summary>
            <param name="serializationStream">
            Stream to which the serialized data
            will be written.
            </param>
            <param name="graph">
            Root object of the object graph
            to serialize.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.SerializeAsDTO(System.Object)">
            <summary>
            Serialize an object graph into DTO.
            </summary>
            <param name="graph">
            Root object of the object graph
            to serialize.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.ConvertEnumsToIntegers">
            <summary>
            <para>
            Converts any enum values in the <see cref="T:Csla.Serialization.Mobile.SerializationInfo"/> objects to
            integer representations. Normally, <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> requires
            all non-standard primitive types to be provided to it's constructor both upon
            serialization and deserialization. Since there is no way of knowing what enum
            values are being deserialized, there is no way to supply the types to the constructor
            at the time of deserialization.
            </para>
            <para>
            Instead we convert the enum values to integers prior to serialization and then back
            to proper enum objects after deserialization.
            </para>
            </summary>
            <seealso cref="M:Csla.Serialization.Mobile.MobileFormatter.ConvertEnumsFromIntegers(Csla.Serialization.Mobile.SerializationInfo)"/>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.SerializeObject(System.Object)">
            <summary>
            Serializes an object into a SerializationInfo object.
            </summary>
            <param name="obj">Object to be serialized.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize an object from XML.
            </summary>
            <param name="serializationStream">
            Stream containing the serialized XML
            data.
            </param>
            <returns></returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.DeserializeAsDTO(System.Collections.Generic.List{Csla.Serialization.Mobile.SerializationInfo})">
             <summary>
             Deserialize an object from DTO graph.
             </summary>
            <param name="deserialized">DTO grap to deserialize</param>
             <returns></returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.ConvertEnumsFromIntegers(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Converts any enum values in the <see cref="T:Csla.Serialization.Mobile.SerializationInfo"/> object from their
            integer representations to normal enum objects.
            </summary>
            <seealso cref="M:Csla.Serialization.Mobile.MobileFormatter.ConvertEnumsToIntegers"/>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.GetObject(System.Int32)">
            <summary>
            Gets a deserialized object based on the object's
            reference id within the serialization stream.
            </summary>
            <param name="referenceId">Id of object in stream.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.Serialize(System.Object)">
            <summary>
            Serializes the object into a byte array.
            </summary>
            <param name="obj">
            The object to be serialized, which must implement
            IMobileObject.
            </param>
            <returns></returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.SerializeToDTO(System.Object)">
            <summary>
            Serializes the object into a DTO.
            </summary>
            <param name="obj">
            The object to be serialized, which must implement
            IMobileObject.
            </param>
            <returns></returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.DeserializeFromDTO(System.Collections.Generic.List{Csla.Serialization.Mobile.SerializationInfo})">
            <summary>
            Serializes an object from a DTO graph
            </summary>
            <param name="serialized">DTO Graph to deserialize</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.Deserialize(System.Byte[])">
            <summary>
            Deserializes a byte stream into an object.
            </summary>
            <param name="data">
            Byte array containing the object's serialized
            data.
            </param>
            <returns>
            An object containing the data from the
            byte stream. The object must implement
            IMobileObject to be deserialized.
            </returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.MobileFormatter.Deserialize(System.Collections.Generic.List{Csla.Serialization.Mobile.SerializationInfo})">
            <summary>
            Deserializes a byte stream into an object.
            </summary>
            <param name="data">
            DTO containing the object's serialized
            data.
            </param>
            <returns>
            An object containing the data from the
            byte stream. The object must implement
            IMobileObject to be deserialized.
            </returns>
        </member>
        <member name="T:Csla.Serialization.Mobile.NullPlaceholder">
            <summary>
            Placeholder for null child objects.
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.NullPlaceholder.#ctor">
            <summary>
            Creates an instance of the type.
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.NullPlaceholder.GetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Method called by MobileFormatter when an object
            should serialize its data. The data should be
            serialized into the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object to contain the serialized data.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.NullPlaceholder.GetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Method called by MobileFormatter when an object
            should serialize its child references. The data should be
            serialized into the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object to contain the serialized data.
            </param>
            <param name="formatter">
            Reference to the formatter performing the serialization.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.NullPlaceholder.SetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Method called by MobileFormatter when an object
            should be deserialized. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.NullPlaceholder.SetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Method called by MobileFormatter when an object
            should deserialize its child references. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
            <param name="formatter">
            Reference to the formatter performing the deserialization.
            </param>
        </member>
        <member name="T:Csla.Serialization.Mobile.ReferenceComparer`1">
            <summary>
            Implements an equality comparer for <see cref="T:Csla.Serialization.Mobile.IMobileObject"/> that compares
            the objects only on the basis is the reference value.
            </summary>
            <typeparam name="T">Type of objects to compare.</typeparam>
        </member>
        <member name="M:Csla.Serialization.Mobile.ReferenceComparer`1.Equals(`0,`0)">
            <summary>
            Determines if the two objects are reference-equal.
            </summary>
            <param name="x">First object.</param>
            <param name="y">Second object.</param>
        </member>
        <member name="M:Csla.Serialization.Mobile.ReferenceComparer`1.GetHashCode(`0)">
            <summary>
            Gets the hash code value for the object.
            </summary>
            <param name="obj">Object reference.</param>
        </member>
        <member name="T:Csla.Serialization.Mobile.SerializationInfo">
            <summary>
            Object containing the serialization
            data for a specific object.
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.AddValue(System.String,System.Object)">
            <summary>
            Adds a value to the serialization stream.
            </summary>
            <param name="name">
            Name of the field.
            </param>
            <param name="value">
            Value of the field.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.AddValue(System.String,System.Object,System.Boolean)">
            <summary>
            Adds a value to the list of fields.
            </summary>
            <param name="name">
            Name of the field.
            </param>
            <param name="value">
            Value of the field.
            </param>
            <param name="isDirty">
            Flag indicating whether the value is dirty.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.AddValue(System.String,System.Object,System.Boolean,System.String)">
            <summary>
            Adds a value to the list of fields.
            </summary>
            <param name="name">
            Name of the field.
            </param>
            <param name="value">
            Value of the field.
            </param>
            <param name="isDirty">
            Flag indicating whether the value is dirty.
            </param>
            <param name="enumTypeName">
            Name of the enumeration
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.GetValue``1(System.String)">
            <summary>
            Gets a value from the list of fields.
            </summary>
            <typeparam name="T">
            Type to which the value should be coerced.
            </typeparam>
            <param name="name">
            Name of the field.
            </param>
            <returns></returns>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.AddChild(System.String,System.Int32)">
            <summary>
            Adds a child to the list of child references.
            </summary>
            <param name="name">
            Name of the field.
            </param>
            <param name="referenceId">
            Reference id for the child object.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.AddChild(System.String,System.Int32,System.Boolean)">
            <summary>
            Adds a child to the list of child references.
            </summary>
            <param name="name">
            Name of the field.
            </param>
            <param name="referenceId">
            Reference id for the child object.
            </param>
            <param name="isDirty">
            Flag indicating whether the child is dirty.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.GetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Method called by MobileFormatter when an object
            should serialize its data. The data should be
            serialized into the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object to contain the serialized data.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.GetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Method called by MobileFormatter when an object
            should serialize its child references. The data should be
            serialized into the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object to contain the serialized data.
            </param>
            <param name="formatter">
            Reference to the formatter performing the serialization.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.SetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Method called by MobileFormatter when an object
            should be deserialized. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.SetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Method called by MobileFormatter when an object
            should deserialize its child references. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
            <param name="formatter">
            Reference to the formatter performing the deserialization.
            </param>
        </member>
        <member name="P:Csla.Serialization.Mobile.SerializationInfo.Children">
            <summary>
            Dictionary containing child reference data.
            </summary>
        </member>
        <member name="P:Csla.Serialization.Mobile.SerializationInfo.Values">
            <summary>
            Dictionary containg field data.
            </summary>
        </member>
        <member name="P:Csla.Serialization.Mobile.SerializationInfo.ReferenceId">
            <summary>
            Reference number for this object.
            </summary>
        </member>
        <member name="P:Csla.Serialization.Mobile.SerializationInfo.TypeName">
            <summary>
            Assembly-qualified type name of the
            object being serialized.
            </summary>
        </member>
        <member name="T:Csla.Serialization.Mobile.SerializationInfo.FieldData">
            <summary>
            Object that contains information about
            a single field.
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.FieldData.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.FieldData.GetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Gets state information.
            </summary>
            <param name="info">Serialization context.</param>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.FieldData.GetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Gets child serialization information.
            </summary>
            <param name="info">Serialization context.</param>
            <param name="formatter">Serializer instance.</param>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.FieldData.SetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Sets state information.
            </summary>
            <param name="info">Serialization context.</param>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.FieldData.SetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Sets child serialization information.
            </summary>
            <param name="info">Serialization context.</param>
            <param name="formatter">Serializer instance.</param>
        </member>
        <member name="P:Csla.Serialization.Mobile.SerializationInfo.FieldData.Value">
            <summary>
            Field value.
            </summary>
        </member>
        <member name="P:Csla.Serialization.Mobile.SerializationInfo.FieldData.EnumTypeName">
            <summary>
            If non-null, indicates that the value is a integer value representing the
            specified enum type. Upon deserialization, the integer will be converted back
            to the enum type.
            </summary>
        </member>
        <member name="P:Csla.Serialization.Mobile.SerializationInfo.FieldData.IsDirty">
            <summary>
            Indicates whether the field is dirty.
            </summary>
        </member>
        <member name="T:Csla.Serialization.Mobile.SerializationInfo.ChildData">
            <summary>
            Object that contains information about
            a single child reference.
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.ChildData.#ctor">
            <summary>
            Creates instance of object.
            </summary>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.ChildData.GetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Method called by MobileFormatter when an object
            should serialize its data. The data should be
            serialized into the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object to contain the serialized data.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.ChildData.GetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Method called by MobileFormatter when an object
            should serialize its child references. The data should be
            serialized into the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object to contain the serialized data.
            </param>
            <param name="formatter">
            Reference to the formatter performing the serialization.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.ChildData.SetState(Csla.Serialization.Mobile.SerializationInfo)">
            <summary>
            Method called by MobileFormatter when an object
            should be deserialized. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
        </member>
        <member name="M:Csla.Serialization.Mobile.SerializationInfo.ChildData.SetChildren(Csla.Serialization.Mobile.SerializationInfo,Csla.Serialization.Mobile.MobileFormatter)">
            <summary>
            Method called by MobileFormatter when an object
            should deserialize its child references. The data should be
            deserialized from the SerializationInfo parameter.
            </summary>
            <param name="info">
            Object containing the serialized data.
            </param>
            <param name="formatter">
            Reference to the formatter performing the deserialization.
            </param>
        </member>
        <member name="P:Csla.Serialization.Mobile.SerializationInfo.ChildData.ReferenceId">
            <summary>
            Reference number for the child.
            </summary>
        </member>
        <member name="P:Csla.Serialization.Mobile.SerializationInfo.ChildData.IsDirty">
            <summary>
            Indicates whether the child is dirty.
            </summary>
        </member>
        <member name="T:Csla.Serialization.SerializationFormatterFactory">
            <summary>
            Factory used to create the appropriate
            serialization formatter object based
            on the application configuration.
            </summary>
        </member>
        <member name="M:Csla.Serialization.SerializationFormatterFactory.GetFormatter">
            <summary>
            Creates a serialization formatter object.
            </summary>
        </member>
        <member name="T:Csla.Server.MobileFactoryAttribute">
            <summary>
            Specifies that the Silverlight WCF data portal
            should invoke a factory object rather than
            the business object.
            </summary>
        </member>
        <member name="M:Csla.Server.MobileFactoryAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            Assembly qualified type name of the factory object.
            </param>
            <remarks>
            The default names for the factory methods are
            Create(), Fetch(), Update() and Delete().
            </remarks>
        </member>
        <member name="M:Csla.Server.MobileFactoryAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            Assembly qualified type name of the factory object.
            </param>
            <param name="createMethod">
            Name of the method to call for a create operation.</param>
            <param name="fetchMethod">
            Name of the method to call for a fetch operation.
            </param>
        </member>
        <member name="M:Csla.Server.MobileFactoryAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            Assembly qualified type name of the factory object.
            </param>
            <param name="fetchMethod">
            Name of the method to call for a fetch operation.
            </param>
        </member>
        <member name="M:Csla.Server.MobileFactoryAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            Assembly qualified type name of the factory object.
            </param>
            <param name="createMethod">
            Name of the method to call for a create operation.</param>
            <param name="fetchMethod">
            Name of the method to call for a fetch operation.
            </param>
            <param name="updateMethod">
            Name of the method to call for a update operation.</param>
            <param name="deleteMethod">
            Name of the method to call for a delete operation.</param>
        </member>
        <member name="M:Csla.Server.MobileFactoryAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            Assembly qualified type name of the factory object.
            </param>
            <param name="createMethod">
            Name of the method to call for a create operation.</param>
            <param name="fetchMethod">
            Name of the method to call for a fetch operation.
            </param>
            <param name="updateMethod">
            Name of the method to call for a update operation.</param>
            <param name="deleteMethod">
            Name of the method to call for a delete operation.</param>
            <param name="executeMethod">
            Name of the method to call for a execute operation.</param>
        </member>
        <member name="P:Csla.Server.MobileFactoryAttribute.FactoryTypeName">
            <summary>
            Assembly qualified type name of the factory object.
            </summary>
            <remarks>
            Factory class must have a parameterless 
            default constructor.
            </remarks>
        </member>
        <member name="P:Csla.Server.MobileFactoryAttribute.CreateMethodName">
            <summary>
            Name of the method to call for a create operation.
            </summary>
            <remarks>
            The appropriate overload of this method will be
            invoked based on the parameters passed from the client.
            </remarks>
        </member>
        <member name="P:Csla.Server.MobileFactoryAttribute.FetchMethodName">
            <summary>
            Name of the method to call for a fetch operation.
            </summary>
            <remarks>
            The appropriate overload of this method will be
            invoked based on the parameters passed from the client.
            </remarks>
        </member>
        <member name="P:Csla.Server.MobileFactoryAttribute.UpdateMethodName">
            <summary>
            Name of the method to call for a update operation.
            </summary>
            <remarks>
            The appropriate overload of this method will be
            invoked based on the parameters passed from the client.
            </remarks>
        </member>
        <member name="P:Csla.Server.MobileFactoryAttribute.DeleteMethodName">
            <summary>
            Name of the method to call for a delete operation.
            </summary>
            <remarks>
            The appropriate overload of this method will be
            invoked based on the parameters passed from the client.
            </remarks>
        </member>
        <member name="P:Csla.Server.MobileFactoryAttribute.ExecuteMethodName">
            <summary>
            Name of the method to call for a execute operation.
            </summary>
            <remarks>
            The appropriate overload of this method will be
            invoked based on the parameters passed from the client.
            </remarks>
        </member>
        <member name="T:Csla.Server.ObjectFactory">
            <summary>
            Base class to be used when creating a data portal
            factory object.
            </summary>
        </member>
        <member name="M:Csla.Server.ObjectFactory.SetIsReadOnly(System.Object,System.Boolean)">
            <summary>
            Sets the IsReadOnly property on the specified
            object, if possible.
            </summary>
            <param name="obj">Object on which to operate.</param>
            <param name="value">New value for IsReadOnly.</param>
        </member>
        <member name="M:Csla.Server.ObjectFactory.CheckRules(System.Object)">
            <summary>
            Calls the ValidationRules.CheckRules() method 
            on the specified object, if possible.
            </summary>
            <param name="obj">
            Object on which to call the method.
            </param>
        </member>
        <member name="M:Csla.Server.ObjectFactory.MarkOld(System.Object)">
            <summary>
            Calls the MarkOld method on the specified
            object, if possible.
            </summary>
            <param name="obj">
            Object on which to call the method.
            </param>
        </member>
        <member name="M:Csla.Server.ObjectFactory.MarkNew(System.Object)">
            <summary>
            Calls the MarkNew method on the specified
            object, if possible.
            </summary>
            <param name="obj">
            Object on which to call the method.
            </param>
        </member>
        <member name="M:Csla.Server.ObjectFactory.MarkAsChild(System.Object)">
            <summary>
            Calls the MarkAsChild method on the specified
            object, if possible.
            </summary>
            <param name="obj">
            Object on which to call the method.
            </param>
        </member>
        <member name="M:Csla.Server.ObjectFactory.LoadProperty``1(System.Object,Csla.PropertyInfo{``0},``0)">
            <summary>
            Loads a property's managed field with the supplied value.
            </summary>
            <typeparam name="P">
            Type of the property.
            </typeparam>
            <param name="obj">
            Object on which to call the method. 
            </param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <param name="newValue">
            The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.Server.ObjectFactory.LoadProperty(System.Object,Csla.Core.IPropertyInfo,System.Object)">
            <summary>
            Loads a property's managed field with the supplied value.
            </summary>
            <param name="obj">Object on which to call the method.</param>
            <param name="propertyInfo">PropertyInfo object containing property metadata.</param>
            <param name="newValue">The new value for the property.</param>
            <remarks>
            No authorization checks occur when this method is called,
            and no PropertyChanging or PropertyChanged events are raised.
            Loading values does not cause validation rules to be
            invoked.
            </remarks>
        </member>
        <member name="M:Csla.Server.ObjectFactory.ReadProperty``1(System.Object,Csla.PropertyInfo{``0})">
            <summary>
            Reads a property's managed field value.
            </summary>
            <typeparam name="P"></typeparam>
            <param name="obj">
            Object on which to call the method. 
            </param>
            <param name="propertyInfo">
            PropertyInfo object containing property metadata.</param>
            <remarks>
            No authorization checks occur when this method is called.
            </remarks>
        </member>
        <member name="M:Csla.Server.ObjectFactory.ReadProperty(System.Object,Csla.Core.IPropertyInfo)">
            <summary>
            Reads a property's managed field value.
            </summary>
            <param name="obj">Object on which to call the method.</param>
            <param name="propertyInfo">PropertyInfo object containing property metadata.</param>
            <returns></returns>
            <remarks>
            No authorization checks occur when this method is called.
            </remarks>
        </member>
        <member name="M:Csla.Server.ObjectFactory.BypassPropertyChecks(Csla.Core.BusinessBase)">
            <summary>
            By wrapping this property inside Using block
            you can set property values on 
            <paramref name="businessObject">business object</paramref>
            without raising PropertyChanged events
            and checking user rights.
            </summary>
            <param name="businessObject">
            Object on with you would like to set property values
            </param>
            <returns>
            An instance of IDisposable object that allows
            bypassing of normal authorization checks during
            property setting.
            </returns>
        </member>
        <member name="M:Csla.Server.ObjectFactory.FieldExists(System.Object,Csla.Core.IPropertyInfo)">
            <summary>
            Gets a value indicating whether a managed field
            exists for the specified property.
            </summary>
            <param name="obj">Business object.</param>
            <param name="property">Property info object.</param>
        </member>
        <member name="M:Csla.Server.ObjectFactory.GetDeletedList``1(System.Object)">
            <summary>
            Gets the list of deleted items from 
            an editable collection.
            </summary>
            <typeparam name="C">Type of child objects in the colletion.</typeparam>
            <param name="obj">Editable collection object.</param>
        </member>
        <member name="T:Csla.Server.ObjectFactoryAttribute">
            <summary>
            Specifies that the data portal
            should invoke a factory object rather than
            the business object.
            </summary>
        </member>
        <member name="M:Csla.Server.ObjectFactoryAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            Assembly qualified type name of the factory object.
            </param>
            <remarks>
            The method names default to Create, Fetch,
            Update and Delete.
            </remarks>
        </member>
        <member name="M:Csla.Server.ObjectFactoryAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            Assembly qualified type name of the factory object.
            </param>
            <param name="createMethod">
            Name of the method to call for a create operation.</param>
            <param name="fetchMethod">
            Name of the method to call for a fetch operation.
            </param>
        </member>
        <member name="M:Csla.Server.ObjectFactoryAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            Assembly qualified type name of the factory object.
            </param>
            <param name="fetchMethod">
            Name of the method to call for a fetch operation.
            </param>
        </member>
        <member name="M:Csla.Server.ObjectFactoryAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            Assembly qualified type name of the factory object.
            </param>
            <param name="createMethod">
            Name of the method to call for a create operation.</param>
            <param name="fetchMethod">
            Name of the method to call for a fetch operation.
            </param>
            <param name="updateMethod">
            Name of the method to call for a update operation.</param>
            <param name="deleteMethod">
            Name of the method to call for a delete operation.</param>
        </member>
        <member name="M:Csla.Server.ObjectFactoryAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            Assembly qualified type name of the factory object.
            </param>
            <param name="createMethod">
            Name of the method to call for a create operation.
            </param>
            <param name="fetchMethod">
            Name of the method to call for a fetch operation.
            </param>
            <param name="updateMethod">
            Name of the method to call for a update operation.
            </param>
            <param name="deleteMethod">
            Name of the method to call for a delete operation.
            </param>
            <param name="executeMethod">
            Name of the method to call for a Execute operation.
            </param>
        </member>
        <member name="M:Csla.Server.ObjectFactoryAttribute.#ctor(System.Type)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            The type of factory class or interface.
            </param>
        </member>
        <member name="M:Csla.Server.ObjectFactoryAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            The type of factory class or interface.
            </param>
            <param name="fetchMethod">
            Name of the method to call for a fetch operation.
            </param>
        </member>
        <member name="M:Csla.Server.ObjectFactoryAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            The type of factory class or interface.
            </param>
            <param name="createMethod">
            Name of the method to call for a create operation.
            </param>
            <param name="fetchMethod">
            Name of the method to call for a fetch operation.
            </param>
        </member>
        <member name="M:Csla.Server.ObjectFactoryAttribute.#ctor(System.Type,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            The type of factory class or interface.
            </param>
            <param name="createMethod">
            Name of the method to call for a create operation.
            </param>
            <param name="fetchMethod">
            Name of the method to call for a fetch operation.
            </param>
            <param name="updateMethod">
            Name of the method to call for a update operation.
            </param>
            <param name="deleteMethod">
            Name of the method to call for a delete operation.
            </param>
        </member>
        <member name="M:Csla.Server.ObjectFactoryAttribute.#ctor(System.Type,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="factoryType">
            The type of factory class or interface.
            </param>
            <param name="createMethod">
            Name of the method to call for a create operation.
            </param>
            <param name="fetchMethod">
            Name of the method to call for a fetch operation.
            </param>
            <param name="updateMethod">
            Name of the method to call for a update operation.
            </param>
            <param name="deleteMethod">
            Name of the method to call for a delete operation.
            </param>
            <param name="executeMethod">
            Name of the method to call for a Execute operation.
            </param>
        </member>
        <member name="M:Csla.Server.ObjectFactoryAttribute.GetAssemblyQualifiedName(System.Type)">
            <summary>
            Gets the short version of assembly qualified name.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:Csla.Server.ObjectFactoryAttribute.FactoryTypeName">
            <summary>
            Assembly qualified type name of the factory object.
            </summary>
            <remarks>
            Factory class must have a parameterless 
            default constructor.
            </remarks>
        </member>
        <member name="P:Csla.Server.ObjectFactoryAttribute.CreateMethodName">
            <summary>
            Name of the method to call for a create operation.
            </summary>
            <remarks>
            The appropriate overload of this method will be
            invoked based on the parameters passed from the client.
            </remarks>
        </member>
        <member name="P:Csla.Server.ObjectFactoryAttribute.FetchMethodName">
            <summary>
            Name of the method to call for a fetch operation.
            </summary>
            <remarks>
            The appropriate overload of this method will be
            invoked based on the parameters passed from the client.
            </remarks>
        </member>
        <member name="P:Csla.Server.ObjectFactoryAttribute.UpdateMethodName">
            <summary>
            Name of the method to call for a update operation.
            </summary>
            <remarks>
            The appropriate overload of this method will be
            invoked based on the parameters passed from the client.
            </remarks>
        </member>
        <member name="P:Csla.Server.ObjectFactoryAttribute.DeleteMethodName">
            <summary>
            Name of the method to call for a delete operation.
            </summary>
            <remarks>
            The appropriate overload of this method will be
            invoked based on the parameters passed from the client.
            </remarks>
        </member>
        <member name="P:Csla.Server.ObjectFactoryAttribute.ExecuteMethodName">
            <summary>
            Name of the method to call for a Execute operation.
            </summary>
            <remarks>
            The appropriate overload of this method will be
            invoked based on the parameters passed from the client.
            </remarks>
        </member>
        <member name="T:Csla.Silverlight.Security.WindowsIdentity">
            <summary>
            Base class to simplify the retrieval of Windows identity
            information from a Windows server to a 
            CSLA .NET for Silverlight client.
            </summary>
        </member>
        <member name="M:Csla.Silverlight.Security.WindowsIdentity.#ctor">
            <summary>
            Creates an instance of the class.
            </summary>
        </member>
        <member name="F:Csla.Silverlight.Security.WindowsIdentity.RolesProperty">
            <summary>
            Property info for Roles property
            </summary>
        </member>
        <member name="M:Csla.Silverlight.Security.WindowsIdentity.IsInRole(System.String)">
            <summary>
            Returns a value indicating whether the current user
            is in the specified role.
            </summary>
            <param name="role">Role to check.</param>
            <returns></returns>
        </member>
        <member name="F:Csla.Silverlight.Security.WindowsIdentity.IsAuthenticatedProperty">
            <summary>
            Property info for IsAuthenticated property
            </summary>
        </member>
        <member name="F:Csla.Silverlight.Security.WindowsIdentity.NameProperty">
            <summary>
            Property info for Name property
            </summary>
        </member>
        <member name="P:Csla.Silverlight.Security.WindowsIdentity.Roles">
            <summary>
            Gets or sets the list of roles for this user.
            </summary>
        </member>
        <member name="P:Csla.Silverlight.Security.WindowsIdentity.AuthenticationType">
            <summary>
            Returns the authentication type for this identity.
            Always returns Windows.
            </summary>
        </member>
        <member name="P:Csla.Silverlight.Security.WindowsIdentity.IsAuthenticated">
            <summary>
            Returns a value indicating whether this identity
            represents an authenticated user.
            </summary>
        </member>
        <member name="P:Csla.Silverlight.Security.WindowsIdentity.Name">
            <summary>
            Returns the name of the user.
            </summary>
        </member>
        <member name="T:Csla.Threading.BackgroundWorker">
            <summary>
            A BackgroundWorker that wraps a System.ComponentModel.BackgroundWorkertransfers ApplicationContext.User, ClientContext, GlobalContext, CurrentCulture 
            and CurrentUICulture to the background thread.
            </summary>
        </member>
        <member name="M:Csla.Threading.BackgroundWorker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Csla.Threading.BackgroundWorker"/> class.
            </summary>
        </member>
        <member name="M:Csla.Threading.BackgroundWorker.CancelAsync">
            <summary>
            Request cancelation of async operation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
             <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation"/> is false.
            </exception>
            <PermissionSet>
             <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
            </PermissionSet>
        </member>
        <member name="M:Csla.Threading.BackgroundWorker.RunWorkerAsync">
            <summary>
            Starts execution of a background operation.
            </summary>
            <exception cref="T:System.InvalidOperationException">
             <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy"/> is true.
            </exception>
            <PermissionSet>
             <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
            </PermissionSet>
        </member>
        <member name="M:Csla.Threading.BackgroundWorker.RunWorkerAsync(System.Object)">
            <summary>
            Starts execution of a background operation.
            </summary>
            <param name="argument">A parameter for use by the background operation to be executed in the <see cref="E:System.ComponentModel.BackgroundWorker.DoWork"/> event handler.</param>
            <exception cref="T:System.InvalidOperationException">
             <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy"/> is true.
            </exception>
        </member>
        <member name="M:Csla.Threading.BackgroundWorker.InternalDoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Run the internal DoWork
            - set the thread context
            - run the background workers doWork events
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.DoWorkEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Csla.Threading.BackgroundWorker.InternalRunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
             <summary>
             Executes when the async operation is completed.
            
             Set the global context and then call the RunWorkerCompleted
             </summary>
             <param name="sender">The sender.</param>
             <param name="e">The <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Csla.Threading.BackgroundWorker.InternalProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.ProgressChangedEventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress"/> property is set to false.
            </exception>
        </member>
        <member name="M:Csla.Threading.BackgroundWorker.ReportProgress(System.Int32)">
            <summary>
            Calls report progress on the underlying background worker.
            </summary>
            <param name="percentProgress">The percentage, from 0 to 100, of the background operation that is complete.</param>
        </member>
        <member name="M:Csla.Threading.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
            <summary>
            Calls report progress on the background worker.
            </summary>
            <param name="percentProgress">The percent progress.</param>
            <param name="userState">User state object.</param>
        </member>
        <member name="E:Csla.Threading.BackgroundWorker.DoWork">
            <summary>
            Occurs when <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync"/> is called.
            </summary>
        </member>
        <member name="E:Csla.Threading.BackgroundWorker.RunWorkerCompleted">
            <summary>
            Occurs when the background operation has completed, has been canceled, or has raised an exception.
            </summary>
        </member>
        <member name="E:Csla.Threading.BackgroundWorker.ProgressChanged">
            <summary>
            Occurs when <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress"/> is called.
            </summary>
        </member>
        <member name="P:Csla.Threading.BackgroundWorker.IsBusy">
            <summary>
            Gets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker"/> is running an asynchronous operation.
            </summary>
            <value></value>
            <returns>true, if the <see cref="T:System.ComponentModel.BackgroundWorker"/> is running an asynchronous operation; otherwise, false.
            </returns>
        </member>
        <member name="P:Csla.Threading.BackgroundWorker.WorkerReportsProgress">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker"/> can report progress updates.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.ComponentModel.BackgroundWorker"/> supports progress updates; otherwise false. The default is false.
            </returns>
        </member>
        <member name="P:Csla.Threading.BackgroundWorker.WorkerSupportsCancellation">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.BackgroundWorker"/> supports asynchronous cancellation.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.ComponentModel.BackgroundWorker"/> supports cancellation; otherwise false. The default is false.
            </returns>
        </member>
        <member name="P:Csla.Threading.BackgroundWorker.CancellationPending">
            <summary>
            Gets a value indicating whether the application has requested cancellation of a background operation.
            </summary>
            <value></value>
            <returns>true if the application has requested cancellation of a background operation; otherwise, false. The default is false.
            </returns>
        </member>
        <member name="P:Csla.Threading.BackgroundWorker.GlobalContext">
            <summary>
            Gets a reference to the global context returned from
            the background thread and/or server.
            </summary>
        </member>
        <member name="T:Csla.PropertyInfo`1">
            <summary>
            Maintains metadata about a property.
            </summary>
            <typeparam name="T">
            Data type of the property.
            </typeparam>
        </member>
        <member name="M:Csla.PropertyInfo`1.#ctor">
            <summary>
            Private default constructor.
            </summary>
        </member>
        <member name="M:Csla.PropertyInfo`1.#ctor(System.String)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="name">Name of the property.</param>
        </member>
        <member name="M:Csla.PropertyInfo`1.#ctor(System.String,Csla.RelationshipTypes)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="relationship">Relationship with referenced object.</param>
        </member>
        <member name="M:Csla.PropertyInfo`1.#ctor(System.String,`0)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="defaultValue">
            Default value for the property.
            </param>
        </member>
        <member name="M:Csla.PropertyInfo`1.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
        </member>
        <member name="M:Csla.PropertyInfo`1.#ctor(System.String,System.String,`0)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
            <param name="defaultValue">
            Default value for the property.
            </param>
        </member>
        <member name="M:Csla.PropertyInfo`1.#ctor(System.String,System.String,Csla.RelationshipTypes)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
            <param name="relationship">Relationship with referenced object.</param>
        </member>
        <member name="M:Csla.PropertyInfo`1.#ctor(System.String,System.String,`0,Csla.RelationshipTypes)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="friendlyName">
            Friendly display name for the property.
            </param>
            <param name="defaultValue">
            Default value for the property.
            </param>
            <param name="relationship">Relationship with
            referenced object.</param>
        </member>
        <member name="M:Csla.PropertyInfo`1.NewFieldData(System.String)">
            <summary>
            Create and return a new IFieldData object
            to store an instance value for this
            property.
            </summary>
            <param name="name">
            Property name.
            </param>
        </member>
        <member name="P:Csla.PropertyInfo`1.Name">
            <summary>
            Gets the property name value.
            </summary>
        </member>
        <member name="P:Csla.PropertyInfo`1.Type">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="P:Csla.PropertyInfo`1.FriendlyName">
            <summary>
            Gets the friendly display name
            for the property.
            </summary>
            <remarks>
            If no friendly name was provided, the
            property name itself is returned as a
            result.
            </remarks>
        </member>
        <member name="P:Csla.PropertyInfo`1.DefaultValue">
            <summary>
            Gets the default initial value for the property.
            </summary>
            <remarks>
            This value is used to initialize the property's
            value, and is returned from a property get
            if the user is not authorized to 
            read the property.
            </remarks>
        </member>
        <member name="P:Csla.PropertyInfo`1.RelationshipType">
            <summary>
            Gets the relationship between the declaring object
            and the object reference in the property.
            </summary>
        </member>
        <member name="P:Csla.PropertyInfo`1.Csla#Core#IPropertyInfo#Index">
            <summary>
            Gets or sets the index position for the managed
            field storage behind the property. FOR
            INTERNAL CSLA .NET USE ONLY.
            </summary>
        </member>
        <member name="T:Csla.NameValueListBase`2">
            <summary>
            This is the base class from which readonly name/value
            collections should be derived.
            </summary>
            <typeparam name="K">Type of the key values.</typeparam>
            <typeparam name="V">Type of the values.</typeparam>
        </member>
        <member name="M:Csla.NameValueListBase`2.Value(`0)">
            <summary>
            Returns the value corresponding to the
            specified key.
            </summary>
            <param name="key">Key value for which to retrieve a value.</param>
        </member>
        <member name="M:Csla.NameValueListBase`2.Key(`1)">
            <summary>
            Returns the key corresponding to the
            first occurance of the specified value
            in the list.
            </summary>
            <param name="value">Value for which to retrieve the key.</param>
        </member>
        <member name="M:Csla.NameValueListBase`2.ContainsKey(`0)">
            <summary>
            Gets a value indicating whether the list contains the
            specified key.
            </summary>
            <param name="key">Key value for which to search.</param>
        </member>
        <member name="M:Csla.NameValueListBase`2.ContainsValue(`1)">
            <summary>
            Gets a value indicating whether the list contains the
            specified value.
            </summary>
            <param name="value">Value for which to search.</param>
        </member>
        <member name="M:Csla.NameValueListBase`2.GetItemByValue(`1)">
            <summary>
            Get the item for the first matching
            value in the collection.
            </summary>
            <param name="value">
            Value to search for in the list.
            </param>
            <returns>Item from the list.</returns>
        </member>
        <member name="M:Csla.NameValueListBase`2.GetItemByKey(`0)">
            <summary>
            Get the item for the first matching
            key in the collection.
            </summary>
            <param name="key">
            Key to search for in the list.
            </param>
            <returns>Item from the list.</returns>
        </member>
        <member name="M:Csla.NameValueListBase`2.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.NameValueListBase`2.Initialize">
            <summary>
            Override this method to set up event handlers so user
            code in a partial class can respond to events raised by
            generated code.
            </summary>
        </member>
        <member name="M:Csla.NameValueListBase`2.GetClone">
            <summary>
            Creates a clone of the object.
            </summary>
            <returns>A new object containing the exact data of the original object.</returns>
        </member>
        <member name="M:Csla.NameValueListBase`2.Clone">
            <summary>
            Creates a clone of the object.
            </summary>
        </member>
        <member name="M:Csla.NameValueListBase`2.DataPortal_Fetch(System.Object)">
            <summary>
            Override this method to allow retrieval of an existing business
            object based on data in the database.
            </summary>
            <param name="criteria">An object containing criteria values to identify the object.</param>
        </member>
        <member name="M:Csla.NameValueListBase`2.DataPortal_OnDataPortalInvoke(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal prior to calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.NameValueListBase`2.DataPortal_OnDataPortalInvokeComplete(Csla.DataPortalEventArgs)">
            <summary>
            Called by the server-side DataPortal after calling the 
            requested DataPortal_XYZ method.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
        </member>
        <member name="M:Csla.NameValueListBase`2.DataPortal_OnDataPortalException(Csla.DataPortalEventArgs,System.Exception)">
            <summary>
            Called by the server-side DataPortal if an exception
            occurs during data access.
            </summary>
            <param name="e">The DataPortalContext object passed to the DataPortal.</param>
            <param name="ex">The Exception thrown during data access.</param>
        </member>
        <member name="T:Csla.NameValueListBase`2.NameValuePair">
            <summary>
            Contains a key and value pair.
            </summary>
        </member>
        <member name="M:Csla.NameValueListBase`2.NameValuePair.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Csla.NameValueListBase`2.NameValuePair.#ctor(`0,`1)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Csla.NameValueListBase`2.NameValuePair.ToString">
            <summary>
            Returns a string representation of the
            value for this item.
            </summary>
        </member>
        <member name="M:Csla.NameValueListBase`2.NameValuePair.OnGetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to manually get custom field
            values from the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="mode">Serialization mode.</param>
        </member>
        <member name="M:Csla.NameValueListBase`2.NameValuePair.OnSetState(Csla.Serialization.Mobile.SerializationInfo,Csla.Core.StateMode)">
            <summary>
            Override this method to manually set custom field
            values into the serialization stream.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="mode">Serialization mode.</param>
        </member>
        <member name="P:Csla.NameValueListBase`2.NameValuePair.Key">
            <summary>
            The Key or Name value.
            </summary>
        </member>
        <member name="P:Csla.NameValueListBase`2.NameValuePair.Value">
            <summary>
            The Value corresponding to the key/name.
            </summary>
        </member>
        <member name="T:Csla.TransactionalTypes">
            <summary>
            Provides a list of possible transactional
            technologies to be used by the server-side
            DataPortal.
            </summary>
        </member>
        <member name="F:Csla.TransactionalTypes.Manual">
            <summary>
            Causes the server-side DataPortal to
            use no explicit transactional technology.
            </summary>
            <remarks>
            This option allows the business developer to
            implement their own transactions. Common options
            include ADO.NET transactions and System.Transactions
            TransactionScope.
            </remarks>
        </member>
        <member name="T:Csla.BrowsableAttribute">
            <summary>
            Placeholder for missing Browsable attribute from full .NET.
            </summary>
        </member>
        <member name="M:Csla.BrowsableAttribute.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Csla.CategoryAttribute">
            <summary>
            Placeholder for missing Category attribute from full .NET.
            </summary>
        </member>
        <member name="M:Csla.CategoryAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the attribute.
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Csla.Reflection.BindingFlags">
            <summary>
            Binding flags.
            </summary>
        </member>
        <member name="F:Csla.Reflection.BindingFlags.Public">
            <summary>
            Public members.
            </summary>
        </member>
        <member name="F:Csla.Reflection.BindingFlags.Instance">
            <summary>
            Instance members.
            </summary>
        </member>
        <member name="F:Csla.Reflection.BindingFlags.FlattenHierarchy">
            <summary>
            Flatten inheritance hierarchy.
            </summary>
        </member>
        <member name="F:Csla.Reflection.BindingFlags.NonPublic">
            <summary>
            Non-Public members.
            </summary>
        </member>
        <member name="F:Csla.Reflection.BindingFlags.Static">
            <summary>
            Static members.
            </summary>
        </member>
        <member name="F:Csla.Reflection.BindingFlags.DeclaredOnly">
            <summary>
            Declared members only.
            </summary>
        </member>
        <member name="T:Csla.Reflection.TypeExtensions">
            <summary>
            Extension and helper methods to help mitigate the
            changes between .NET Classic and .NET WinRT.
            </summary>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.GetConstructor(System.Type,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Gets the type's constructor.
            </summary>
            <param name="t"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.GetGenericArguments(System.Type)">
            <summary>
            Gets the type's generic arguments.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.GetMethod(System.Type,System.String,Csla.Reflection.BindingFlags,System.Object,System.Type[],System.Object)">
            <summary>
            Gets a method.
            </summary>
            <param name="t"></param>
            <param name="methodName"></param>
            <param name="flags"></param>
            <param name="p1"></param>
            <param name="parameterTypes"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.GetMethod(System.Type,System.String,Csla.Reflection.BindingFlags)">
            <summary>
            Gets a method.
            </summary>
            <param name="t"></param>
            <param name="methodName"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.GetMethod(System.Type,System.String)">
            <summary>
            Gets a method.
            </summary>
            <param name="t"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.GetField(System.Type,System.String,Csla.Reflection.BindingFlags)">
            <summary>
            Gets a field.
            </summary>
            <param name="t"></param>
            <param name="fieldName"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.GetFields(System.Type,Csla.Reflection.BindingFlags)">
            <summary>
            Gets the declared fields.
            </summary>
            <param name="t"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.Assembly(System.Type)">
            <summary>
            Gets the containing assembly.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.GetCustomAttribute(System.Type,System.Type)">
            <summary>
            Gets a custom attribute.
            </summary>
            <param name="t"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.GetCustomAttributes(System.Type,System.Type,System.Boolean)">
            <summary>
            Gets custom attributes.
            </summary>
            <param name="t"></param>
            <param name="attributeType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.IsSerializable(System.Type)">
            <summary>
            Gets a value indicating whether the type is
            serializable.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            Gets a value indicating whether the type
            is assignable to the target type.
            </summary>
            <param name="t"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.GetProperty(System.Type,System.String)">
            <summary>
            Gets a property.
            </summary>
            <param name="t"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.GetProperty(System.Type,System.String,Csla.Reflection.BindingFlags)">
            <summary>
            Gets a property.
            </summary>
            <param name="t"></param>
            <param name="propertyName"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.GetProperties(System.Type)">
            <summary>
            Gets declared properties.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.GetProperties(System.Type,Csla.Reflection.BindingFlags)">
            <summary>
            Gets declared properties.
            </summary>
            <param name="t"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.GetMethods(System.Type,Csla.Reflection.BindingFlags)">
            <summary>
            Gets declared methods.
            </summary>
            <param name="t"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.BaseType(System.Type)">
            <summary>
            Gets the base type.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.Name(System.Type)">
            <summary>
            Gets the type name.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.IsValueType(System.Type)">
            <summary>
            Gets a value indicating whether this is a value type.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.IsPrimitive(System.Type)">
            <summary>
            Gets a value indicating whether this is a primitive type.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.IsGenericType(System.Type)">
            <summary>
            Gets a value indicating whether this is a generic type.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.IsEnum(System.Type)">
            <summary>
            Gets a value indicating whether this is an enum.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.GetTypeCode(System.Type)">
            <summary>
            Gets the TypeCode value for a type.
            </summary>
            <param name="t">Type object.</param>
            <returns></returns>
        </member>
        <member name="M:Csla.Reflection.TypeExtensions.GetCustomAttributes(System.Reflection.PropertyInfo,System.Type,System.Boolean)">
            <summary>
            Gets custom attributes.
            </summary>
            <param name="pi"></param>
            <param name="attributeType"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="T:Csla.Reflection.TypeCode">
            <summary>
            Type codes
            </summary>
        </member>
        <member name="F:Csla.Reflection.TypeCode.Empty">
            <summary>
            Empty
            </summary>
        </member>
        <member name="F:Csla.Reflection.TypeCode.Object">
            <summary>
            Object
            </summary>
        </member>
        <member name="F:Csla.Reflection.TypeCode.DBNull">
            <summary>
            DBNull
            </summary>
        </member>
        <member name="F:Csla.Reflection.TypeCode.Boolean">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:Csla.Reflection.TypeCode.Char">
            <summary>
            Char
            </summary>
        </member>
        <member name="F:Csla.Reflection.TypeCode.SByte">
            <summary>
            SByte
            </summary>
        </member>
        <member name="F:Csla.Reflection.TypeCode.Byte">
            <summary>
            Byte
            </summary>
        </member>
        <member name="F:Csla.Reflection.TypeCode.Int16">
            <summary>
            Int16
            </summary>
        </member>
        <member name="F:Csla.Reflection.TypeCode.UInt16">
            <summary>
            UInt16
            </summary>
        </member>
        <member name="F:Csla.Reflection.TypeCode.Int32">
            <summary>
            Int32
            </summary>
        </member>
        <member name="F:Csla.Reflection.TypeCode.UInt32">
            <summary>
            UInt32
            </summary>
        </member>
        <member name="F:Csla.Reflection.TypeCode.Int64">
            <summary>
            Int64
            </summary>
        </member>
        <member name="F:Csla.Reflection.TypeCode.UInt64">
            <summary>
            UInt64
            </summary>
        </member>
        <member name="F:Csla.Reflection.TypeCode.Single">
            <summary>
            Single
            </summary>
        </member>
        <member name="F:Csla.Reflection.TypeCode.Double">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:Csla.Reflection.TypeCode.Decimal">
            <summary>
            Decimal
            </summary>
        </member>
        <member name="F:Csla.Reflection.TypeCode.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:Csla.Reflection.TypeCode.String">
            <summary>
            String
            </summary>
        </member>
        <member name="T:Csla.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ActionExtenderCloseConfirmation">
            <summary>
              Looks up a localized string similar to Are you sure you want to close?.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ActionExtenderDirtyWarningMessagePropertyDefault">
            <summary>
              Looks up a localized string similar to Object is currently in a dirty changed..
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ActionExtenderInvalidBindingSourceCast">
            <summary>
              Looks up a localized string similar to DataSource does not cast to a BindingSource.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ActionExtenderInvalidBusinessObjectBaseCast">
            <summary>
              Looks up a localized string similar to The underlying data source does not cast to a CSLA BusinessBase object.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ActionExtenderSourceMustBeBindingSource">
            <summary>
              Looks up a localized string similar to DataSource must be a BindingSource control instance.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ActionExtenderWarnOnCancelMessagePropertyDefault">
            <summary>
              Looks up a localized string similar to Are you sure you want to revert to the previous values?.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.AddNewCoreMustBeOverriden">
            <summary>
              Looks up a localized string similar to AddNewCore must be overridden.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.AuthenticationProviderDoesNotImplementIAuthorizeDataPortal">
            <summary>
              Looks up a localized string similar to Csla Authentication Provider specified does not implement IAuthorizeDataPortal.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.AuthorizationProviderNameNotSpecified">
            <summary>
              Looks up a localized string similar to Csla Authorization Provider App Setting name not specified.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.BindingSourceNotProvided">
            <summary>
              Looks up a localized string similar to A root binding source has not been provided..
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.BusinessPrincipalException">
            <summary>
              Looks up a localized string similar to Principal must be of type BusinessPrincipal, not.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.BusyObjectsMayNotBeMarkedBusy">
            <summary>
              Looks up a localized string similar to Objects that are marked busy may not be marked busy again.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.BusyObjectsMayNotBeSaved">
            <summary>
              Looks up a localized string similar to Objects that are marked busy may not be saved.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.CannotSerializeCollectionsNotOfIMobileObject">
            <summary>
              Looks up a localized string similar to Cannot serialize collections not of type IMobileObject.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ChangeInvalidException">
            <summary>
              Looks up a localized string similar to Changing an element is an invalid operation.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ChangeReadOnlyListInvalid">
            <summary>
              Looks up a localized string similar to Can not change a read-only list or collection.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ChildDeleteException">
            <summary>
              Looks up a localized string similar to Can not directly mark a child object for deletion - use its parent collection.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ClearInvalidException">
            <summary>
              Looks up a localized string similar to Clear is an invalid operation.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ClientQueryIsInvalid">
            <summary>
              Looks up a localized string similar to The client query is invalid:.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ConstructorsWithParametersNotSupported">
            <summary>
              Looks up a localized string similar to Constructor with parameters are not supported.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.CreateMethodNameNotSpecified">
            <summary>
              Looks up a localized string similar to Create method name not specified in MobileFactory attribute.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.CreateNotSupportedException">
            <summary>
              Looks up a localized string similar to Invalid operation - create not allowed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.CslaAuthenticationProviderNotSet">
            <summary>
              Looks up a localized string similar to Csla Authentication Provider not set!.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.DatabaseNameNotFound">
            <summary>
              Looks up a localized string similar to Database name not found in config file ({0}).
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.DefaultConstructor">
            <summary>
              Looks up a localized string similar to Default Constructor.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.DeleteMethodNameNotSpecified">
            <summary>
              Looks up a localized string similar to Delete method name not specified in MobileFactory attribute.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.DeleteNotSupportedException">
            <summary>
              Looks up a localized string similar to Invalid operation - delete not allowed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.EditLevelMismatchException">
            <summary>
              Looks up a localized string similar to Edit level mismatch in {0}.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ErrorReadingValueException">
            <summary>
              Looks up a localized string similar to Error reading value:.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ExceptionOccurredDuringSaveOperation">
            <summary>
              Looks up a localized string similar to An exception ocurred during the save operation.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ExecuteBadParams">
            <summary>
              Looks up a localized string similar to Method to be executed must have 0 or 2 parameters.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ExecuteBadTriggerEvent">
            <summary>
              Looks up a localized string similar to Trigger event has an unsupported signature.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ExecuteNotSupportedException">
            <summary>
              Looks up a localized string similar to Invalid operation - execute not allowed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.FactoryTypeNotFoundException">
            <summary>
              Looks up a localized string similar to Factory type or assembly could not be loaded ({0}).
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.Failed">
            <summary>
              Looks up a localized string similar to failed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.FailedOnServer">
            <summary>
              Looks up a localized string similar to failed on the server.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.FetchMethodNameNotSpecified">
            <summary>
              Looks up a localized string similar to Fetch method name not specified in MobileFactory attribute.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.FetchNotSupportedException">
            <summary>
              Looks up a localized string similar to Invalid operation - fetch not allowed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.FilterRequiredException">
            <summary>
              Looks up a localized string similar to Filter parameter and filter provider are required.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.IEditableCollectionRequiredException">
            <summary>
              Looks up a localized string similar to Target object must implement IEditableCollection.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.IManagePropertiesRequiredException">
            <summary>
              Looks up a localized string similar to Target object must implement IManageProperties.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.IndexedExpressionsMustBeClosed">
            <summary>
              Looks up a localized string similar to Indexed expressions must be closed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.InsertInvalidException">
            <summary>
              Looks up a localized string similar to Insert is an invalid operation.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.InsertNotSupportedException">
            <summary>
              Looks up a localized string similar to Invalid operation - insert not allowed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.RuleMessageRequired">
            <summary>
            Looks up a serialized string similar to Rule message is required
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ListItemNotAChildException">
            <summary>
              Looks up a localized string similar to List item must be marked as a child object.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.MaxValueRule">
            <summary>
              Looks up a localized string similar to {0} can not exceed {1}.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.MemberNotFoundException">
            <summary>
              Looks up a localized string similar to Member not found on object ({0}).
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.MethodCallFailed">
            <summary>
              Looks up a localized string similar to method call failed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.MethodExecuteNotAllowed">
            <summary>
              Looks up a localized string similar to Method execution not allowed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.MethodNotImplemented">
            <summary>
              Looks up a localized string similar to not implemented.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.MinValueRule">
            <summary>
              Looks up a localized string similar to {0} can not be less than {1}.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.MobileFormatterUnableToDeserialize">
            <summary>
              Looks up a localized string similar to The Type &apos;{0}&apos; was unable to be deserialized, double check that the assembly containing this class has the same name on the Client and Server and that it is referenced by your server application.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.MustImplementIMobileObject">
            <summary>
              Looks up a localized string similar to Type {0} must implement IMobileObject.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NavigatorProviderSetPriorToTriggerEvent">
            <summary>
              Looks up a localized string similar to Please set NavigatorProvider prior to TriggerEvent property..
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoApplyEditChildException">
            <summary>
              Looks up a localized string similar to ApplyEdit is not valid on a child object.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoBeginEditChildException">
            <summary>
              Looks up a localized string similar to BeginEdit is not valid on a child object.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoCancelEditChildException">
            <summary>
              Looks up a localized string similar to CancelEdit is not valid on a child object.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoDeleteRootException">
            <summary>
              Looks up a localized string similar to Invalid for root objects - use Delete instead.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoPrincipalAllowedException">
            <summary>
              Looks up a localized string similar to No principal object should be passed to DataPortal when using Windows integrated security.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoSaveChildException">
            <summary>
              Looks up a localized string similar to Can not directly save a child object.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoSaveEditingException">
            <summary>
              Looks up a localized string similar to Object is still being edited and can not be saved.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoSaveInvalidException">
            <summary>
              Looks up a localized string similar to Object is not valid and can not be saved.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoSuchFactoryMethod">
            <summary>
              Looks up a localized string similar to No such factory method:{0}.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoSuchMethod">
            <summary>
              Looks up a localized string similar to No such method {0}.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NoSuchValueExistsException">
            <summary>
              Looks up a localized string similar to No such value exists:.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.NothingNotValid">
            <summary>
              Looks up a localized string similar to Argument must not be Nothing.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ObjectNotNull">
            <summary>
              Looks up a localized string similar to Can not set property if data object is not null.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ObjectNotSerializableFormatted">
            <summary>
              Looks up a localized string similar to Object not serializable ({0}).
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ObjectRulesCannotSetPrimaryProperty">
            <summary>
              Looks up a localized string similar to Object rule can not have PrimaryPropery..
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ObjectTypeCouldNotBeLoaded">
            <summary>
              Looks up a localized string similar to Object type or assembly could not be loaded ({0}).
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PrivateFieldException">
            <summary>
              Looks up a localized string similar to Properties with private backing fields must be marked as RelationshipTypes.PrivateField.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PropertyCopyFailed">
            <summary>
              Looks up a localized string similar to Property copy failed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PropertyGetNotAllowed">
            <summary>
              Looks up a localized string similar to Property get not allowed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PropertyIsPrivateField">
            <summary>
              Looks up a localized string similar to Attempt to read/load private field property in managed properties..
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PropertyLoadException">
            <summary>
              Looks up a localized string similar to Property load or set failed for property {0} ({1}).
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PropertyNameDoesNotExist">
            <summary>
              Looks up a localized string similar to The specified property name &apos;{0}&apos; does not exist.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PropertyNotRegistered">
            <summary>
              Looks up a localized string similar to One or more properties are not registered for this type.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PropertyNameNotRegisteredException">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; not registered.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PropertyRegisterDuplicateNotAllowed">
            <summary>
              Looks up a localized string similar to Cannot register property {0}, a PropertyInfo with the same name already exists..
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PropertyRegisterNotAllowed">
            <summary>
              Looks up a localized string similar to Cannot register property {0} after containing type ({1}) has been instantiated.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PropertyRequiresIndexArguments">
            <summary>
              Looks up a localized string similar to This property requires {0} index arguments, {1} were provided.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PropertySetNotAllowed">
            <summary>
              Looks up a localized string similar to Property set not allowed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.RegExMatchRule">
            <summary>
              Looks up a localized string similar to {0} does not match regular expression.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.RemoveInvalidException">
            <summary>
              Looks up a localized string similar to Remove is an invalid operation.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.SmartDateT">
            <summary>
              Looks up a localized string similar to t.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.SmartDateToday">
            <summary>
              Looks up a localized string similar to today.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.SmartDateTom">
            <summary>
              Looks up a localized string similar to tom.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.SmartDateTomorrow">
            <summary>
              Looks up a localized string similar to tomorrow.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.SmartDateY">
            <summary>
              Looks up a localized string similar to y.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.SmartDateYesterday">
            <summary>
              Looks up a localized string similar to yesterday.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.SortedBindingListPropertyNameNotFound">
            <summary>
              Looks up a localized string similar to PropertyName &apos;{0}&apos; not found in list.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.SortingNotSupported">
            <summary>
              Looks up a localized string similar to Sorting not supported.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.StringMaxLengthRule">
            <summary>
              Looks up a localized string similar to {0} can not exceed {1} characters.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.StringMinLengthRule">
            <summary>
              Looks up a localized string similar to {0} must be at least {1} characters.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.StringRequiredRule">
            <summary>
              Looks up a localized string similar to {0} required.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.StringToDateException">
            <summary>
              Looks up a localized string similar to String value can not be converted to a date.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.TypeLoadException">
            <summary>
              Looks up a localized string similar to Failed to load type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.UpdateMethodNameNotSpecified">
            <summary>
              Looks up a localized string similar to Update method name not specified in MobileFactory attribute.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.UpdateNotSupportedException">
            <summary>
              Looks up a localized string similar to Invalid operation - update not allowed.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.UserNotAuthorizedException">
            <summary>
              Looks up a localized string similar to User not authorized to {0} object type {1}.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.ValueNotSmartDateException">
            <summary>
              Looks up a localized string similar to Value is not a SmartDate.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.Warning">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.PropertyNotInAffectedPropertiesException">
            <summary>
            Looks up a localized string.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.UnandledKNownTypeException">
            <summary>
            Looks up a localized string.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.BinaryWriterObjectSerializationException">
            <summary>
            Looks up a localized string.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.TaskOfObjectException">
            <summary>
            Looks up a localized string.
            </summary>
        </member>
        <member name="P:Csla.Properties.Resources.AsyncLoadException">
            <summary>
            Looks up a localized string.
            </summary>
        </member>
        <member name="T:System.ComponentModel.BackgroundWorker">
            <summary>
            Implementation of a BackgroundWorker using
            the async/await keywords.
            </summary>
        </member>
        <member name="M:System.ComponentModel.BackgroundWorker.#ctor">
            <summary>
            Creates a new instance of the type.
            </summary>
        </member>
        <member name="M:System.ComponentModel.BackgroundWorker.CancelAsync">
            <summary>
            Requests that the background task
            cancel its operation.
            </summary>
        </member>
        <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
            <summary>
            Call from the worker thread to report on progress.
            </summary>
            <param name="percentProgress">Percent complete.</param>
        </member>
        <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
            <summary>
            Call from the worker thread to report on progress.
            </summary>
            <param name="percentProgress">Percent complete.</param>
            <param name="userState">User state value.</param>
        </member>
        <member name="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Raise the RunWorkerCompleted event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
            <summary>
            Starts the background task by raising the DoWork event.
            </summary>
        </member>
        <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
            <summary>
            Starts the background task by raising the DoWork event.
            </summary>
            <param name="userState">User state value.</param>
        </member>
        <member name="P:System.ComponentModel.BackgroundWorker.CancellationPending">
            <summary>
            Gets a value indicating whether a cancel
            request is pending.
            </summary>
        </member>
        <member name="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
            <summary>
            Event raised on the UI thread to indicate that
            progress has changed.
            </summary>
        </member>
        <member name="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
            <summary>
            Gets or sets a value indicating whether the worker 
            reports progress.
            </summary>
        </member>
        <member name="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
            <summary>
            Gets or sets a value indicating whether the worker 
            supports cancellation.
            </summary>
        </member>
        <member name="P:System.ComponentModel.BackgroundWorker.IsBusy">
            <summary>
            Gets or sets a value indicating whether the worker 
            is currently executing.
            </summary>
        </member>
        <member name="E:System.ComponentModel.BackgroundWorker.DoWork">
            <summary>
            Event raised on a background thread when work is to be
            performed. The code handling this event should implement
            the background task.
            </summary>
        </member>
        <member name="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
            <summary>
            Event raised on the UI thread when work is complete.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DoWorkEventHandler">
            <summary>
            DoWork method definition.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:System.ComponentModel.DoWorkEventArgs">
            <summary>
            Event arguments passed to the DoWork event/method.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DoWorkEventArgs.#ctor">
            <summary>
            Creates an instance of the type.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)">
            <summary>
            Creates an instance of the type.
            </summary>
            <param name="argument">Argument passed to DoWork handler.</param>
        </member>
        <member name="P:System.ComponentModel.DoWorkEventArgs.Argument">
            <summary>
            Gets or sets the argument value passed into
            the DoWork handler.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DoWorkEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the
            operation was cancelled prior to completion.
            </summary>
        </member>
        <member name="P:System.ComponentModel.DoWorkEventArgs.Result">
            <summary>
            Gets or sets a value containing the result
            of the operation.
            </summary>
        </member>
        <member name="T:System.ComponentModel.RunWorkerCompletedEventHandler">
            <summary>
            RunWorkerCompleted method definition.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:System.ComponentModel.RunWorkerCompletedEventArgs">
            <summary>
            Event arguments passed to the RunWorkerCompleted handler.
            </summary>
        </member>
        <member name="M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor">
            <summary>
            Creates an instance of the type.
            </summary>
        </member>
        <member name="M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)">
            <summary>
            Creates an instance of the type.
            </summary>
            <param name="cancelled">Sets the cancelled value.</param>
            <param name="error">Sets the error value.</param>
            <param name="result">Sets the result value.</param>
        </member>
        <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.Error">
            <summary>
            Gets or sets a value containing any exception
            that terminated the background task.
            </summary>
        </member>
        <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result">
            <summary>
            Gets or sets a value containing the result
            of the operation.
            </summary>
        </member>
        <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.Cancelled">
            <summary>
            Gets or sets a value indicating whether the
            operation was cancelled prior to completion.
            </summary>
        </member>
    </members>
</doc>
