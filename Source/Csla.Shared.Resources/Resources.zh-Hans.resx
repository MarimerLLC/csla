<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClearInvalidException" xml:space="preserve">
    <value>清除属非法操作</value>
  </data>
  <data name="InsertInvalidException" xml:space="preserve">
    <value>插入属非法操作</value>
  </data>
  <data name="RemoveInvalidException" xml:space="preserve">
    <value>删除属无效操作</value>
  </data>
  <data name="ChangeInvalidException" xml:space="preserve">
    <value>改变一个元素属非法操作</value>
  </data>
  <data name="ChildDeleteException" xml:space="preserve">
    <value>不能直接将子对象标记为删除对象 – 请通过其 Parent 集合</value>
  </data>
  <data name="NoDeleteRootException" xml:space="preserve">
    <value>不能用于源对象 – 请用删除</value>
  </data>
  <data name="NoSaveChildException" xml:space="preserve">
    <value>不能直接保存子对象</value>
  </data>
  <data name="NoSaveEditingException" xml:space="preserve">
    <value>不能保存, 因为对象还在修改状态中</value>
  </data>
  <data name="NoSaveInvalidException" xml:space="preserve">
    <value>对象含无效值, 因此不能保存</value>
  </data>
  <data name="CreateNotSupportedException" xml:space="preserve">
    <value>非法操作 – 不允许创建</value>
  </data>
  <data name="FetchNotSupportedException" xml:space="preserve">
    <value>非法操作 – 不允许读取数据</value>
  </data>
  <data name="UpdateNotSupportedException" xml:space="preserve">
    <value>无效操作 –不允许更新</value>
  </data>
  <data name="DeleteNotSupportedException" xml:space="preserve">
    <value>非法操作 – 不允许删除</value>
  </data>
  <data name="NoBeginEditChildException" xml:space="preserve">
    <value>BeginEdit 在子对象上无效</value>
  </data>
  <data name="NoCancelEditChildException" xml:space="preserve">
    <value>CancelEdit 在子对象上无效</value>
  </data>
  <data name="NoApplyEditChildException" xml:space="preserve">
    <value>ApplyEdit 在子对象上无效</value>
  </data>
  <data name="NoSuchValueExistsException" xml:space="preserve">
    <value>此数值不存在:</value>
  </data>
  <data name="ErrorReadingValueException" xml:space="preserve">
    <value>读取数值出错:</value>
  </data>
  <data name="StringToDateException" xml:space="preserve">
    <value>字符串不能转化成日期</value>
  </data>
  <data name="ValueNotSmartDateException" xml:space="preserve">
    <value>数值不是SmartDate 类型</value>
  </data>
  <data name="NoPrincipalAllowedException" xml:space="preserve">
    <value>使用视窗集成的安全模式时, 不能将主名对象传送给DataPortal</value>
  </data>
  <data name="BusinessPrincipalException" xml:space="preserve">
    <value>主名必须是 BusinessPrincipal 的类型, 不能是</value>
  </data>
  <data name="SmartDateT" xml:space="preserve">
    <value>今天</value>
  </data>
  <data name="SmartDateToday" xml:space="preserve">
    <value>今天</value>
  </data>
  <data name="SmartDateY" xml:space="preserve">
    <value>昨天</value>
  </data>
  <data name="SmartDateYesterday" xml:space="preserve">
    <value>昨天</value>
  </data>
  <data name="SmartDateTom" xml:space="preserve">
    <value>明天</value>
  </data>
  <data name="SmartDateTomorrow" xml:space="preserve">
    <value>明天</value>
  </data>
  <data name="Failed" xml:space="preserve">
    <value>失败</value>
  </data>
  <data name="FailedOnServer" xml:space="preserve">
    <value>伺服器出错</value>
  </data>
  <data name="MethodCallFailed" xml:space="preserve">
    <value>调用函数失败</value>
  </data>
  <data name="MethodNotImplemented" xml:space="preserve">
    <value>尚未实现</value>
  </data>
  <data name="ExecuteNotSupportedException" xml:space="preserve">
    <value>非法操作 – 不允许执行</value>
  </data>
  <data name="InsertNotSupportedException" xml:space="preserve">
    <value>非法操作 – 不允许插入</value>
  </data>
  <data name="PropertyGetNotAllowed" xml:space="preserve">
    <value>不允许 get 属性</value>
  </data>
  <data name="PropertySetNotAllowed" xml:space="preserve">
    <value>不允许 set 属性</value>
  </data>
  <data name="NothingNotValid" xml:space="preserve">
    <value>参数不能是空值 (Nothing)</value>
  </data>
  <data name="PropertyCopyFailed" xml:space="preserve">
    <value>拷贝属性失败</value>
  </data>
</root>